
BLDC_G431RBT.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006d24  080001d8  080001d8  000101d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  08006efc  08006efc  00016efc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006f3c  08006f3c  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08006f3c  08006f3c  00016f3c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006f44  08006f44  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006f44  08006f44  00016f44  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006f48  08006f48  00016f48  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08006f4c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000264  2000000c  08006f58  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000270  08006f58  00020270  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001760b  00000000  00000000  0002007f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002972  00000000  00000000  0003768a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000015a0  00000000  00000000  0003a000  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000010ee  00000000  00000000  0003b5a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001ee85  00000000  00000000  0003c68e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00017e3a  00000000  00000000  0005b513  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d9919  00000000  00000000  0007334d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00005e7c  00000000  00000000  0014cc68  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000068  00000000  00000000  00152ae4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	; (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	; (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	; (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	2000000c 	.word	0x2000000c
 80001f4:	00000000 	.word	0x00000000
 80001f8:	08006ee4 	.word	0x08006ee4

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	; (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	; (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	; (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000010 	.word	0x20000010
 8000214:	08006ee4 	.word	0x08006ee4

08000218 <__aeabi_uldivmod>:
 8000218:	b953      	cbnz	r3, 8000230 <__aeabi_uldivmod+0x18>
 800021a:	b94a      	cbnz	r2, 8000230 <__aeabi_uldivmod+0x18>
 800021c:	2900      	cmp	r1, #0
 800021e:	bf08      	it	eq
 8000220:	2800      	cmpeq	r0, #0
 8000222:	bf1c      	itt	ne
 8000224:	f04f 31ff 	movne.w	r1, #4294967295
 8000228:	f04f 30ff 	movne.w	r0, #4294967295
 800022c:	f000 b970 	b.w	8000510 <__aeabi_idiv0>
 8000230:	f1ad 0c08 	sub.w	ip, sp, #8
 8000234:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000238:	f000 f806 	bl	8000248 <__udivmoddi4>
 800023c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000240:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000244:	b004      	add	sp, #16
 8000246:	4770      	bx	lr

08000248 <__udivmoddi4>:
 8000248:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800024c:	9e08      	ldr	r6, [sp, #32]
 800024e:	460d      	mov	r5, r1
 8000250:	4604      	mov	r4, r0
 8000252:	460f      	mov	r7, r1
 8000254:	2b00      	cmp	r3, #0
 8000256:	d14a      	bne.n	80002ee <__udivmoddi4+0xa6>
 8000258:	428a      	cmp	r2, r1
 800025a:	4694      	mov	ip, r2
 800025c:	d965      	bls.n	800032a <__udivmoddi4+0xe2>
 800025e:	fab2 f382 	clz	r3, r2
 8000262:	b143      	cbz	r3, 8000276 <__udivmoddi4+0x2e>
 8000264:	fa02 fc03 	lsl.w	ip, r2, r3
 8000268:	f1c3 0220 	rsb	r2, r3, #32
 800026c:	409f      	lsls	r7, r3
 800026e:	fa20 f202 	lsr.w	r2, r0, r2
 8000272:	4317      	orrs	r7, r2
 8000274:	409c      	lsls	r4, r3
 8000276:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800027a:	fa1f f58c 	uxth.w	r5, ip
 800027e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000282:	0c22      	lsrs	r2, r4, #16
 8000284:	fb0e 7711 	mls	r7, lr, r1, r7
 8000288:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 800028c:	fb01 f005 	mul.w	r0, r1, r5
 8000290:	4290      	cmp	r0, r2
 8000292:	d90a      	bls.n	80002aa <__udivmoddi4+0x62>
 8000294:	eb1c 0202 	adds.w	r2, ip, r2
 8000298:	f101 37ff 	add.w	r7, r1, #4294967295
 800029c:	f080 811c 	bcs.w	80004d8 <__udivmoddi4+0x290>
 80002a0:	4290      	cmp	r0, r2
 80002a2:	f240 8119 	bls.w	80004d8 <__udivmoddi4+0x290>
 80002a6:	3902      	subs	r1, #2
 80002a8:	4462      	add	r2, ip
 80002aa:	1a12      	subs	r2, r2, r0
 80002ac:	b2a4      	uxth	r4, r4
 80002ae:	fbb2 f0fe 	udiv	r0, r2, lr
 80002b2:	fb0e 2210 	mls	r2, lr, r0, r2
 80002b6:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80002ba:	fb00 f505 	mul.w	r5, r0, r5
 80002be:	42a5      	cmp	r5, r4
 80002c0:	d90a      	bls.n	80002d8 <__udivmoddi4+0x90>
 80002c2:	eb1c 0404 	adds.w	r4, ip, r4
 80002c6:	f100 32ff 	add.w	r2, r0, #4294967295
 80002ca:	f080 8107 	bcs.w	80004dc <__udivmoddi4+0x294>
 80002ce:	42a5      	cmp	r5, r4
 80002d0:	f240 8104 	bls.w	80004dc <__udivmoddi4+0x294>
 80002d4:	4464      	add	r4, ip
 80002d6:	3802      	subs	r0, #2
 80002d8:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002dc:	1b64      	subs	r4, r4, r5
 80002de:	2100      	movs	r1, #0
 80002e0:	b11e      	cbz	r6, 80002ea <__udivmoddi4+0xa2>
 80002e2:	40dc      	lsrs	r4, r3
 80002e4:	2300      	movs	r3, #0
 80002e6:	e9c6 4300 	strd	r4, r3, [r6]
 80002ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ee:	428b      	cmp	r3, r1
 80002f0:	d908      	bls.n	8000304 <__udivmoddi4+0xbc>
 80002f2:	2e00      	cmp	r6, #0
 80002f4:	f000 80ed 	beq.w	80004d2 <__udivmoddi4+0x28a>
 80002f8:	2100      	movs	r1, #0
 80002fa:	e9c6 0500 	strd	r0, r5, [r6]
 80002fe:	4608      	mov	r0, r1
 8000300:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000304:	fab3 f183 	clz	r1, r3
 8000308:	2900      	cmp	r1, #0
 800030a:	d149      	bne.n	80003a0 <__udivmoddi4+0x158>
 800030c:	42ab      	cmp	r3, r5
 800030e:	d302      	bcc.n	8000316 <__udivmoddi4+0xce>
 8000310:	4282      	cmp	r2, r0
 8000312:	f200 80f8 	bhi.w	8000506 <__udivmoddi4+0x2be>
 8000316:	1a84      	subs	r4, r0, r2
 8000318:	eb65 0203 	sbc.w	r2, r5, r3
 800031c:	2001      	movs	r0, #1
 800031e:	4617      	mov	r7, r2
 8000320:	2e00      	cmp	r6, #0
 8000322:	d0e2      	beq.n	80002ea <__udivmoddi4+0xa2>
 8000324:	e9c6 4700 	strd	r4, r7, [r6]
 8000328:	e7df      	b.n	80002ea <__udivmoddi4+0xa2>
 800032a:	b902      	cbnz	r2, 800032e <__udivmoddi4+0xe6>
 800032c:	deff      	udf	#255	; 0xff
 800032e:	fab2 f382 	clz	r3, r2
 8000332:	2b00      	cmp	r3, #0
 8000334:	f040 8090 	bne.w	8000458 <__udivmoddi4+0x210>
 8000338:	1a8a      	subs	r2, r1, r2
 800033a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800033e:	fa1f fe8c 	uxth.w	lr, ip
 8000342:	2101      	movs	r1, #1
 8000344:	fbb2 f5f7 	udiv	r5, r2, r7
 8000348:	fb07 2015 	mls	r0, r7, r5, r2
 800034c:	0c22      	lsrs	r2, r4, #16
 800034e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000352:	fb0e f005 	mul.w	r0, lr, r5
 8000356:	4290      	cmp	r0, r2
 8000358:	d908      	bls.n	800036c <__udivmoddi4+0x124>
 800035a:	eb1c 0202 	adds.w	r2, ip, r2
 800035e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000362:	d202      	bcs.n	800036a <__udivmoddi4+0x122>
 8000364:	4290      	cmp	r0, r2
 8000366:	f200 80cb 	bhi.w	8000500 <__udivmoddi4+0x2b8>
 800036a:	4645      	mov	r5, r8
 800036c:	1a12      	subs	r2, r2, r0
 800036e:	b2a4      	uxth	r4, r4
 8000370:	fbb2 f0f7 	udiv	r0, r2, r7
 8000374:	fb07 2210 	mls	r2, r7, r0, r2
 8000378:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800037c:	fb0e fe00 	mul.w	lr, lr, r0
 8000380:	45a6      	cmp	lr, r4
 8000382:	d908      	bls.n	8000396 <__udivmoddi4+0x14e>
 8000384:	eb1c 0404 	adds.w	r4, ip, r4
 8000388:	f100 32ff 	add.w	r2, r0, #4294967295
 800038c:	d202      	bcs.n	8000394 <__udivmoddi4+0x14c>
 800038e:	45a6      	cmp	lr, r4
 8000390:	f200 80bb 	bhi.w	800050a <__udivmoddi4+0x2c2>
 8000394:	4610      	mov	r0, r2
 8000396:	eba4 040e 	sub.w	r4, r4, lr
 800039a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800039e:	e79f      	b.n	80002e0 <__udivmoddi4+0x98>
 80003a0:	f1c1 0720 	rsb	r7, r1, #32
 80003a4:	408b      	lsls	r3, r1
 80003a6:	fa22 fc07 	lsr.w	ip, r2, r7
 80003aa:	ea4c 0c03 	orr.w	ip, ip, r3
 80003ae:	fa05 f401 	lsl.w	r4, r5, r1
 80003b2:	fa20 f307 	lsr.w	r3, r0, r7
 80003b6:	40fd      	lsrs	r5, r7
 80003b8:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003bc:	4323      	orrs	r3, r4
 80003be:	fbb5 f8f9 	udiv	r8, r5, r9
 80003c2:	fa1f fe8c 	uxth.w	lr, ip
 80003c6:	fb09 5518 	mls	r5, r9, r8, r5
 80003ca:	0c1c      	lsrs	r4, r3, #16
 80003cc:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80003d0:	fb08 f50e 	mul.w	r5, r8, lr
 80003d4:	42a5      	cmp	r5, r4
 80003d6:	fa02 f201 	lsl.w	r2, r2, r1
 80003da:	fa00 f001 	lsl.w	r0, r0, r1
 80003de:	d90b      	bls.n	80003f8 <__udivmoddi4+0x1b0>
 80003e0:	eb1c 0404 	adds.w	r4, ip, r4
 80003e4:	f108 3aff 	add.w	sl, r8, #4294967295
 80003e8:	f080 8088 	bcs.w	80004fc <__udivmoddi4+0x2b4>
 80003ec:	42a5      	cmp	r5, r4
 80003ee:	f240 8085 	bls.w	80004fc <__udivmoddi4+0x2b4>
 80003f2:	f1a8 0802 	sub.w	r8, r8, #2
 80003f6:	4464      	add	r4, ip
 80003f8:	1b64      	subs	r4, r4, r5
 80003fa:	b29d      	uxth	r5, r3
 80003fc:	fbb4 f3f9 	udiv	r3, r4, r9
 8000400:	fb09 4413 	mls	r4, r9, r3, r4
 8000404:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000408:	fb03 fe0e 	mul.w	lr, r3, lr
 800040c:	45a6      	cmp	lr, r4
 800040e:	d908      	bls.n	8000422 <__udivmoddi4+0x1da>
 8000410:	eb1c 0404 	adds.w	r4, ip, r4
 8000414:	f103 35ff 	add.w	r5, r3, #4294967295
 8000418:	d26c      	bcs.n	80004f4 <__udivmoddi4+0x2ac>
 800041a:	45a6      	cmp	lr, r4
 800041c:	d96a      	bls.n	80004f4 <__udivmoddi4+0x2ac>
 800041e:	3b02      	subs	r3, #2
 8000420:	4464      	add	r4, ip
 8000422:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000426:	fba3 9502 	umull	r9, r5, r3, r2
 800042a:	eba4 040e 	sub.w	r4, r4, lr
 800042e:	42ac      	cmp	r4, r5
 8000430:	46c8      	mov	r8, r9
 8000432:	46ae      	mov	lr, r5
 8000434:	d356      	bcc.n	80004e4 <__udivmoddi4+0x29c>
 8000436:	d053      	beq.n	80004e0 <__udivmoddi4+0x298>
 8000438:	b156      	cbz	r6, 8000450 <__udivmoddi4+0x208>
 800043a:	ebb0 0208 	subs.w	r2, r0, r8
 800043e:	eb64 040e 	sbc.w	r4, r4, lr
 8000442:	fa04 f707 	lsl.w	r7, r4, r7
 8000446:	40ca      	lsrs	r2, r1
 8000448:	40cc      	lsrs	r4, r1
 800044a:	4317      	orrs	r7, r2
 800044c:	e9c6 7400 	strd	r7, r4, [r6]
 8000450:	4618      	mov	r0, r3
 8000452:	2100      	movs	r1, #0
 8000454:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000458:	f1c3 0120 	rsb	r1, r3, #32
 800045c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000460:	fa20 f201 	lsr.w	r2, r0, r1
 8000464:	fa25 f101 	lsr.w	r1, r5, r1
 8000468:	409d      	lsls	r5, r3
 800046a:	432a      	orrs	r2, r5
 800046c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000470:	fa1f fe8c 	uxth.w	lr, ip
 8000474:	fbb1 f0f7 	udiv	r0, r1, r7
 8000478:	fb07 1510 	mls	r5, r7, r0, r1
 800047c:	0c11      	lsrs	r1, r2, #16
 800047e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000482:	fb00 f50e 	mul.w	r5, r0, lr
 8000486:	428d      	cmp	r5, r1
 8000488:	fa04 f403 	lsl.w	r4, r4, r3
 800048c:	d908      	bls.n	80004a0 <__udivmoddi4+0x258>
 800048e:	eb1c 0101 	adds.w	r1, ip, r1
 8000492:	f100 38ff 	add.w	r8, r0, #4294967295
 8000496:	d22f      	bcs.n	80004f8 <__udivmoddi4+0x2b0>
 8000498:	428d      	cmp	r5, r1
 800049a:	d92d      	bls.n	80004f8 <__udivmoddi4+0x2b0>
 800049c:	3802      	subs	r0, #2
 800049e:	4461      	add	r1, ip
 80004a0:	1b49      	subs	r1, r1, r5
 80004a2:	b292      	uxth	r2, r2
 80004a4:	fbb1 f5f7 	udiv	r5, r1, r7
 80004a8:	fb07 1115 	mls	r1, r7, r5, r1
 80004ac:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80004b0:	fb05 f10e 	mul.w	r1, r5, lr
 80004b4:	4291      	cmp	r1, r2
 80004b6:	d908      	bls.n	80004ca <__udivmoddi4+0x282>
 80004b8:	eb1c 0202 	adds.w	r2, ip, r2
 80004bc:	f105 38ff 	add.w	r8, r5, #4294967295
 80004c0:	d216      	bcs.n	80004f0 <__udivmoddi4+0x2a8>
 80004c2:	4291      	cmp	r1, r2
 80004c4:	d914      	bls.n	80004f0 <__udivmoddi4+0x2a8>
 80004c6:	3d02      	subs	r5, #2
 80004c8:	4462      	add	r2, ip
 80004ca:	1a52      	subs	r2, r2, r1
 80004cc:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80004d0:	e738      	b.n	8000344 <__udivmoddi4+0xfc>
 80004d2:	4631      	mov	r1, r6
 80004d4:	4630      	mov	r0, r6
 80004d6:	e708      	b.n	80002ea <__udivmoddi4+0xa2>
 80004d8:	4639      	mov	r1, r7
 80004da:	e6e6      	b.n	80002aa <__udivmoddi4+0x62>
 80004dc:	4610      	mov	r0, r2
 80004de:	e6fb      	b.n	80002d8 <__udivmoddi4+0x90>
 80004e0:	4548      	cmp	r0, r9
 80004e2:	d2a9      	bcs.n	8000438 <__udivmoddi4+0x1f0>
 80004e4:	ebb9 0802 	subs.w	r8, r9, r2
 80004e8:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004ec:	3b01      	subs	r3, #1
 80004ee:	e7a3      	b.n	8000438 <__udivmoddi4+0x1f0>
 80004f0:	4645      	mov	r5, r8
 80004f2:	e7ea      	b.n	80004ca <__udivmoddi4+0x282>
 80004f4:	462b      	mov	r3, r5
 80004f6:	e794      	b.n	8000422 <__udivmoddi4+0x1da>
 80004f8:	4640      	mov	r0, r8
 80004fa:	e7d1      	b.n	80004a0 <__udivmoddi4+0x258>
 80004fc:	46d0      	mov	r8, sl
 80004fe:	e77b      	b.n	80003f8 <__udivmoddi4+0x1b0>
 8000500:	3d02      	subs	r5, #2
 8000502:	4462      	add	r2, ip
 8000504:	e732      	b.n	800036c <__udivmoddi4+0x124>
 8000506:	4608      	mov	r0, r1
 8000508:	e70a      	b.n	8000320 <__udivmoddi4+0xd8>
 800050a:	4464      	add	r4, ip
 800050c:	3802      	subs	r0, #2
 800050e:	e742      	b.n	8000396 <__udivmoddi4+0x14e>

08000510 <__aeabi_idiv0>:
 8000510:	4770      	bx	lr
 8000512:	bf00      	nop

08000514 <SPIAdresHazirla>:
static void MX_TIM1_Init(void);
static void MX_ADC1_Init(void);
static void MX_USART2_UART_Init(void);
static void MX_SPI3_Init(void);
/* USER CODE BEGIN PFP */
void SPIAdresHazirla(){
 8000514:	b580      	push	{r7, lr}
 8000516:	af00      	add	r7, sp, #0
	/*1. UART terminalinden okunan başlangıç pozisyonunun en yüksek 8 bitini alın ve bu değeri 0x0016 adresine yazın*/
	 tBuf = 0x8016;
 8000518:	4b3e      	ldr	r3, [pc, #248]	; (8000614 <SPIAdresHazirla+0x100>)
 800051a:	f248 0216 	movw	r2, #32790	; 0x8016
 800051e:	801a      	strh	r2, [r3, #0]
	 HAL_SPI_Transmit(&hspi3, (uint8_t*)&tBuf, 2, 100); //Yazma isteği gönder
 8000520:	2364      	movs	r3, #100	; 0x64
 8000522:	2202      	movs	r2, #2
 8000524:	493b      	ldr	r1, [pc, #236]	; (8000614 <SPIAdresHazirla+0x100>)
 8000526:	483c      	ldr	r0, [pc, #240]	; (8000618 <SPIAdresHazirla+0x104>)
 8000528:	f003 fea9 	bl	800427e <HAL_SPI_Transmit>
	 HAL_SPI_Receive(&hspi3, (uint8_t*)&rBuf, 2, 100); //Gelen durum çerçevesini al
 800052c:	2364      	movs	r3, #100	; 0x64
 800052e:	2202      	movs	r2, #2
 8000530:	493a      	ldr	r1, [pc, #232]	; (800061c <SPIAdresHazirla+0x108>)
 8000532:	4839      	ldr	r0, [pc, #228]	; (8000618 <SPIAdresHazirla+0x104>)
 8000534:	f004 f811 	bl	800455a <HAL_SPI_Receive>
	 //Parity hata kontrolü
	 if( ! ((rBuf | (1 << 14)) == rBuf)){
 8000538:	4b38      	ldr	r3, [pc, #224]	; (800061c <SPIAdresHazirla+0x108>)
 800053a:	881b      	ldrh	r3, [r3, #0]
 800053c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000540:	b29a      	uxth	r2, r3
 8000542:	4b36      	ldr	r3, [pc, #216]	; (800061c <SPIAdresHazirla+0x108>)
 8000544:	881b      	ldrh	r3, [r3, #0]
 8000546:	429a      	cmp	r2, r3
 8000548:	d006      	beq.n	8000558 <SPIAdresHazirla+0x44>
		 HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 800054a:	2201      	movs	r2, #1
 800054c:	2120      	movs	r1, #32
 800054e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000552:	f002 fdf9 	bl	8003148 <HAL_GPIO_WritePin>
		 return;
 8000556:	e05c      	b.n	8000612 <SPIAdresHazirla+0xfe>
	 }
	 tBuf = 0x8015; //1000 0000 0001 0101
 8000558:	4b2e      	ldr	r3, [pc, #184]	; (8000614 <SPIAdresHazirla+0x100>)
 800055a:	f248 0215 	movw	r2, #32789	; 0x8015
 800055e:	801a      	strh	r2, [r3, #0]
	 HAL_SPI_Transmit(&hspi3, (uint8_t*)&tBuf, 2, 100); //Veriyi Yaz
 8000560:	2364      	movs	r3, #100	; 0x64
 8000562:	2202      	movs	r2, #2
 8000564:	492b      	ldr	r1, [pc, #172]	; (8000614 <SPIAdresHazirla+0x100>)
 8000566:	482c      	ldr	r0, [pc, #176]	; (8000618 <SPIAdresHazirla+0x104>)
 8000568:	f003 fe89 	bl	800427e <HAL_SPI_Transmit>
	 /*2. UART terminalinden okunan başlangıç pozisyonunun en düşük 6 bitini alın ve budeğeri 0x0017 adresine yazın.*/
	 tBuf = 0x0017;
 800056c:	4b29      	ldr	r3, [pc, #164]	; (8000614 <SPIAdresHazirla+0x100>)
 800056e:	2217      	movs	r2, #23
 8000570:	801a      	strh	r2, [r3, #0]
	 HAL_SPI_Transmit(&hspi3, (uint8_t*)&tBuf, 2, 100); //Yazma isteği gönder
 8000572:	2364      	movs	r3, #100	; 0x64
 8000574:	2202      	movs	r2, #2
 8000576:	4927      	ldr	r1, [pc, #156]	; (8000614 <SPIAdresHazirla+0x100>)
 8000578:	4827      	ldr	r0, [pc, #156]	; (8000618 <SPIAdresHazirla+0x104>)
 800057a:	f003 fe80 	bl	800427e <HAL_SPI_Transmit>
	 HAL_SPI_Receive(&hspi3, (uint8_t*)&rBuf, 2, 100); //Gelen durum çerçevesini al
 800057e:	2364      	movs	r3, #100	; 0x64
 8000580:	2202      	movs	r2, #2
 8000582:	4926      	ldr	r1, [pc, #152]	; (800061c <SPIAdresHazirla+0x108>)
 8000584:	4824      	ldr	r0, [pc, #144]	; (8000618 <SPIAdresHazirla+0x104>)
 8000586:	f003 ffe8 	bl	800455a <HAL_SPI_Receive>

	 //Parity hata kontrolü
	 if( ! ((rBuf | (1 << 14)) == rBuf)){
 800058a:	4b24      	ldr	r3, [pc, #144]	; (800061c <SPIAdresHazirla+0x108>)
 800058c:	881b      	ldrh	r3, [r3, #0]
 800058e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000592:	b29a      	uxth	r2, r3
 8000594:	4b21      	ldr	r3, [pc, #132]	; (800061c <SPIAdresHazirla+0x108>)
 8000596:	881b      	ldrh	r3, [r3, #0]
 8000598:	429a      	cmp	r2, r3
 800059a:	d006      	beq.n	80005aa <SPIAdresHazirla+0x96>
		 HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 800059c:	2201      	movs	r2, #1
 800059e:	2120      	movs	r1, #32
 80005a0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80005a4:	f002 fdd0 	bl	8003148 <HAL_GPIO_WritePin>
		 return;
 80005a8:	e033      	b.n	8000612 <SPIAdresHazirla+0xfe>
	 }
	 tBuf = 0x8007; //1000 0000 0001 0101
 80005aa:	4b1a      	ldr	r3, [pc, #104]	; (8000614 <SPIAdresHazirla+0x100>)
 80005ac:	f248 0207 	movw	r2, #32775	; 0x8007
 80005b0:	801a      	strh	r2, [r3, #0]
	 HAL_SPI_Transmit(&hspi3, (uint8_t*)&tBuf, 2, 100); //Veriyi Yaz
 80005b2:	2364      	movs	r3, #100	; 0x64
 80005b4:	2202      	movs	r2, #2
 80005b6:	4917      	ldr	r1, [pc, #92]	; (8000614 <SPIAdresHazirla+0x100>)
 80005b8:	4817      	ldr	r0, [pc, #92]	; (8000618 <SPIAdresHazirla+0x104>)
 80005ba:	f003 fe60 	bl	800427e <HAL_SPI_Transmit>
	 /*3. UART terminalinden okunan başlangıç pozisyonunun en düşük 6 bitini alın ve budeğeri 0x0017 adresine yazın.*/
	 tBuf = 0x80190;
 80005be:	4b15      	ldr	r3, [pc, #84]	; (8000614 <SPIAdresHazirla+0x100>)
 80005c0:	f44f 72c8 	mov.w	r2, #400	; 0x190
 80005c4:	801a      	strh	r2, [r3, #0]
	 HAL_SPI_Transmit(&hspi3, (uint8_t*)&tBuf, 2, 100); //Yazma isteği gönder
 80005c6:	2364      	movs	r3, #100	; 0x64
 80005c8:	2202      	movs	r2, #2
 80005ca:	4912      	ldr	r1, [pc, #72]	; (8000614 <SPIAdresHazirla+0x100>)
 80005cc:	4812      	ldr	r0, [pc, #72]	; (8000618 <SPIAdresHazirla+0x104>)
 80005ce:	f003 fe56 	bl	800427e <HAL_SPI_Transmit>
	 HAL_SPI_Receive(&hspi3, (uint8_t*)&rBuf, 2, 100); //Gelen durum çerçevesini al
 80005d2:	2364      	movs	r3, #100	; 0x64
 80005d4:	2202      	movs	r2, #2
 80005d6:	4911      	ldr	r1, [pc, #68]	; (800061c <SPIAdresHazirla+0x108>)
 80005d8:	480f      	ldr	r0, [pc, #60]	; (8000618 <SPIAdresHazirla+0x104>)
 80005da:	f003 ffbe 	bl	800455a <HAL_SPI_Receive>
	 //Parity hata kontrolü
	 if( ! ((rBuf | (1 << 14)) == rBuf)){
 80005de:	4b0f      	ldr	r3, [pc, #60]	; (800061c <SPIAdresHazirla+0x108>)
 80005e0:	881b      	ldrh	r3, [r3, #0]
 80005e2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80005e6:	b29a      	uxth	r2, r3
 80005e8:	4b0c      	ldr	r3, [pc, #48]	; (800061c <SPIAdresHazirla+0x108>)
 80005ea:	881b      	ldrh	r3, [r3, #0]
 80005ec:	429a      	cmp	r2, r3
 80005ee:	d006      	beq.n	80005fe <SPIAdresHazirla+0xea>
		 HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 80005f0:	2201      	movs	r2, #1
 80005f2:	2120      	movs	r1, #32
 80005f4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80005f8:	f002 fda6 	bl	8003148 <HAL_GPIO_WritePin>
		 return;
 80005fc:	e009      	b.n	8000612 <SPIAdresHazirla+0xfe>
	 }
	 tBuf = 0x8007; //1000 0000 0000 0111
 80005fe:	4b05      	ldr	r3, [pc, #20]	; (8000614 <SPIAdresHazirla+0x100>)
 8000600:	f248 0207 	movw	r2, #32775	; 0x8007
 8000604:	801a      	strh	r2, [r3, #0]
	 HAL_SPI_Transmit(&hspi3, (uint8_t*)&tBuf, 2, 100); //Veriyi Yaz
 8000606:	2364      	movs	r3, #100	; 0x64
 8000608:	2202      	movs	r2, #2
 800060a:	4902      	ldr	r1, [pc, #8]	; (8000614 <SPIAdresHazirla+0x100>)
 800060c:	4802      	ldr	r0, [pc, #8]	; (8000618 <SPIAdresHazirla+0x104>)
 800060e:	f003 fe36 	bl	800427e <HAL_SPI_Transmit>
}
 8000612:	bd80      	pop	{r7, pc}
 8000614:	20000264 	.word	0x20000264
 8000618:	200001b4 	.word	0x200001b4
 800061c:	20000266 	.word	0x20000266

08000620 <map>:
uint16_t as5047p_spi_read(void);
void as5047p_spi_select(void);
void as5047p_spi_deselect(void);
void as5047p_delay(void);
uint16_t adc_value;
int32_t map(int32_t x, int32_t in_min, int32_t in_max, int32_t out_min, int32_t out_max) {
 8000620:	b480      	push	{r7}
 8000622:	b085      	sub	sp, #20
 8000624:	af00      	add	r7, sp, #0
 8000626:	60f8      	str	r0, [r7, #12]
 8000628:	60b9      	str	r1, [r7, #8]
 800062a:	607a      	str	r2, [r7, #4]
 800062c:	603b      	str	r3, [r7, #0]
return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 800062e:	68fa      	ldr	r2, [r7, #12]
 8000630:	68bb      	ldr	r3, [r7, #8]
 8000632:	1ad3      	subs	r3, r2, r3
 8000634:	69b9      	ldr	r1, [r7, #24]
 8000636:	683a      	ldr	r2, [r7, #0]
 8000638:	1a8a      	subs	r2, r1, r2
 800063a:	fb03 f202 	mul.w	r2, r3, r2
 800063e:	6879      	ldr	r1, [r7, #4]
 8000640:	68bb      	ldr	r3, [r7, #8]
 8000642:	1acb      	subs	r3, r1, r3
 8000644:	fb92 f2f3 	sdiv	r2, r2, r3
 8000648:	683b      	ldr	r3, [r7, #0]
 800064a:	4413      	add	r3, r2
}
 800064c:	4618      	mov	r0, r3
 800064e:	3714      	adds	r7, #20
 8000650:	46bd      	mov	sp, r7
 8000652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000656:	4770      	bx	lr

08000658 <Read_ADC>:
void Read_ADC() {
 8000658:	b580      	push	{r7, lr}
 800065a:	af00      	add	r7, sp, #0
		 HAL_ADC_Start(&hadc1);
 800065c:	480a      	ldr	r0, [pc, #40]	; (8000688 <Read_ADC+0x30>)
 800065e:	f001 faff 	bl	8001c60 <HAL_ADC_Start>
	 if( HAL_ADC_PollForConversion(&hadc1, 1000000) == HAL_OK ){
 8000662:	490a      	ldr	r1, [pc, #40]	; (800068c <Read_ADC+0x34>)
 8000664:	4808      	ldr	r0, [pc, #32]	; (8000688 <Read_ADC+0x30>)
 8000666:	f001 fbeb 	bl	8001e40 <HAL_ADC_PollForConversion>
 800066a:	4603      	mov	r3, r0
 800066c:	2b00      	cmp	r3, #0
 800066e:	d106      	bne.n	800067e <Read_ADC+0x26>
	 	adc_value = HAL_ADC_GetValue(&hadc1);
 8000670:	4805      	ldr	r0, [pc, #20]	; (8000688 <Read_ADC+0x30>)
 8000672:	f001 fcbd 	bl	8001ff0 <HAL_ADC_GetValue>
 8000676:	4603      	mov	r3, r0
 8000678:	b29a      	uxth	r2, r3
 800067a:	4b05      	ldr	r3, [pc, #20]	; (8000690 <Read_ADC+0x38>)
 800067c:	801a      	strh	r2, [r3, #0]
	 }
	 HAL_ADC_Stop(&hadc1);
 800067e:	4802      	ldr	r0, [pc, #8]	; (8000688 <Read_ADC+0x30>)
 8000680:	f001 fbaa 	bl	8001dd8 <HAL_ADC_Stop>
	 }
 8000684:	bf00      	nop
 8000686:	bd80      	pop	{r7, pc}
 8000688:	20000028 	.word	0x20000028
 800068c:	000f4240 	.word	0x000f4240
 8000690:	20000268 	.word	0x20000268

08000694 <main>:
/**
* @brief The application entry point.
* @retval int
*/
int main(void)
{
 8000694:	b580      	push	{r7, lr}
 8000696:	b086      	sub	sp, #24
 8000698:	af02      	add	r7, sp, #8
/* USER CODE BEGIN 1 */
/* USER CODE END 1 */
/* MCU Configuration--------------------------------------------------------*/
/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
HAL_Init();
 800069a:	f000 fe46 	bl	800132a <HAL_Init>
/* USER CODE BEGIN Init */
/* USER CODE END Init */
/* Configure the system clock */
SystemClock_Config();
 800069e:	f000 f931 	bl	8000904 <SystemClock_Config>
/* USER CODE BEGIN SysInit */
/* USER CODE END SysInit */
/* Initialize all configured peripherals */
MX_GPIO_Init();
 80006a2:	f000 fb8f 	bl	8000dc4 <MX_GPIO_Init>
MX_LPUART1_UART_Init();
 80006a6:	f000 f9f1 	bl	8000a8c <MX_LPUART1_UART_Init>
MX_TIM1_Init();
 80006aa:	f000 fac3 	bl	8000c34 <MX_TIM1_Init>
MX_ADC1_Init();
 80006ae:	f000 f975 	bl	800099c <MX_ADC1_Init>
MX_USART2_UART_Init();
 80006b2:	f000 fa35 	bl	8000b20 <MX_USART2_UART_Init>
MX_SPI3_Init();
 80006b6:	f000 fa7f 	bl	8000bb8 <MX_SPI3_Init>
/* USER CODE BEGIN 2 */
SPIAdresHazirla();
 80006ba:	f7ff ff2b 	bl	8000514 <SPIAdresHazirla>
/* USER CODE BEGIN WHILE */
while (1)
{
/* USER CODE END WHILE */
/* USER CODE BEGIN 3 */
	 Read_ADC();
 80006be:	f7ff ffcb 	bl	8000658 <Read_ADC>
int i = map(adc_value, 0, 4095, 60, 255);
 80006c2:	4b8c      	ldr	r3, [pc, #560]	; (80008f4 <main+0x260>)
 80006c4:	881b      	ldrh	r3, [r3, #0]
 80006c6:	4618      	mov	r0, r3
 80006c8:	23ff      	movs	r3, #255	; 0xff
 80006ca:	9300      	str	r3, [sp, #0]
 80006cc:	233c      	movs	r3, #60	; 0x3c
 80006ce:	f640 72ff 	movw	r2, #4095	; 0xfff
 80006d2:	2100      	movs	r1, #0
 80006d4:	f7ff ffa4 	bl	8000620 <map>
 80006d8:	60f8      	str	r0, [r7, #12]
if(adc_value ==0)
 80006da:	4b86      	ldr	r3, [pc, #536]	; (80008f4 <main+0x260>)
 80006dc:	881b      	ldrh	r3, [r3, #0]
 80006de:	2b00      	cmp	r3, #0
 80006e0:	d101      	bne.n	80006e6 <main+0x52>
	 i = 0;
 80006e2:	2300      	movs	r3, #0
 80006e4:	60fb      	str	r3, [r7, #12]
	 for (int operation = 1; operation < 7; ++operation) {
 80006e6:	2301      	movs	r3, #1
 80006e8:	60bb      	str	r3, [r7, #8]
 80006ea:	e0e2      	b.n	80008b2 <main+0x21e>
	 	 switch (operation) {
 80006ec:	68bb      	ldr	r3, [r7, #8]
 80006ee:	3b01      	subs	r3, #1
 80006f0:	2b05      	cmp	r3, #5
 80006f2:	f200 80db 	bhi.w	80008ac <main+0x218>
 80006f6:	a201      	add	r2, pc, #4	; (adr r2, 80006fc <main+0x68>)
 80006f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80006fc:	08000715 	.word	0x08000715
 8000700:	08000759 	.word	0x08000759
 8000704:	0800079d 	.word	0x0800079d
 8000708:	080007e1 	.word	0x080007e1
 800070c:	08000825 	.word	0x08000825
 8000710:	08000869 	.word	0x08000869
	 	 case 1:
	 	 	 HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8000714:	2100      	movs	r1, #0
 8000716:	4878      	ldr	r0, [pc, #480]	; (80008f8 <main+0x264>)
 8000718:	f004 fcd6 	bl	80050c8 <HAL_TIM_PWM_Start>
	 	 	 HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_2);
 800071c:	2104      	movs	r1, #4
 800071e:	4876      	ldr	r0, [pc, #472]	; (80008f8 <main+0x264>)
 8000720:	f004 fdd2 	bl	80052c8 <HAL_TIM_PWM_Stop>
	 	 	 HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_3);
 8000724:	2108      	movs	r1, #8
 8000726:	4874      	ldr	r0, [pc, #464]	; (80008f8 <main+0x264>)
 8000728:	f004 fdce 	bl	80052c8 <HAL_TIM_PWM_Stop>
	 	 HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_RESET);
 800072c:	2200      	movs	r2, #0
 800072e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000732:	4872      	ldr	r0, [pc, #456]	; (80008fc <main+0x268>)
 8000734:	f002 fd08 	bl	8003148 <HAL_GPIO_WritePin>
	 	 HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_SET);
 8000738:	2201      	movs	r2, #1
 800073a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800073e:	486f      	ldr	r0, [pc, #444]	; (80008fc <main+0x268>)
 8000740:	f002 fd02 	bl	8003148 <HAL_GPIO_WritePin>
	 	 HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, GPIO_PIN_RESET);
 8000744:	2200      	movs	r2, #0
 8000746:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800074a:	486c      	ldr	r0, [pc, #432]	; (80008fc <main+0x268>)
 800074c:	f002 fcfc 	bl	8003148 <HAL_GPIO_WritePin>
	 	 HAL_Delay(2);
 8000750:	2002      	movs	r0, #2
 8000752:	f000 fe5b 	bl	800140c <HAL_Delay>
	 	 break;
 8000756:	e0a9      	b.n	80008ac <main+0x218>
	 	 case 2:
	 	 	 HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8000758:	2100      	movs	r1, #0
 800075a:	4867      	ldr	r0, [pc, #412]	; (80008f8 <main+0x264>)
 800075c:	f004 fcb4 	bl	80050c8 <HAL_TIM_PWM_Start>
	 	 	 HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_2);
 8000760:	2104      	movs	r1, #4
 8000762:	4865      	ldr	r0, [pc, #404]	; (80008f8 <main+0x264>)
 8000764:	f004 fdb0 	bl	80052c8 <HAL_TIM_PWM_Stop>
	 	 	 HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_3);
 8000768:	2108      	movs	r1, #8
 800076a:	4863      	ldr	r0, [pc, #396]	; (80008f8 <main+0x264>)
 800076c:	f004 fdac 	bl	80052c8 <HAL_TIM_PWM_Stop>
	 	 HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_RESET);
 8000770:	2200      	movs	r2, #0
 8000772:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000776:	4861      	ldr	r0, [pc, #388]	; (80008fc <main+0x268>)
 8000778:	f002 fce6 	bl	8003148 <HAL_GPIO_WritePin>
	 	 HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_RESET);
 800077c:	2200      	movs	r2, #0
 800077e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000782:	485e      	ldr	r0, [pc, #376]	; (80008fc <main+0x268>)
 8000784:	f002 fce0 	bl	8003148 <HAL_GPIO_WritePin>
	 	 HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, GPIO_PIN_SET);
 8000788:	2201      	movs	r2, #1
 800078a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800078e:	485b      	ldr	r0, [pc, #364]	; (80008fc <main+0x268>)
 8000790:	f002 fcda 	bl	8003148 <HAL_GPIO_WritePin>
	 	 HAL_Delay(2);
 8000794:	2002      	movs	r0, #2
 8000796:	f000 fe39 	bl	800140c <HAL_Delay>
	 	 break;
 800079a:	e087      	b.n	80008ac <main+0x218>
	 	 case 3:
	 	 	 HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_1);
 800079c:	2100      	movs	r1, #0
 800079e:	4856      	ldr	r0, [pc, #344]	; (80008f8 <main+0x264>)
 80007a0:	f004 fd92 	bl	80052c8 <HAL_TIM_PWM_Stop>
	 	 	 HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 80007a4:	2104      	movs	r1, #4
 80007a6:	4854      	ldr	r0, [pc, #336]	; (80008f8 <main+0x264>)
 80007a8:	f004 fc8e 	bl	80050c8 <HAL_TIM_PWM_Start>
	 	 	 HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_3);
 80007ac:	2108      	movs	r1, #8
 80007ae:	4852      	ldr	r0, [pc, #328]	; (80008f8 <main+0x264>)
 80007b0:	f004 fd8a 	bl	80052c8 <HAL_TIM_PWM_Stop>
	 	 HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_RESET);
 80007b4:	2200      	movs	r2, #0
 80007b6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80007ba:	4850      	ldr	r0, [pc, #320]	; (80008fc <main+0x268>)
 80007bc:	f002 fcc4 	bl	8003148 <HAL_GPIO_WritePin>
	 	 HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_RESET);
 80007c0:	2200      	movs	r2, #0
 80007c2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80007c6:	484d      	ldr	r0, [pc, #308]	; (80008fc <main+0x268>)
 80007c8:	f002 fcbe 	bl	8003148 <HAL_GPIO_WritePin>
	 	 HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, GPIO_PIN_SET);
 80007cc:	2201      	movs	r2, #1
 80007ce:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80007d2:	484a      	ldr	r0, [pc, #296]	; (80008fc <main+0x268>)
 80007d4:	f002 fcb8 	bl	8003148 <HAL_GPIO_WritePin>
	 	 HAL_Delay(2);
 80007d8:	2002      	movs	r0, #2
 80007da:	f000 fe17 	bl	800140c <HAL_Delay>
	 	 break;
 80007de:	e065      	b.n	80008ac <main+0x218>
	 	 case 4:
	 	 	 HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_1);
 80007e0:	2100      	movs	r1, #0
 80007e2:	4845      	ldr	r0, [pc, #276]	; (80008f8 <main+0x264>)
 80007e4:	f004 fd70 	bl	80052c8 <HAL_TIM_PWM_Stop>
	 	 	 HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 80007e8:	2104      	movs	r1, #4
 80007ea:	4843      	ldr	r0, [pc, #268]	; (80008f8 <main+0x264>)
 80007ec:	f004 fc6c 	bl	80050c8 <HAL_TIM_PWM_Start>
	 	 	 HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_3);
 80007f0:	2108      	movs	r1, #8
 80007f2:	4841      	ldr	r0, [pc, #260]	; (80008f8 <main+0x264>)
 80007f4:	f004 fd68 	bl	80052c8 <HAL_TIM_PWM_Stop>
	 	 HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_SET);
 80007f8:	2201      	movs	r2, #1
 80007fa:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80007fe:	483f      	ldr	r0, [pc, #252]	; (80008fc <main+0x268>)
 8000800:	f002 fca2 	bl	8003148 <HAL_GPIO_WritePin>
	 	 HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_RESET);
 8000804:	2200      	movs	r2, #0
 8000806:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800080a:	483c      	ldr	r0, [pc, #240]	; (80008fc <main+0x268>)
 800080c:	f002 fc9c 	bl	8003148 <HAL_GPIO_WritePin>
	 	 HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, GPIO_PIN_RESET);
 8000810:	2200      	movs	r2, #0
 8000812:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000816:	4839      	ldr	r0, [pc, #228]	; (80008fc <main+0x268>)
 8000818:	f002 fc96 	bl	8003148 <HAL_GPIO_WritePin>
	 	 HAL_Delay(2);
 800081c:	2002      	movs	r0, #2
 800081e:	f000 fdf5 	bl	800140c <HAL_Delay>
	 	 break;
 8000822:	e043      	b.n	80008ac <main+0x218>
	 	 case 5:
	 	 	 HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_1);
 8000824:	2100      	movs	r1, #0
 8000826:	4834      	ldr	r0, [pc, #208]	; (80008f8 <main+0x264>)
 8000828:	f004 fd4e 	bl	80052c8 <HAL_TIM_PWM_Stop>
	 	 	 HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_2);
 800082c:	2104      	movs	r1, #4
 800082e:	4832      	ldr	r0, [pc, #200]	; (80008f8 <main+0x264>)
 8000830:	f004 fd4a 	bl	80052c8 <HAL_TIM_PWM_Stop>
	 	 	 HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 8000834:	2108      	movs	r1, #8
 8000836:	4830      	ldr	r0, [pc, #192]	; (80008f8 <main+0x264>)
 8000838:	f004 fc46 	bl	80050c8 <HAL_TIM_PWM_Start>
	 	 HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_SET);
 800083c:	2201      	movs	r2, #1
 800083e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000842:	482e      	ldr	r0, [pc, #184]	; (80008fc <main+0x268>)
 8000844:	f002 fc80 	bl	8003148 <HAL_GPIO_WritePin>
	 	 HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_RESET);
 8000848:	2200      	movs	r2, #0
 800084a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800084e:	482b      	ldr	r0, [pc, #172]	; (80008fc <main+0x268>)
 8000850:	f002 fc7a 	bl	8003148 <HAL_GPIO_WritePin>
	 	 HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, GPIO_PIN_RESET);
 8000854:	2200      	movs	r2, #0
 8000856:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800085a:	4828      	ldr	r0, [pc, #160]	; (80008fc <main+0x268>)
 800085c:	f002 fc74 	bl	8003148 <HAL_GPIO_WritePin>
	 	 HAL_Delay(2);
 8000860:	2002      	movs	r0, #2
 8000862:	f000 fdd3 	bl	800140c <HAL_Delay>
	 	 break;
 8000866:	e021      	b.n	80008ac <main+0x218>
	 	 case 6:
	 	 	 HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_1);
 8000868:	2100      	movs	r1, #0
 800086a:	4823      	ldr	r0, [pc, #140]	; (80008f8 <main+0x264>)
 800086c:	f004 fd2c 	bl	80052c8 <HAL_TIM_PWM_Stop>
	 	 	 HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_2);
 8000870:	2104      	movs	r1, #4
 8000872:	4821      	ldr	r0, [pc, #132]	; (80008f8 <main+0x264>)
 8000874:	f004 fd28 	bl	80052c8 <HAL_TIM_PWM_Stop>
	 	 	 HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 8000878:	2108      	movs	r1, #8
 800087a:	481f      	ldr	r0, [pc, #124]	; (80008f8 <main+0x264>)
 800087c:	f004 fc24 	bl	80050c8 <HAL_TIM_PWM_Start>
	 	 HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_RESET);
 8000880:	2200      	movs	r2, #0
 8000882:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000886:	481d      	ldr	r0, [pc, #116]	; (80008fc <main+0x268>)
 8000888:	f002 fc5e 	bl	8003148 <HAL_GPIO_WritePin>
	 	 HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_SET);
 800088c:	2201      	movs	r2, #1
 800088e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000892:	481a      	ldr	r0, [pc, #104]	; (80008fc <main+0x268>)
 8000894:	f002 fc58 	bl	8003148 <HAL_GPIO_WritePin>
	 	 HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, GPIO_PIN_RESET);
 8000898:	2200      	movs	r2, #0
 800089a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800089e:	4817      	ldr	r0, [pc, #92]	; (80008fc <main+0x268>)
 80008a0:	f002 fc52 	bl	8003148 <HAL_GPIO_WritePin>
	 	 HAL_Delay(2);
 80008a4:	2002      	movs	r0, #2
 80008a6:	f000 fdb1 	bl	800140c <HAL_Delay>
	 	 break;
 80008aa:	bf00      	nop
	 for (int operation = 1; operation < 7; ++operation) {
 80008ac:	68bb      	ldr	r3, [r7, #8]
 80008ae:	3301      	adds	r3, #1
 80008b0:	60bb      	str	r3, [r7, #8]
 80008b2:	68bb      	ldr	r3, [r7, #8]
 80008b4:	2b06      	cmp	r3, #6
 80008b6:	f77f af19 	ble.w	80006ec <main+0x58>
	 	 }}
	 __HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_1,i);
 80008ba:	4b0f      	ldr	r3, [pc, #60]	; (80008f8 <main+0x264>)
 80008bc:	681b      	ldr	r3, [r3, #0]
 80008be:	68fa      	ldr	r2, [r7, #12]
 80008c0:	635a      	str	r2, [r3, #52]	; 0x34
	 __HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_2,i);
 80008c2:	4b0d      	ldr	r3, [pc, #52]	; (80008f8 <main+0x264>)
 80008c4:	681b      	ldr	r3, [r3, #0]
 80008c6:	68fa      	ldr	r2, [r7, #12]
 80008c8:	639a      	str	r2, [r3, #56]	; 0x38
	 __HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_3,i);
 80008ca:	4b0b      	ldr	r3, [pc, #44]	; (80008f8 <main+0x264>)
 80008cc:	681b      	ldr	r3, [r3, #0]
 80008ce:	68fa      	ldr	r2, [r7, #12]
 80008d0:	63da      	str	r2, [r3, #60]	; 0x3c


	 uint16_t data= 0x3FFE;
 80008d2:	f643 73fe 	movw	r3, #16382	; 0x3ffe
 80008d6:	80fb      	strh	r3, [r7, #6]
	 	    HAL_SPI_Transmit(&hspi3, &data, 2, 100);
 80008d8:	1db9      	adds	r1, r7, #6
 80008da:	2364      	movs	r3, #100	; 0x64
 80008dc:	2202      	movs	r2, #2
 80008de:	4808      	ldr	r0, [pc, #32]	; (8000900 <main+0x26c>)
 80008e0:	f003 fccd 	bl	800427e <HAL_SPI_Transmit>
	 	    uint16_t rxbuf;
	 	    HAL_SPI_Receive(&hspi3, &rxbuf, 2, 100);
 80008e4:	1d39      	adds	r1, r7, #4
 80008e6:	2364      	movs	r3, #100	; 0x64
 80008e8:	2202      	movs	r2, #2
 80008ea:	4805      	ldr	r0, [pc, #20]	; (8000900 <main+0x26c>)
 80008ec:	f003 fe35 	bl	800455a <HAL_SPI_Receive>
{
 80008f0:	e6e5      	b.n	80006be <main+0x2a>
 80008f2:	bf00      	nop
 80008f4:	20000268 	.word	0x20000268
 80008f8:	20000218 	.word	0x20000218
 80008fc:	48000400 	.word	0x48000400
 8000900:	200001b4 	.word	0x200001b4

08000904 <SystemClock_Config>:
/**
* @brief System Clock Configuration
* @retval None
*/
void SystemClock_Config(void)
{
 8000904:	b580      	push	{r7, lr}
 8000906:	b094      	sub	sp, #80	; 0x50
 8000908:	af00      	add	r7, sp, #0
RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800090a:	f107 0318 	add.w	r3, r7, #24
 800090e:	2238      	movs	r2, #56	; 0x38
 8000910:	2100      	movs	r1, #0
 8000912:	4618      	mov	r0, r3
 8000914:	f006 faba 	bl	8006e8c <memset>
RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000918:	1d3b      	adds	r3, r7, #4
 800091a:	2200      	movs	r2, #0
 800091c:	601a      	str	r2, [r3, #0]
 800091e:	605a      	str	r2, [r3, #4]
 8000920:	609a      	str	r2, [r3, #8]
 8000922:	60da      	str	r2, [r3, #12]
 8000924:	611a      	str	r2, [r3, #16]
/** Configure the main internal regulator output voltage
*/
HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8000926:	2000      	movs	r0, #0
 8000928:	f002 fc26 	bl	8003178 <HAL_PWREx_ControlVoltageScaling>
/** Initializes the RCC Oscillators according to the specified parameters
* in the RCC_OscInitTypeDef structure.
*/
RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800092c:	2302      	movs	r3, #2
 800092e:	61bb      	str	r3, [r7, #24]
RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000930:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000934:	627b      	str	r3, [r7, #36]	; 0x24
RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000936:	2340      	movs	r3, #64	; 0x40
 8000938:	62bb      	str	r3, [r7, #40]	; 0x28
RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800093a:	2302      	movs	r3, #2
 800093c:	637b      	str	r3, [r7, #52]	; 0x34
RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800093e:	2302      	movs	r3, #2
 8000940:	63bb      	str	r3, [r7, #56]	; 0x38
RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 8000942:	2304      	movs	r3, #4
 8000944:	63fb      	str	r3, [r7, #60]	; 0x3c
RCC_OscInitStruct.PLL.PLLN = 85;
 8000946:	2355      	movs	r3, #85	; 0x55
 8000948:	643b      	str	r3, [r7, #64]	; 0x40
RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800094a:	2302      	movs	r3, #2
 800094c:	647b      	str	r3, [r7, #68]	; 0x44
RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800094e:	2302      	movs	r3, #2
 8000950:	64bb      	str	r3, [r7, #72]	; 0x48
RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000952:	2302      	movs	r3, #2
 8000954:	64fb      	str	r3, [r7, #76]	; 0x4c
if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000956:	f107 0318 	add.w	r3, r7, #24
 800095a:	4618      	mov	r0, r3
 800095c:	f002 fcc0 	bl	80032e0 <HAL_RCC_OscConfig>
 8000960:	4603      	mov	r3, r0
 8000962:	2b00      	cmp	r3, #0
 8000964:	d001      	beq.n	800096a <SystemClock_Config+0x66>
{
Error_Handler();
 8000966:	f000 faab 	bl	8000ec0 <Error_Handler>
}
/** Initializes the CPU, AHB and APB buses clocks
*/
RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800096a:	230f      	movs	r3, #15
 800096c:	607b      	str	r3, [r7, #4]
|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800096e:	2303      	movs	r3, #3
 8000970:	60bb      	str	r3, [r7, #8]
RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000972:	2300      	movs	r3, #0
 8000974:	60fb      	str	r3, [r7, #12]
RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000976:	2300      	movs	r3, #0
 8000978:	613b      	str	r3, [r7, #16]
RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800097a:	2300      	movs	r3, #0
 800097c:	617b      	str	r3, [r7, #20]
if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800097e:	1d3b      	adds	r3, r7, #4
 8000980:	2104      	movs	r1, #4
 8000982:	4618      	mov	r0, r3
 8000984:	f002 ffc4 	bl	8003910 <HAL_RCC_ClockConfig>
 8000988:	4603      	mov	r3, r0
 800098a:	2b00      	cmp	r3, #0
 800098c:	d001      	beq.n	8000992 <SystemClock_Config+0x8e>
{
Error_Handler();
 800098e:	f000 fa97 	bl	8000ec0 <Error_Handler>
}
}
 8000992:	bf00      	nop
 8000994:	3750      	adds	r7, #80	; 0x50
 8000996:	46bd      	mov	sp, r7
 8000998:	bd80      	pop	{r7, pc}
	...

0800099c <MX_ADC1_Init>:
* @brief ADC1 Initialization Function
* @param None
* @retval None
*/
static void MX_ADC1_Init(void)
{
 800099c:	b580      	push	{r7, lr}
 800099e:	b08c      	sub	sp, #48	; 0x30
 80009a0:	af00      	add	r7, sp, #0
/* USER CODE BEGIN ADC1_Init 0 */
/* USER CODE END ADC1_Init 0 */
ADC_MultiModeTypeDef multimode = {0};
 80009a2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80009a6:	2200      	movs	r2, #0
 80009a8:	601a      	str	r2, [r3, #0]
 80009aa:	605a      	str	r2, [r3, #4]
 80009ac:	609a      	str	r2, [r3, #8]
ADC_ChannelConfTypeDef sConfig = {0};
 80009ae:	1d3b      	adds	r3, r7, #4
 80009b0:	2220      	movs	r2, #32
 80009b2:	2100      	movs	r1, #0
 80009b4:	4618      	mov	r0, r3
 80009b6:	f006 fa69 	bl	8006e8c <memset>
/* USER CODE BEGIN ADC1_Init 1 */
/* USER CODE END ADC1_Init 1 */
/** Common config
*/
hadc1.Instance = ADC1;
 80009ba:	4b32      	ldr	r3, [pc, #200]	; (8000a84 <MX_ADC1_Init+0xe8>)
 80009bc:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80009c0:	601a      	str	r2, [r3, #0]
hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80009c2:	4b30      	ldr	r3, [pc, #192]	; (8000a84 <MX_ADC1_Init+0xe8>)
 80009c4:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80009c8:	605a      	str	r2, [r3, #4]
hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80009ca:	4b2e      	ldr	r3, [pc, #184]	; (8000a84 <MX_ADC1_Init+0xe8>)
 80009cc:	2200      	movs	r2, #0
 80009ce:	609a      	str	r2, [r3, #8]
hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80009d0:	4b2c      	ldr	r3, [pc, #176]	; (8000a84 <MX_ADC1_Init+0xe8>)
 80009d2:	2200      	movs	r2, #0
 80009d4:	60da      	str	r2, [r3, #12]
hadc1.Init.GainCompensation = 0;
 80009d6:	4b2b      	ldr	r3, [pc, #172]	; (8000a84 <MX_ADC1_Init+0xe8>)
 80009d8:	2200      	movs	r2, #0
 80009da:	611a      	str	r2, [r3, #16]
hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80009dc:	4b29      	ldr	r3, [pc, #164]	; (8000a84 <MX_ADC1_Init+0xe8>)
 80009de:	2200      	movs	r2, #0
 80009e0:	615a      	str	r2, [r3, #20]
hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80009e2:	4b28      	ldr	r3, [pc, #160]	; (8000a84 <MX_ADC1_Init+0xe8>)
 80009e4:	2204      	movs	r2, #4
 80009e6:	619a      	str	r2, [r3, #24]
hadc1.Init.LowPowerAutoWait = DISABLE;
 80009e8:	4b26      	ldr	r3, [pc, #152]	; (8000a84 <MX_ADC1_Init+0xe8>)
 80009ea:	2200      	movs	r2, #0
 80009ec:	771a      	strb	r2, [r3, #28]
hadc1.Init.ContinuousConvMode = DISABLE;
 80009ee:	4b25      	ldr	r3, [pc, #148]	; (8000a84 <MX_ADC1_Init+0xe8>)
 80009f0:	2200      	movs	r2, #0
 80009f2:	775a      	strb	r2, [r3, #29]
hadc1.Init.NbrOfConversion = 1;
 80009f4:	4b23      	ldr	r3, [pc, #140]	; (8000a84 <MX_ADC1_Init+0xe8>)
 80009f6:	2201      	movs	r2, #1
 80009f8:	621a      	str	r2, [r3, #32]
hadc1.Init.DiscontinuousConvMode = DISABLE;
 80009fa:	4b22      	ldr	r3, [pc, #136]	; (8000a84 <MX_ADC1_Init+0xe8>)
 80009fc:	2200      	movs	r2, #0
 80009fe:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000a02:	4b20      	ldr	r3, [pc, #128]	; (8000a84 <MX_ADC1_Init+0xe8>)
 8000a04:	2200      	movs	r2, #0
 8000a06:	62da      	str	r2, [r3, #44]	; 0x2c
hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000a08:	4b1e      	ldr	r3, [pc, #120]	; (8000a84 <MX_ADC1_Init+0xe8>)
 8000a0a:	2200      	movs	r2, #0
 8000a0c:	631a      	str	r2, [r3, #48]	; 0x30
hadc1.Init.DMAContinuousRequests = DISABLE;
 8000a0e:	4b1d      	ldr	r3, [pc, #116]	; (8000a84 <MX_ADC1_Init+0xe8>)
 8000a10:	2200      	movs	r2, #0
 8000a12:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000a16:	4b1b      	ldr	r3, [pc, #108]	; (8000a84 <MX_ADC1_Init+0xe8>)
 8000a18:	2200      	movs	r2, #0
 8000a1a:	63da      	str	r2, [r3, #60]	; 0x3c
hadc1.Init.OversamplingMode = DISABLE;
 8000a1c:	4b19      	ldr	r3, [pc, #100]	; (8000a84 <MX_ADC1_Init+0xe8>)
 8000a1e:	2200      	movs	r2, #0
 8000a20:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000a24:	4817      	ldr	r0, [pc, #92]	; (8000a84 <MX_ADC1_Init+0xe8>)
 8000a26:	f000 ff91 	bl	800194c <HAL_ADC_Init>
 8000a2a:	4603      	mov	r3, r0
 8000a2c:	2b00      	cmp	r3, #0
 8000a2e:	d001      	beq.n	8000a34 <MX_ADC1_Init+0x98>
{
Error_Handler();
 8000a30:	f000 fa46 	bl	8000ec0 <Error_Handler>
}
/** Configure the ADC multi-mode
*/
multimode.Mode = ADC_MODE_INDEPENDENT;
 8000a34:	2300      	movs	r3, #0
 8000a36:	627b      	str	r3, [r7, #36]	; 0x24
if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000a38:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a3c:	4619      	mov	r1, r3
 8000a3e:	4811      	ldr	r0, [pc, #68]	; (8000a84 <MX_ADC1_Init+0xe8>)
 8000a40:	f002 f878 	bl	8002b34 <HAL_ADCEx_MultiModeConfigChannel>
 8000a44:	4603      	mov	r3, r0
 8000a46:	2b00      	cmp	r3, #0
 8000a48:	d001      	beq.n	8000a4e <MX_ADC1_Init+0xb2>
{
Error_Handler();
 8000a4a:	f000 fa39 	bl	8000ec0 <Error_Handler>
}
/** Configure Regular Channel
*/
sConfig.Channel = ADC_CHANNEL_8;
 8000a4e:	4b0e      	ldr	r3, [pc, #56]	; (8000a88 <MX_ADC1_Init+0xec>)
 8000a50:	607b      	str	r3, [r7, #4]
sConfig.Rank = ADC_REGULAR_RANK_1;
 8000a52:	2306      	movs	r3, #6
 8000a54:	60bb      	str	r3, [r7, #8]
sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8000a56:	2300      	movs	r3, #0
 8000a58:	60fb      	str	r3, [r7, #12]
sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000a5a:	237f      	movs	r3, #127	; 0x7f
 8000a5c:	613b      	str	r3, [r7, #16]
sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000a5e:	2304      	movs	r3, #4
 8000a60:	617b      	str	r3, [r7, #20]
sConfig.Offset = 0;
 8000a62:	2300      	movs	r3, #0
 8000a64:	61bb      	str	r3, [r7, #24]
if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000a66:	1d3b      	adds	r3, r7, #4
 8000a68:	4619      	mov	r1, r3
 8000a6a:	4806      	ldr	r0, [pc, #24]	; (8000a84 <MX_ADC1_Init+0xe8>)
 8000a6c:	f001 face 	bl	800200c <HAL_ADC_ConfigChannel>
 8000a70:	4603      	mov	r3, r0
 8000a72:	2b00      	cmp	r3, #0
 8000a74:	d001      	beq.n	8000a7a <MX_ADC1_Init+0xde>
{
Error_Handler();
 8000a76:	f000 fa23 	bl	8000ec0 <Error_Handler>
}
/* USER CODE BEGIN ADC1_Init 2 */
/* USER CODE END ADC1_Init 2 */
}
 8000a7a:	bf00      	nop
 8000a7c:	3730      	adds	r7, #48	; 0x30
 8000a7e:	46bd      	mov	sp, r7
 8000a80:	bd80      	pop	{r7, pc}
 8000a82:	bf00      	nop
 8000a84:	20000028 	.word	0x20000028
 8000a88:	21800100 	.word	0x21800100

08000a8c <MX_LPUART1_UART_Init>:
* @brief LPUART1 Initialization Function
* @param None
* @retval None
*/
static void MX_LPUART1_UART_Init(void)
{
 8000a8c:	b580      	push	{r7, lr}
 8000a8e:	af00      	add	r7, sp, #0
/* USER CODE BEGIN LPUART1_Init 0 */
/* USER CODE END LPUART1_Init 0 */
/* USER CODE BEGIN LPUART1_Init 1 */
/* USER CODE END LPUART1_Init 1 */
hlpuart1.Instance = LPUART1;
 8000a90:	4b21      	ldr	r3, [pc, #132]	; (8000b18 <MX_LPUART1_UART_Init+0x8c>)
 8000a92:	4a22      	ldr	r2, [pc, #136]	; (8000b1c <MX_LPUART1_UART_Init+0x90>)
 8000a94:	601a      	str	r2, [r3, #0]
hlpuart1.Init.BaudRate = 115200;
 8000a96:	4b20      	ldr	r3, [pc, #128]	; (8000b18 <MX_LPUART1_UART_Init+0x8c>)
 8000a98:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000a9c:	605a      	str	r2, [r3, #4]
hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000a9e:	4b1e      	ldr	r3, [pc, #120]	; (8000b18 <MX_LPUART1_UART_Init+0x8c>)
 8000aa0:	2200      	movs	r2, #0
 8000aa2:	609a      	str	r2, [r3, #8]
hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8000aa4:	4b1c      	ldr	r3, [pc, #112]	; (8000b18 <MX_LPUART1_UART_Init+0x8c>)
 8000aa6:	2200      	movs	r2, #0
 8000aa8:	60da      	str	r2, [r3, #12]
hlpuart1.Init.Parity = UART_PARITY_NONE;
 8000aaa:	4b1b      	ldr	r3, [pc, #108]	; (8000b18 <MX_LPUART1_UART_Init+0x8c>)
 8000aac:	2200      	movs	r2, #0
 8000aae:	611a      	str	r2, [r3, #16]
hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8000ab0:	4b19      	ldr	r3, [pc, #100]	; (8000b18 <MX_LPUART1_UART_Init+0x8c>)
 8000ab2:	220c      	movs	r2, #12
 8000ab4:	615a      	str	r2, [r3, #20]
hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000ab6:	4b18      	ldr	r3, [pc, #96]	; (8000b18 <MX_LPUART1_UART_Init+0x8c>)
 8000ab8:	2200      	movs	r2, #0
 8000aba:	619a      	str	r2, [r3, #24]
hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000abc:	4b16      	ldr	r3, [pc, #88]	; (8000b18 <MX_LPUART1_UART_Init+0x8c>)
 8000abe:	2200      	movs	r2, #0
 8000ac0:	621a      	str	r2, [r3, #32]
hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000ac2:	4b15      	ldr	r3, [pc, #84]	; (8000b18 <MX_LPUART1_UART_Init+0x8c>)
 8000ac4:	2200      	movs	r2, #0
 8000ac6:	625a      	str	r2, [r3, #36]	; 0x24
hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000ac8:	4b13      	ldr	r3, [pc, #76]	; (8000b18 <MX_LPUART1_UART_Init+0x8c>)
 8000aca:	2200      	movs	r2, #0
 8000acc:	629a      	str	r2, [r3, #40]	; 0x28
if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8000ace:	4812      	ldr	r0, [pc, #72]	; (8000b18 <MX_LPUART1_UART_Init+0x8c>)
 8000ad0:	f005 fc08 	bl	80062e4 <HAL_UART_Init>
 8000ad4:	4603      	mov	r3, r0
 8000ad6:	2b00      	cmp	r3, #0
 8000ad8:	d001      	beq.n	8000ade <MX_LPUART1_UART_Init+0x52>
{
Error_Handler();
 8000ada:	f000 f9f1 	bl	8000ec0 <Error_Handler>
}
if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000ade:	2100      	movs	r1, #0
 8000ae0:	480d      	ldr	r0, [pc, #52]	; (8000b18 <MX_LPUART1_UART_Init+0x8c>)
 8000ae2:	f006 f909 	bl	8006cf8 <HAL_UARTEx_SetTxFifoThreshold>
 8000ae6:	4603      	mov	r3, r0
 8000ae8:	2b00      	cmp	r3, #0
 8000aea:	d001      	beq.n	8000af0 <MX_LPUART1_UART_Init+0x64>
{
Error_Handler();
 8000aec:	f000 f9e8 	bl	8000ec0 <Error_Handler>
}
if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000af0:	2100      	movs	r1, #0
 8000af2:	4809      	ldr	r0, [pc, #36]	; (8000b18 <MX_LPUART1_UART_Init+0x8c>)
 8000af4:	f006 f93e 	bl	8006d74 <HAL_UARTEx_SetRxFifoThreshold>
 8000af8:	4603      	mov	r3, r0
 8000afa:	2b00      	cmp	r3, #0
 8000afc:	d001      	beq.n	8000b02 <MX_LPUART1_UART_Init+0x76>
{
Error_Handler();
 8000afe:	f000 f9df 	bl	8000ec0 <Error_Handler>
}
if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 8000b02:	4805      	ldr	r0, [pc, #20]	; (8000b18 <MX_LPUART1_UART_Init+0x8c>)
 8000b04:	f006 f8bf 	bl	8006c86 <HAL_UARTEx_DisableFifoMode>
 8000b08:	4603      	mov	r3, r0
 8000b0a:	2b00      	cmp	r3, #0
 8000b0c:	d001      	beq.n	8000b12 <MX_LPUART1_UART_Init+0x86>
{
Error_Handler();
 8000b0e:	f000 f9d7 	bl	8000ec0 <Error_Handler>
}
/* USER CODE BEGIN LPUART1_Init 2 */
/* USER CODE END LPUART1_Init 2 */
}
 8000b12:	bf00      	nop
 8000b14:	bd80      	pop	{r7, pc}
 8000b16:	bf00      	nop
 8000b18:	20000094 	.word	0x20000094
 8000b1c:	40008000 	.word	0x40008000

08000b20 <MX_USART2_UART_Init>:
* @brief USART2 Initialization Function
* @param None
* @retval None
*/
static void MX_USART2_UART_Init(void)
{
 8000b20:	b580      	push	{r7, lr}
 8000b22:	af00      	add	r7, sp, #0
/* USER CODE BEGIN USART2_Init 0 */
/* USER CODE END USART2_Init 0 */
/* USER CODE BEGIN USART2_Init 1 */
/* USER CODE END USART2_Init 1 */
huart2.Instance = USART2;
 8000b24:	4b22      	ldr	r3, [pc, #136]	; (8000bb0 <MX_USART2_UART_Init+0x90>)
 8000b26:	4a23      	ldr	r2, [pc, #140]	; (8000bb4 <MX_USART2_UART_Init+0x94>)
 8000b28:	601a      	str	r2, [r3, #0]
huart2.Init.BaudRate = 115200;
 8000b2a:	4b21      	ldr	r3, [pc, #132]	; (8000bb0 <MX_USART2_UART_Init+0x90>)
 8000b2c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000b30:	605a      	str	r2, [r3, #4]
huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000b32:	4b1f      	ldr	r3, [pc, #124]	; (8000bb0 <MX_USART2_UART_Init+0x90>)
 8000b34:	2200      	movs	r2, #0
 8000b36:	609a      	str	r2, [r3, #8]
huart2.Init.StopBits = UART_STOPBITS_1;
 8000b38:	4b1d      	ldr	r3, [pc, #116]	; (8000bb0 <MX_USART2_UART_Init+0x90>)
 8000b3a:	2200      	movs	r2, #0
 8000b3c:	60da      	str	r2, [r3, #12]
huart2.Init.Parity = UART_PARITY_NONE;
 8000b3e:	4b1c      	ldr	r3, [pc, #112]	; (8000bb0 <MX_USART2_UART_Init+0x90>)
 8000b40:	2200      	movs	r2, #0
 8000b42:	611a      	str	r2, [r3, #16]
huart2.Init.Mode = UART_MODE_TX_RX;
 8000b44:	4b1a      	ldr	r3, [pc, #104]	; (8000bb0 <MX_USART2_UART_Init+0x90>)
 8000b46:	220c      	movs	r2, #12
 8000b48:	615a      	str	r2, [r3, #20]
huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b4a:	4b19      	ldr	r3, [pc, #100]	; (8000bb0 <MX_USART2_UART_Init+0x90>)
 8000b4c:	2200      	movs	r2, #0
 8000b4e:	619a      	str	r2, [r3, #24]
huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b50:	4b17      	ldr	r3, [pc, #92]	; (8000bb0 <MX_USART2_UART_Init+0x90>)
 8000b52:	2200      	movs	r2, #0
 8000b54:	61da      	str	r2, [r3, #28]
huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000b56:	4b16      	ldr	r3, [pc, #88]	; (8000bb0 <MX_USART2_UART_Init+0x90>)
 8000b58:	2200      	movs	r2, #0
 8000b5a:	621a      	str	r2, [r3, #32]
huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000b5c:	4b14      	ldr	r3, [pc, #80]	; (8000bb0 <MX_USART2_UART_Init+0x90>)
 8000b5e:	2200      	movs	r2, #0
 8000b60:	625a      	str	r2, [r3, #36]	; 0x24
huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000b62:	4b13      	ldr	r3, [pc, #76]	; (8000bb0 <MX_USART2_UART_Init+0x90>)
 8000b64:	2200      	movs	r2, #0
 8000b66:	629a      	str	r2, [r3, #40]	; 0x28
if (HAL_UART_Init(&huart2) != HAL_OK)
 8000b68:	4811      	ldr	r0, [pc, #68]	; (8000bb0 <MX_USART2_UART_Init+0x90>)
 8000b6a:	f005 fbbb 	bl	80062e4 <HAL_UART_Init>
 8000b6e:	4603      	mov	r3, r0
 8000b70:	2b00      	cmp	r3, #0
 8000b72:	d001      	beq.n	8000b78 <MX_USART2_UART_Init+0x58>
{
Error_Handler();
 8000b74:	f000 f9a4 	bl	8000ec0 <Error_Handler>
}
if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000b78:	2100      	movs	r1, #0
 8000b7a:	480d      	ldr	r0, [pc, #52]	; (8000bb0 <MX_USART2_UART_Init+0x90>)
 8000b7c:	f006 f8bc 	bl	8006cf8 <HAL_UARTEx_SetTxFifoThreshold>
 8000b80:	4603      	mov	r3, r0
 8000b82:	2b00      	cmp	r3, #0
 8000b84:	d001      	beq.n	8000b8a <MX_USART2_UART_Init+0x6a>
{
Error_Handler();
 8000b86:	f000 f99b 	bl	8000ec0 <Error_Handler>
}
if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000b8a:	2100      	movs	r1, #0
 8000b8c:	4808      	ldr	r0, [pc, #32]	; (8000bb0 <MX_USART2_UART_Init+0x90>)
 8000b8e:	f006 f8f1 	bl	8006d74 <HAL_UARTEx_SetRxFifoThreshold>
 8000b92:	4603      	mov	r3, r0
 8000b94:	2b00      	cmp	r3, #0
 8000b96:	d001      	beq.n	8000b9c <MX_USART2_UART_Init+0x7c>
{
Error_Handler();
 8000b98:	f000 f992 	bl	8000ec0 <Error_Handler>
}
if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8000b9c:	4804      	ldr	r0, [pc, #16]	; (8000bb0 <MX_USART2_UART_Init+0x90>)
 8000b9e:	f006 f872 	bl	8006c86 <HAL_UARTEx_DisableFifoMode>
 8000ba2:	4603      	mov	r3, r0
 8000ba4:	2b00      	cmp	r3, #0
 8000ba6:	d001      	beq.n	8000bac <MX_USART2_UART_Init+0x8c>
{
Error_Handler();
 8000ba8:	f000 f98a 	bl	8000ec0 <Error_Handler>
}
/* USER CODE BEGIN USART2_Init 2 */
/* USER CODE END USART2_Init 2 */
}
 8000bac:	bf00      	nop
 8000bae:	bd80      	pop	{r7, pc}
 8000bb0:	20000124 	.word	0x20000124
 8000bb4:	40004400 	.word	0x40004400

08000bb8 <MX_SPI3_Init>:
* @brief SPI3 Initialization Function
* @param None
* @retval None
*/
static void MX_SPI3_Init(void)
{
 8000bb8:	b580      	push	{r7, lr}
 8000bba:	af00      	add	r7, sp, #0
/* USER CODE BEGIN SPI3_Init 0 */
/* USER CODE END SPI3_Init 0 */
/* USER CODE BEGIN SPI3_Init 1 */
/* USER CODE END SPI3_Init 1 */
/* SPI3 parameter configuration*/
hspi3.Instance = SPI3;
 8000bbc:	4b1b      	ldr	r3, [pc, #108]	; (8000c2c <MX_SPI3_Init+0x74>)
 8000bbe:	4a1c      	ldr	r2, [pc, #112]	; (8000c30 <MX_SPI3_Init+0x78>)
 8000bc0:	601a      	str	r2, [r3, #0]
hspi3.Init.Mode = SPI_MODE_MASTER;
 8000bc2:	4b1a      	ldr	r3, [pc, #104]	; (8000c2c <MX_SPI3_Init+0x74>)
 8000bc4:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000bc8:	605a      	str	r2, [r3, #4]
hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8000bca:	4b18      	ldr	r3, [pc, #96]	; (8000c2c <MX_SPI3_Init+0x74>)
 8000bcc:	2200      	movs	r2, #0
 8000bce:	609a      	str	r2, [r3, #8]
hspi3.Init.DataSize = SPI_DATASIZE_4BIT;
 8000bd0:	4b16      	ldr	r3, [pc, #88]	; (8000c2c <MX_SPI3_Init+0x74>)
 8000bd2:	f44f 7240 	mov.w	r2, #768	; 0x300
 8000bd6:	60da      	str	r2, [r3, #12]
hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000bd8:	4b14      	ldr	r3, [pc, #80]	; (8000c2c <MX_SPI3_Init+0x74>)
 8000bda:	2200      	movs	r2, #0
 8000bdc:	611a      	str	r2, [r3, #16]
hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000bde:	4b13      	ldr	r3, [pc, #76]	; (8000c2c <MX_SPI3_Init+0x74>)
 8000be0:	2200      	movs	r2, #0
 8000be2:	615a      	str	r2, [r3, #20]
hspi3.Init.NSS = SPI_NSS_SOFT;
 8000be4:	4b11      	ldr	r3, [pc, #68]	; (8000c2c <MX_SPI3_Init+0x74>)
 8000be6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000bea:	619a      	str	r2, [r3, #24]
hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8000bec:	4b0f      	ldr	r3, [pc, #60]	; (8000c2c <MX_SPI3_Init+0x74>)
 8000bee:	2220      	movs	r2, #32
 8000bf0:	61da      	str	r2, [r3, #28]
hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000bf2:	4b0e      	ldr	r3, [pc, #56]	; (8000c2c <MX_SPI3_Init+0x74>)
 8000bf4:	2200      	movs	r2, #0
 8000bf6:	621a      	str	r2, [r3, #32]
hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8000bf8:	4b0c      	ldr	r3, [pc, #48]	; (8000c2c <MX_SPI3_Init+0x74>)
 8000bfa:	2200      	movs	r2, #0
 8000bfc:	625a      	str	r2, [r3, #36]	; 0x24
hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000bfe:	4b0b      	ldr	r3, [pc, #44]	; (8000c2c <MX_SPI3_Init+0x74>)
 8000c00:	2200      	movs	r2, #0
 8000c02:	629a      	str	r2, [r3, #40]	; 0x28
hspi3.Init.CRCPolynomial = 7;
 8000c04:	4b09      	ldr	r3, [pc, #36]	; (8000c2c <MX_SPI3_Init+0x74>)
 8000c06:	2207      	movs	r2, #7
 8000c08:	62da      	str	r2, [r3, #44]	; 0x2c
hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000c0a:	4b08      	ldr	r3, [pc, #32]	; (8000c2c <MX_SPI3_Init+0x74>)
 8000c0c:	2200      	movs	r2, #0
 8000c0e:	631a      	str	r2, [r3, #48]	; 0x30
hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000c10:	4b06      	ldr	r3, [pc, #24]	; (8000c2c <MX_SPI3_Init+0x74>)
 8000c12:	2208      	movs	r2, #8
 8000c14:	635a      	str	r2, [r3, #52]	; 0x34
if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8000c16:	4805      	ldr	r0, [pc, #20]	; (8000c2c <MX_SPI3_Init+0x74>)
 8000c18:	f003 fa86 	bl	8004128 <HAL_SPI_Init>
 8000c1c:	4603      	mov	r3, r0
 8000c1e:	2b00      	cmp	r3, #0
 8000c20:	d001      	beq.n	8000c26 <MX_SPI3_Init+0x6e>
{
Error_Handler();
 8000c22:	f000 f94d 	bl	8000ec0 <Error_Handler>
}
/* USER CODE BEGIN SPI3_Init 2 */
/* USER CODE END SPI3_Init 2 */
}
 8000c26:	bf00      	nop
 8000c28:	bd80      	pop	{r7, pc}
 8000c2a:	bf00      	nop
 8000c2c:	200001b4 	.word	0x200001b4
 8000c30:	40003c00 	.word	0x40003c00

08000c34 <MX_TIM1_Init>:
* @brief TIM1 Initialization Function
* @param None
* @retval None
*/
static void MX_TIM1_Init(void)
{
 8000c34:	b580      	push	{r7, lr}
 8000c36:	b09c      	sub	sp, #112	; 0x70
 8000c38:	af00      	add	r7, sp, #0
/* USER CODE BEGIN TIM1_Init 0 */
/* USER CODE END TIM1_Init 0 */
TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000c3a:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8000c3e:	2200      	movs	r2, #0
 8000c40:	601a      	str	r2, [r3, #0]
 8000c42:	605a      	str	r2, [r3, #4]
 8000c44:	609a      	str	r2, [r3, #8]
 8000c46:	60da      	str	r2, [r3, #12]
TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000c48:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000c4c:	2200      	movs	r2, #0
 8000c4e:	601a      	str	r2, [r3, #0]
 8000c50:	605a      	str	r2, [r3, #4]
 8000c52:	609a      	str	r2, [r3, #8]
TIM_OC_InitTypeDef sConfigOC = {0};
 8000c54:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000c58:	2200      	movs	r2, #0
 8000c5a:	601a      	str	r2, [r3, #0]
 8000c5c:	605a      	str	r2, [r3, #4]
 8000c5e:	609a      	str	r2, [r3, #8]
 8000c60:	60da      	str	r2, [r3, #12]
 8000c62:	611a      	str	r2, [r3, #16]
 8000c64:	615a      	str	r2, [r3, #20]
 8000c66:	619a      	str	r2, [r3, #24]
TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000c68:	1d3b      	adds	r3, r7, #4
 8000c6a:	2234      	movs	r2, #52	; 0x34
 8000c6c:	2100      	movs	r1, #0
 8000c6e:	4618      	mov	r0, r3
 8000c70:	f006 f90c 	bl	8006e8c <memset>
/* USER CODE BEGIN TIM1_Init 1 */
/* USER CODE END TIM1_Init 1 */
htim1.Instance = TIM1;
 8000c74:	4b51      	ldr	r3, [pc, #324]	; (8000dbc <MX_TIM1_Init+0x188>)
 8000c76:	4a52      	ldr	r2, [pc, #328]	; (8000dc0 <MX_TIM1_Init+0x18c>)
 8000c78:	601a      	str	r2, [r3, #0]
htim1.Init.Prescaler = 16;
 8000c7a:	4b50      	ldr	r3, [pc, #320]	; (8000dbc <MX_TIM1_Init+0x188>)
 8000c7c:	2210      	movs	r2, #16
 8000c7e:	605a      	str	r2, [r3, #4]
htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c80:	4b4e      	ldr	r3, [pc, #312]	; (8000dbc <MX_TIM1_Init+0x188>)
 8000c82:	2200      	movs	r2, #0
 8000c84:	609a      	str	r2, [r3, #8]
htim1.Init.Period = 100;
 8000c86:	4b4d      	ldr	r3, [pc, #308]	; (8000dbc <MX_TIM1_Init+0x188>)
 8000c88:	2264      	movs	r2, #100	; 0x64
 8000c8a:	60da      	str	r2, [r3, #12]
htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c8c:	4b4b      	ldr	r3, [pc, #300]	; (8000dbc <MX_TIM1_Init+0x188>)
 8000c8e:	2200      	movs	r2, #0
 8000c90:	611a      	str	r2, [r3, #16]
htim1.Init.RepetitionCounter = 0;
 8000c92:	4b4a      	ldr	r3, [pc, #296]	; (8000dbc <MX_TIM1_Init+0x188>)
 8000c94:	2200      	movs	r2, #0
 8000c96:	615a      	str	r2, [r3, #20]
htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c98:	4b48      	ldr	r3, [pc, #288]	; (8000dbc <MX_TIM1_Init+0x188>)
 8000c9a:	2200      	movs	r2, #0
 8000c9c:	619a      	str	r2, [r3, #24]
if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000c9e:	4847      	ldr	r0, [pc, #284]	; (8000dbc <MX_TIM1_Init+0x188>)
 8000ca0:	f004 f95a 	bl	8004f58 <HAL_TIM_Base_Init>
 8000ca4:	4603      	mov	r3, r0
 8000ca6:	2b00      	cmp	r3, #0
 8000ca8:	d001      	beq.n	8000cae <MX_TIM1_Init+0x7a>
{
Error_Handler();
 8000caa:	f000 f909 	bl	8000ec0 <Error_Handler>
}
sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000cae:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000cb2:	663b      	str	r3, [r7, #96]	; 0x60
if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000cb4:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8000cb8:	4619      	mov	r1, r3
 8000cba:	4840      	ldr	r0, [pc, #256]	; (8000dbc <MX_TIM1_Init+0x188>)
 8000cbc:	f004 fcae 	bl	800561c <HAL_TIM_ConfigClockSource>
 8000cc0:	4603      	mov	r3, r0
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	d001      	beq.n	8000cca <MX_TIM1_Init+0x96>
{
Error_Handler();
 8000cc6:	f000 f8fb 	bl	8000ec0 <Error_Handler>
}
if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000cca:	483c      	ldr	r0, [pc, #240]	; (8000dbc <MX_TIM1_Init+0x188>)
 8000ccc:	f004 f99b 	bl	8005006 <HAL_TIM_PWM_Init>
 8000cd0:	4603      	mov	r3, r0
 8000cd2:	2b00      	cmp	r3, #0
 8000cd4:	d001      	beq.n	8000cda <MX_TIM1_Init+0xa6>
{
Error_Handler();
 8000cd6:	f000 f8f3 	bl	8000ec0 <Error_Handler>
}
sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000cda:	2300      	movs	r3, #0
 8000cdc:	657b      	str	r3, [r7, #84]	; 0x54
sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000cde:	2300      	movs	r3, #0
 8000ce0:	65bb      	str	r3, [r7, #88]	; 0x58
sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000ce2:	2300      	movs	r3, #0
 8000ce4:	65fb      	str	r3, [r7, #92]	; 0x5c
if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000ce6:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000cea:	4619      	mov	r1, r3
 8000cec:	4833      	ldr	r0, [pc, #204]	; (8000dbc <MX_TIM1_Init+0x188>)
 8000cee:	f005 f9d7 	bl	80060a0 <HAL_TIMEx_MasterConfigSynchronization>
 8000cf2:	4603      	mov	r3, r0
 8000cf4:	2b00      	cmp	r3, #0
 8000cf6:	d001      	beq.n	8000cfc <MX_TIM1_Init+0xc8>
{
Error_Handler();
 8000cf8:	f000 f8e2 	bl	8000ec0 <Error_Handler>
}
sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000cfc:	2360      	movs	r3, #96	; 0x60
 8000cfe:	63bb      	str	r3, [r7, #56]	; 0x38
sConfigOC.Pulse = 50;
 8000d00:	2332      	movs	r3, #50	; 0x32
 8000d02:	63fb      	str	r3, [r7, #60]	; 0x3c
sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000d04:	2300      	movs	r3, #0
 8000d06:	643b      	str	r3, [r7, #64]	; 0x40
sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000d08:	2300      	movs	r3, #0
 8000d0a:	647b      	str	r3, [r7, #68]	; 0x44
sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000d0c:	2300      	movs	r3, #0
 8000d0e:	64bb      	str	r3, [r7, #72]	; 0x48
sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000d10:	2300      	movs	r3, #0
 8000d12:	64fb      	str	r3, [r7, #76]	; 0x4c
sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000d14:	2300      	movs	r3, #0
 8000d16:	653b      	str	r3, [r7, #80]	; 0x50
if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000d18:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000d1c:	2200      	movs	r2, #0
 8000d1e:	4619      	mov	r1, r3
 8000d20:	4826      	ldr	r0, [pc, #152]	; (8000dbc <MX_TIM1_Init+0x188>)
 8000d22:	f004 fb67 	bl	80053f4 <HAL_TIM_PWM_ConfigChannel>
 8000d26:	4603      	mov	r3, r0
 8000d28:	2b00      	cmp	r3, #0
 8000d2a:	d001      	beq.n	8000d30 <MX_TIM1_Init+0xfc>
{
Error_Handler();
 8000d2c:	f000 f8c8 	bl	8000ec0 <Error_Handler>
}
if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000d30:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000d34:	2204      	movs	r2, #4
 8000d36:	4619      	mov	r1, r3
 8000d38:	4820      	ldr	r0, [pc, #128]	; (8000dbc <MX_TIM1_Init+0x188>)
 8000d3a:	f004 fb5b 	bl	80053f4 <HAL_TIM_PWM_ConfigChannel>
 8000d3e:	4603      	mov	r3, r0
 8000d40:	2b00      	cmp	r3, #0
 8000d42:	d001      	beq.n	8000d48 <MX_TIM1_Init+0x114>
{
Error_Handler();
 8000d44:	f000 f8bc 	bl	8000ec0 <Error_Handler>
}
if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000d48:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000d4c:	2208      	movs	r2, #8
 8000d4e:	4619      	mov	r1, r3
 8000d50:	481a      	ldr	r0, [pc, #104]	; (8000dbc <MX_TIM1_Init+0x188>)
 8000d52:	f004 fb4f 	bl	80053f4 <HAL_TIM_PWM_ConfigChannel>
 8000d56:	4603      	mov	r3, r0
 8000d58:	2b00      	cmp	r3, #0
 8000d5a:	d001      	beq.n	8000d60 <MX_TIM1_Init+0x12c>
{
Error_Handler();
 8000d5c:	f000 f8b0 	bl	8000ec0 <Error_Handler>
}
sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000d60:	2300      	movs	r3, #0
 8000d62:	607b      	str	r3, [r7, #4]
sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000d64:	2300      	movs	r3, #0
 8000d66:	60bb      	str	r3, [r7, #8]
sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000d68:	2300      	movs	r3, #0
 8000d6a:	60fb      	str	r3, [r7, #12]
sBreakDeadTimeConfig.DeadTime = 0;
 8000d6c:	2300      	movs	r3, #0
 8000d6e:	613b      	str	r3, [r7, #16]
sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000d70:	2300      	movs	r3, #0
 8000d72:	617b      	str	r3, [r7, #20]
sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000d74:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000d78:	61bb      	str	r3, [r7, #24]
sBreakDeadTimeConfig.BreakFilter = 0;
 8000d7a:	2300      	movs	r3, #0
 8000d7c:	61fb      	str	r3, [r7, #28]
sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8000d7e:	2300      	movs	r3, #0
 8000d80:	623b      	str	r3, [r7, #32]
sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8000d82:	2300      	movs	r3, #0
 8000d84:	627b      	str	r3, [r7, #36]	; 0x24
sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8000d86:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000d8a:	62bb      	str	r3, [r7, #40]	; 0x28
sBreakDeadTimeConfig.Break2Filter = 0;
 8000d8c:	2300      	movs	r3, #0
 8000d8e:	62fb      	str	r3, [r7, #44]	; 0x2c
sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8000d90:	2300      	movs	r3, #0
 8000d92:	633b      	str	r3, [r7, #48]	; 0x30
sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000d94:	2300      	movs	r3, #0
 8000d96:	637b      	str	r3, [r7, #52]	; 0x34
if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000d98:	1d3b      	adds	r3, r7, #4
 8000d9a:	4619      	mov	r1, r3
 8000d9c:	4807      	ldr	r0, [pc, #28]	; (8000dbc <MX_TIM1_Init+0x188>)
 8000d9e:	f005 fa01 	bl	80061a4 <HAL_TIMEx_ConfigBreakDeadTime>
 8000da2:	4603      	mov	r3, r0
 8000da4:	2b00      	cmp	r3, #0
 8000da6:	d001      	beq.n	8000dac <MX_TIM1_Init+0x178>
{
Error_Handler();
 8000da8:	f000 f88a 	bl	8000ec0 <Error_Handler>
}
/* USER CODE BEGIN TIM1_Init 2 */
/* USER CODE END TIM1_Init 2 */
HAL_TIM_MspPostInit(&htim1);
 8000dac:	4803      	ldr	r0, [pc, #12]	; (8000dbc <MX_TIM1_Init+0x188>)
 8000dae:	f000 fa1f 	bl	80011f0 <HAL_TIM_MspPostInit>
}
 8000db2:	bf00      	nop
 8000db4:	3770      	adds	r7, #112	; 0x70
 8000db6:	46bd      	mov	sp, r7
 8000db8:	bd80      	pop	{r7, pc}
 8000dba:	bf00      	nop
 8000dbc:	20000218 	.word	0x20000218
 8000dc0:	40012c00 	.word	0x40012c00

08000dc4 <MX_GPIO_Init>:
* @brief GPIO Initialization Function
* @param None
* @retval None
*/
static void MX_GPIO_Init(void)
{
 8000dc4:	b580      	push	{r7, lr}
 8000dc6:	b08a      	sub	sp, #40	; 0x28
 8000dc8:	af00      	add	r7, sp, #0
GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dca:	f107 0314 	add.w	r3, r7, #20
 8000dce:	2200      	movs	r2, #0
 8000dd0:	601a      	str	r2, [r3, #0]
 8000dd2:	605a      	str	r2, [r3, #4]
 8000dd4:	609a      	str	r2, [r3, #8]
 8000dd6:	60da      	str	r2, [r3, #12]
 8000dd8:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */
/* GPIO Ports Clock Enable */
__HAL_RCC_GPIOC_CLK_ENABLE();
 8000dda:	4b36      	ldr	r3, [pc, #216]	; (8000eb4 <MX_GPIO_Init+0xf0>)
 8000ddc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000dde:	4a35      	ldr	r2, [pc, #212]	; (8000eb4 <MX_GPIO_Init+0xf0>)
 8000de0:	f043 0304 	orr.w	r3, r3, #4
 8000de4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000de6:	4b33      	ldr	r3, [pc, #204]	; (8000eb4 <MX_GPIO_Init+0xf0>)
 8000de8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000dea:	f003 0304 	and.w	r3, r3, #4
 8000dee:	613b      	str	r3, [r7, #16]
 8000df0:	693b      	ldr	r3, [r7, #16]
__HAL_RCC_GPIOF_CLK_ENABLE();
 8000df2:	4b30      	ldr	r3, [pc, #192]	; (8000eb4 <MX_GPIO_Init+0xf0>)
 8000df4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000df6:	4a2f      	ldr	r2, [pc, #188]	; (8000eb4 <MX_GPIO_Init+0xf0>)
 8000df8:	f043 0320 	orr.w	r3, r3, #32
 8000dfc:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000dfe:	4b2d      	ldr	r3, [pc, #180]	; (8000eb4 <MX_GPIO_Init+0xf0>)
 8000e00:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e02:	f003 0320 	and.w	r3, r3, #32
 8000e06:	60fb      	str	r3, [r7, #12]
 8000e08:	68fb      	ldr	r3, [r7, #12]
__HAL_RCC_GPIOA_CLK_ENABLE();
 8000e0a:	4b2a      	ldr	r3, [pc, #168]	; (8000eb4 <MX_GPIO_Init+0xf0>)
 8000e0c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e0e:	4a29      	ldr	r2, [pc, #164]	; (8000eb4 <MX_GPIO_Init+0xf0>)
 8000e10:	f043 0301 	orr.w	r3, r3, #1
 8000e14:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000e16:	4b27      	ldr	r3, [pc, #156]	; (8000eb4 <MX_GPIO_Init+0xf0>)
 8000e18:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e1a:	f003 0301 	and.w	r3, r3, #1
 8000e1e:	60bb      	str	r3, [r7, #8]
 8000e20:	68bb      	ldr	r3, [r7, #8]
__HAL_RCC_GPIOB_CLK_ENABLE();
 8000e22:	4b24      	ldr	r3, [pc, #144]	; (8000eb4 <MX_GPIO_Init+0xf0>)
 8000e24:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e26:	4a23      	ldr	r2, [pc, #140]	; (8000eb4 <MX_GPIO_Init+0xf0>)
 8000e28:	f043 0302 	orr.w	r3, r3, #2
 8000e2c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000e2e:	4b21      	ldr	r3, [pc, #132]	; (8000eb4 <MX_GPIO_Init+0xf0>)
 8000e30:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e32:	f003 0302 	and.w	r3, r3, #2
 8000e36:	607b      	str	r3, [r7, #4]
 8000e38:	687b      	ldr	r3, [r7, #4]
/*Configure GPIO pin Output Level */
HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000e3a:	2200      	movs	r2, #0
 8000e3c:	2120      	movs	r1, #32
 8000e3e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e42:	f002 f981 	bl	8003148 <HAL_GPIO_WritePin>
/*Configure GPIO pin Output Level */
HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 8000e46:	2200      	movs	r2, #0
 8000e48:	f44f 4160 	mov.w	r1, #57344	; 0xe000
 8000e4c:	481a      	ldr	r0, [pc, #104]	; (8000eb8 <MX_GPIO_Init+0xf4>)
 8000e4e:	f002 f97b 	bl	8003148 <HAL_GPIO_WritePin>
/*Configure GPIO pin : B1_Pin */
GPIO_InitStruct.Pin = B1_Pin;
 8000e52:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000e56:	617b      	str	r3, [r7, #20]
GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000e58:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000e5c:	61bb      	str	r3, [r7, #24]
GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e5e:	2300      	movs	r3, #0
 8000e60:	61fb      	str	r3, [r7, #28]
HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000e62:	f107 0314 	add.w	r3, r7, #20
 8000e66:	4619      	mov	r1, r3
 8000e68:	4814      	ldr	r0, [pc, #80]	; (8000ebc <MX_GPIO_Init+0xf8>)
 8000e6a:	f001 ffeb 	bl	8002e44 <HAL_GPIO_Init>
/*Configure GPIO pin : LD2_Pin */
GPIO_InitStruct.Pin = LD2_Pin;
 8000e6e:	2320      	movs	r3, #32
 8000e70:	617b      	str	r3, [r7, #20]
GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e72:	2301      	movs	r3, #1
 8000e74:	61bb      	str	r3, [r7, #24]
GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e76:	2300      	movs	r3, #0
 8000e78:	61fb      	str	r3, [r7, #28]
GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e7a:	2300      	movs	r3, #0
 8000e7c:	623b      	str	r3, [r7, #32]
HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000e7e:	f107 0314 	add.w	r3, r7, #20
 8000e82:	4619      	mov	r1, r3
 8000e84:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e88:	f001 ffdc 	bl	8002e44 <HAL_GPIO_Init>
/*Configure GPIO pins : PB13 PB14 PB15 */
GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8000e8c:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8000e90:	617b      	str	r3, [r7, #20]
GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e92:	2301      	movs	r3, #1
 8000e94:	61bb      	str	r3, [r7, #24]
GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e96:	2300      	movs	r3, #0
 8000e98:	61fb      	str	r3, [r7, #28]
GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e9a:	2300      	movs	r3, #0
 8000e9c:	623b      	str	r3, [r7, #32]
HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e9e:	f107 0314 	add.w	r3, r7, #20
 8000ea2:	4619      	mov	r1, r3
 8000ea4:	4804      	ldr	r0, [pc, #16]	; (8000eb8 <MX_GPIO_Init+0xf4>)
 8000ea6:	f001 ffcd 	bl	8002e44 <HAL_GPIO_Init>
/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000eaa:	bf00      	nop
 8000eac:	3728      	adds	r7, #40	; 0x28
 8000eae:	46bd      	mov	sp, r7
 8000eb0:	bd80      	pop	{r7, pc}
 8000eb2:	bf00      	nop
 8000eb4:	40021000 	.word	0x40021000
 8000eb8:	48000400 	.word	0x48000400
 8000ebc:	48000800 	.word	0x48000800

08000ec0 <Error_Handler>:
/**
* @brief This function is executed in case of error occurrence.
* @retval None
*/
void Error_Handler(void)
{
 8000ec0:	b480      	push	{r7}
 8000ec2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ec4:	b672      	cpsid	i
}
 8000ec6:	bf00      	nop
/* USER CODE BEGIN Error_Handler_Debug */
/* User can add his own implementation to report the HAL error return state */
__disable_irq();
while (1)
 8000ec8:	e7fe      	b.n	8000ec8 <Error_Handler+0x8>
	...

08000ecc <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ecc:	b580      	push	{r7, lr}
 8000ece:	b082      	sub	sp, #8
 8000ed0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ed2:	4b0f      	ldr	r3, [pc, #60]	; (8000f10 <HAL_MspInit+0x44>)
 8000ed4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000ed6:	4a0e      	ldr	r2, [pc, #56]	; (8000f10 <HAL_MspInit+0x44>)
 8000ed8:	f043 0301 	orr.w	r3, r3, #1
 8000edc:	6613      	str	r3, [r2, #96]	; 0x60
 8000ede:	4b0c      	ldr	r3, [pc, #48]	; (8000f10 <HAL_MspInit+0x44>)
 8000ee0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000ee2:	f003 0301 	and.w	r3, r3, #1
 8000ee6:	607b      	str	r3, [r7, #4]
 8000ee8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000eea:	4b09      	ldr	r3, [pc, #36]	; (8000f10 <HAL_MspInit+0x44>)
 8000eec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000eee:	4a08      	ldr	r2, [pc, #32]	; (8000f10 <HAL_MspInit+0x44>)
 8000ef0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ef4:	6593      	str	r3, [r2, #88]	; 0x58
 8000ef6:	4b06      	ldr	r3, [pc, #24]	; (8000f10 <HAL_MspInit+0x44>)
 8000ef8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000efa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000efe:	603b      	str	r3, [r7, #0]
 8000f00:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8000f02:	f002 f9dd 	bl	80032c0 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f06:	bf00      	nop
 8000f08:	3708      	adds	r7, #8
 8000f0a:	46bd      	mov	sp, r7
 8000f0c:	bd80      	pop	{r7, pc}
 8000f0e:	bf00      	nop
 8000f10:	40021000 	.word	0x40021000

08000f14 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000f14:	b580      	push	{r7, lr}
 8000f16:	b09a      	sub	sp, #104	; 0x68
 8000f18:	af00      	add	r7, sp, #0
 8000f1a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f1c:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000f20:	2200      	movs	r2, #0
 8000f22:	601a      	str	r2, [r3, #0]
 8000f24:	605a      	str	r2, [r3, #4]
 8000f26:	609a      	str	r2, [r3, #8]
 8000f28:	60da      	str	r2, [r3, #12]
 8000f2a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000f2c:	f107 0310 	add.w	r3, r7, #16
 8000f30:	2244      	movs	r2, #68	; 0x44
 8000f32:	2100      	movs	r1, #0
 8000f34:	4618      	mov	r0, r3
 8000f36:	f005 ffa9 	bl	8006e8c <memset>
  if(hadc->Instance==ADC1)
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	681b      	ldr	r3, [r3, #0]
 8000f3e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000f42:	d133      	bne.n	8000fac <HAL_ADC_MspInit+0x98>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8000f44:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000f48:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8000f4a:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8000f4e:	64fb      	str	r3, [r7, #76]	; 0x4c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000f50:	f107 0310 	add.w	r3, r7, #16
 8000f54:	4618      	mov	r0, r3
 8000f56:	f002 fef7 	bl	8003d48 <HAL_RCCEx_PeriphCLKConfig>
 8000f5a:	4603      	mov	r3, r0
 8000f5c:	2b00      	cmp	r3, #0
 8000f5e:	d001      	beq.n	8000f64 <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 8000f60:	f7ff ffae 	bl	8000ec0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8000f64:	4b13      	ldr	r3, [pc, #76]	; (8000fb4 <HAL_ADC_MspInit+0xa0>)
 8000f66:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f68:	4a12      	ldr	r2, [pc, #72]	; (8000fb4 <HAL_ADC_MspInit+0xa0>)
 8000f6a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000f6e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000f70:	4b10      	ldr	r3, [pc, #64]	; (8000fb4 <HAL_ADC_MspInit+0xa0>)
 8000f72:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f74:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000f78:	60fb      	str	r3, [r7, #12]
 8000f7a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f7c:	4b0d      	ldr	r3, [pc, #52]	; (8000fb4 <HAL_ADC_MspInit+0xa0>)
 8000f7e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f80:	4a0c      	ldr	r2, [pc, #48]	; (8000fb4 <HAL_ADC_MspInit+0xa0>)
 8000f82:	f043 0304 	orr.w	r3, r3, #4
 8000f86:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000f88:	4b0a      	ldr	r3, [pc, #40]	; (8000fb4 <HAL_ADC_MspInit+0xa0>)
 8000f8a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f8c:	f003 0304 	and.w	r3, r3, #4
 8000f90:	60bb      	str	r3, [r7, #8]
 8000f92:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PC2     ------> ADC1_IN8
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000f94:	2304      	movs	r3, #4
 8000f96:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000f98:	2303      	movs	r3, #3
 8000f9a:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f9c:	2300      	movs	r3, #0
 8000f9e:	65fb      	str	r3, [r7, #92]	; 0x5c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000fa0:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000fa4:	4619      	mov	r1, r3
 8000fa6:	4804      	ldr	r0, [pc, #16]	; (8000fb8 <HAL_ADC_MspInit+0xa4>)
 8000fa8:	f001 ff4c 	bl	8002e44 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000fac:	bf00      	nop
 8000fae:	3768      	adds	r7, #104	; 0x68
 8000fb0:	46bd      	mov	sp, r7
 8000fb2:	bd80      	pop	{r7, pc}
 8000fb4:	40021000 	.word	0x40021000
 8000fb8:	48000800 	.word	0x48000800

08000fbc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000fbc:	b580      	push	{r7, lr}
 8000fbe:	b09e      	sub	sp, #120	; 0x78
 8000fc0:	af00      	add	r7, sp, #0
 8000fc2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fc4:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000fc8:	2200      	movs	r2, #0
 8000fca:	601a      	str	r2, [r3, #0]
 8000fcc:	605a      	str	r2, [r3, #4]
 8000fce:	609a      	str	r2, [r3, #8]
 8000fd0:	60da      	str	r2, [r3, #12]
 8000fd2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000fd4:	f107 0320 	add.w	r3, r7, #32
 8000fd8:	2244      	movs	r2, #68	; 0x44
 8000fda:	2100      	movs	r1, #0
 8000fdc:	4618      	mov	r0, r3
 8000fde:	f005 ff55 	bl	8006e8c <memset>
  if(huart->Instance==LPUART1)
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	681b      	ldr	r3, [r3, #0]
 8000fe6:	4a4c      	ldr	r2, [pc, #304]	; (8001118 <HAL_UART_MspInit+0x15c>)
 8000fe8:	4293      	cmp	r3, r2
 8000fea:	d137      	bne.n	800105c <HAL_UART_MspInit+0xa0>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8000fec:	2320      	movs	r3, #32
 8000fee:	623b      	str	r3, [r7, #32]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8000ff0:	2300      	movs	r3, #0
 8000ff2:	637b      	str	r3, [r7, #52]	; 0x34
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000ff4:	f107 0320 	add.w	r3, r7, #32
 8000ff8:	4618      	mov	r0, r3
 8000ffa:	f002 fea5 	bl	8003d48 <HAL_RCCEx_PeriphCLKConfig>
 8000ffe:	4603      	mov	r3, r0
 8001000:	2b00      	cmp	r3, #0
 8001002:	d001      	beq.n	8001008 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001004:	f7ff ff5c 	bl	8000ec0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8001008:	4b44      	ldr	r3, [pc, #272]	; (800111c <HAL_UART_MspInit+0x160>)
 800100a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800100c:	4a43      	ldr	r2, [pc, #268]	; (800111c <HAL_UART_MspInit+0x160>)
 800100e:	f043 0301 	orr.w	r3, r3, #1
 8001012:	65d3      	str	r3, [r2, #92]	; 0x5c
 8001014:	4b41      	ldr	r3, [pc, #260]	; (800111c <HAL_UART_MspInit+0x160>)
 8001016:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001018:	f003 0301 	and.w	r3, r3, #1
 800101c:	61fb      	str	r3, [r7, #28]
 800101e:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001020:	4b3e      	ldr	r3, [pc, #248]	; (800111c <HAL_UART_MspInit+0x160>)
 8001022:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001024:	4a3d      	ldr	r2, [pc, #244]	; (800111c <HAL_UART_MspInit+0x160>)
 8001026:	f043 0301 	orr.w	r3, r3, #1
 800102a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800102c:	4b3b      	ldr	r3, [pc, #236]	; (800111c <HAL_UART_MspInit+0x160>)
 800102e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001030:	f003 0301 	and.w	r3, r3, #1
 8001034:	61bb      	str	r3, [r7, #24]
 8001036:	69bb      	ldr	r3, [r7, #24]
    /**LPUART1 GPIO Configuration
    PA2     ------> LPUART1_TX
    PA3     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = LPUART1_TX_Pin|LPUART1_RX_Pin;
 8001038:	230c      	movs	r3, #12
 800103a:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800103c:	2302      	movs	r3, #2
 800103e:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001040:	2300      	movs	r3, #0
 8001042:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001044:	2300      	movs	r3, #0
 8001046:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF12_LPUART1;
 8001048:	230c      	movs	r3, #12
 800104a:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800104c:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001050:	4619      	mov	r1, r3
 8001052:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001056:	f001 fef5 	bl	8002e44 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800105a:	e058      	b.n	800110e <HAL_UART_MspInit+0x152>
  else if(huart->Instance==USART2)
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	681b      	ldr	r3, [r3, #0]
 8001060:	4a2f      	ldr	r2, [pc, #188]	; (8001120 <HAL_UART_MspInit+0x164>)
 8001062:	4293      	cmp	r3, r2
 8001064:	d153      	bne.n	800110e <HAL_UART_MspInit+0x152>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001066:	2302      	movs	r3, #2
 8001068:	623b      	str	r3, [r7, #32]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800106a:	2300      	movs	r3, #0
 800106c:	62bb      	str	r3, [r7, #40]	; 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800106e:	f107 0320 	add.w	r3, r7, #32
 8001072:	4618      	mov	r0, r3
 8001074:	f002 fe68 	bl	8003d48 <HAL_RCCEx_PeriphCLKConfig>
 8001078:	4603      	mov	r3, r0
 800107a:	2b00      	cmp	r3, #0
 800107c:	d001      	beq.n	8001082 <HAL_UART_MspInit+0xc6>
      Error_Handler();
 800107e:	f7ff ff1f 	bl	8000ec0 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001082:	4b26      	ldr	r3, [pc, #152]	; (800111c <HAL_UART_MspInit+0x160>)
 8001084:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001086:	4a25      	ldr	r2, [pc, #148]	; (800111c <HAL_UART_MspInit+0x160>)
 8001088:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800108c:	6593      	str	r3, [r2, #88]	; 0x58
 800108e:	4b23      	ldr	r3, [pc, #140]	; (800111c <HAL_UART_MspInit+0x160>)
 8001090:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001092:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001096:	617b      	str	r3, [r7, #20]
 8001098:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800109a:	4b20      	ldr	r3, [pc, #128]	; (800111c <HAL_UART_MspInit+0x160>)
 800109c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800109e:	4a1f      	ldr	r2, [pc, #124]	; (800111c <HAL_UART_MspInit+0x160>)
 80010a0:	f043 0301 	orr.w	r3, r3, #1
 80010a4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80010a6:	4b1d      	ldr	r3, [pc, #116]	; (800111c <HAL_UART_MspInit+0x160>)
 80010a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010aa:	f003 0301 	and.w	r3, r3, #1
 80010ae:	613b      	str	r3, [r7, #16]
 80010b0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80010b2:	4b1a      	ldr	r3, [pc, #104]	; (800111c <HAL_UART_MspInit+0x160>)
 80010b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010b6:	4a19      	ldr	r2, [pc, #100]	; (800111c <HAL_UART_MspInit+0x160>)
 80010b8:	f043 0302 	orr.w	r3, r3, #2
 80010bc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80010be:	4b17      	ldr	r3, [pc, #92]	; (800111c <HAL_UART_MspInit+0x160>)
 80010c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010c2:	f003 0302 	and.w	r3, r3, #2
 80010c6:	60fb      	str	r3, [r7, #12]
 80010c8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 80010ca:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80010ce:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010d0:	2302      	movs	r3, #2
 80010d2:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010d4:	2300      	movs	r3, #0
 80010d6:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010d8:	2300      	movs	r3, #0
 80010da:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80010dc:	2307      	movs	r3, #7
 80010de:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010e0:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80010e4:	4619      	mov	r1, r3
 80010e6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80010ea:	f001 feab 	bl	8002e44 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80010ee:	2308      	movs	r3, #8
 80010f0:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010f2:	2302      	movs	r3, #2
 80010f4:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010f6:	2300      	movs	r3, #0
 80010f8:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010fa:	2300      	movs	r3, #0
 80010fc:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80010fe:	2307      	movs	r3, #7
 8001100:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001102:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001106:	4619      	mov	r1, r3
 8001108:	4806      	ldr	r0, [pc, #24]	; (8001124 <HAL_UART_MspInit+0x168>)
 800110a:	f001 fe9b 	bl	8002e44 <HAL_GPIO_Init>
}
 800110e:	bf00      	nop
 8001110:	3778      	adds	r7, #120	; 0x78
 8001112:	46bd      	mov	sp, r7
 8001114:	bd80      	pop	{r7, pc}
 8001116:	bf00      	nop
 8001118:	40008000 	.word	0x40008000
 800111c:	40021000 	.word	0x40021000
 8001120:	40004400 	.word	0x40004400
 8001124:	48000400 	.word	0x48000400

08001128 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001128:	b580      	push	{r7, lr}
 800112a:	b08a      	sub	sp, #40	; 0x28
 800112c:	af00      	add	r7, sp, #0
 800112e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001130:	f107 0314 	add.w	r3, r7, #20
 8001134:	2200      	movs	r2, #0
 8001136:	601a      	str	r2, [r3, #0]
 8001138:	605a      	str	r2, [r3, #4]
 800113a:	609a      	str	r2, [r3, #8]
 800113c:	60da      	str	r2, [r3, #12]
 800113e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI3)
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	4a17      	ldr	r2, [pc, #92]	; (80011a4 <HAL_SPI_MspInit+0x7c>)
 8001146:	4293      	cmp	r3, r2
 8001148:	d128      	bne.n	800119c <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 800114a:	4b17      	ldr	r3, [pc, #92]	; (80011a8 <HAL_SPI_MspInit+0x80>)
 800114c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800114e:	4a16      	ldr	r2, [pc, #88]	; (80011a8 <HAL_SPI_MspInit+0x80>)
 8001150:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001154:	6593      	str	r3, [r2, #88]	; 0x58
 8001156:	4b14      	ldr	r3, [pc, #80]	; (80011a8 <HAL_SPI_MspInit+0x80>)
 8001158:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800115a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800115e:	613b      	str	r3, [r7, #16]
 8001160:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001162:	4b11      	ldr	r3, [pc, #68]	; (80011a8 <HAL_SPI_MspInit+0x80>)
 8001164:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001166:	4a10      	ldr	r2, [pc, #64]	; (80011a8 <HAL_SPI_MspInit+0x80>)
 8001168:	f043 0304 	orr.w	r3, r3, #4
 800116c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800116e:	4b0e      	ldr	r3, [pc, #56]	; (80011a8 <HAL_SPI_MspInit+0x80>)
 8001170:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001172:	f003 0304 	and.w	r3, r3, #4
 8001176:	60fb      	str	r3, [r7, #12]
 8001178:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 800117a:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 800117e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001180:	2302      	movs	r3, #2
 8001182:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001184:	2300      	movs	r3, #0
 8001186:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001188:	2300      	movs	r3, #0
 800118a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800118c:	2306      	movs	r3, #6
 800118e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001190:	f107 0314 	add.w	r3, r7, #20
 8001194:	4619      	mov	r1, r3
 8001196:	4805      	ldr	r0, [pc, #20]	; (80011ac <HAL_SPI_MspInit+0x84>)
 8001198:	f001 fe54 	bl	8002e44 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 800119c:	bf00      	nop
 800119e:	3728      	adds	r7, #40	; 0x28
 80011a0:	46bd      	mov	sp, r7
 80011a2:	bd80      	pop	{r7, pc}
 80011a4:	40003c00 	.word	0x40003c00
 80011a8:	40021000 	.word	0x40021000
 80011ac:	48000800 	.word	0x48000800

080011b0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80011b0:	b480      	push	{r7}
 80011b2:	b085      	sub	sp, #20
 80011b4:	af00      	add	r7, sp, #0
 80011b6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	4a0a      	ldr	r2, [pc, #40]	; (80011e8 <HAL_TIM_Base_MspInit+0x38>)
 80011be:	4293      	cmp	r3, r2
 80011c0:	d10b      	bne.n	80011da <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80011c2:	4b0a      	ldr	r3, [pc, #40]	; (80011ec <HAL_TIM_Base_MspInit+0x3c>)
 80011c4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80011c6:	4a09      	ldr	r2, [pc, #36]	; (80011ec <HAL_TIM_Base_MspInit+0x3c>)
 80011c8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80011cc:	6613      	str	r3, [r2, #96]	; 0x60
 80011ce:	4b07      	ldr	r3, [pc, #28]	; (80011ec <HAL_TIM_Base_MspInit+0x3c>)
 80011d0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80011d2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80011d6:	60fb      	str	r3, [r7, #12]
 80011d8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 80011da:	bf00      	nop
 80011dc:	3714      	adds	r7, #20
 80011de:	46bd      	mov	sp, r7
 80011e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e4:	4770      	bx	lr
 80011e6:	bf00      	nop
 80011e8:	40012c00 	.word	0x40012c00
 80011ec:	40021000 	.word	0x40021000

080011f0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80011f0:	b580      	push	{r7, lr}
 80011f2:	b088      	sub	sp, #32
 80011f4:	af00      	add	r7, sp, #0
 80011f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011f8:	f107 030c 	add.w	r3, r7, #12
 80011fc:	2200      	movs	r2, #0
 80011fe:	601a      	str	r2, [r3, #0]
 8001200:	605a      	str	r2, [r3, #4]
 8001202:	609a      	str	r2, [r3, #8]
 8001204:	60da      	str	r2, [r3, #12]
 8001206:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	4a12      	ldr	r2, [pc, #72]	; (8001258 <HAL_TIM_MspPostInit+0x68>)
 800120e:	4293      	cmp	r3, r2
 8001210:	d11d      	bne.n	800124e <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001212:	4b12      	ldr	r3, [pc, #72]	; (800125c <HAL_TIM_MspPostInit+0x6c>)
 8001214:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001216:	4a11      	ldr	r2, [pc, #68]	; (800125c <HAL_TIM_MspPostInit+0x6c>)
 8001218:	f043 0301 	orr.w	r3, r3, #1
 800121c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800121e:	4b0f      	ldr	r3, [pc, #60]	; (800125c <HAL_TIM_MspPostInit+0x6c>)
 8001220:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001222:	f003 0301 	and.w	r3, r3, #1
 8001226:	60bb      	str	r3, [r7, #8]
 8001228:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10;
 800122a:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 800122e:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001230:	2302      	movs	r3, #2
 8001232:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001234:	2300      	movs	r3, #0
 8001236:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001238:	2300      	movs	r3, #0
 800123a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 800123c:	2306      	movs	r3, #6
 800123e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001240:	f107 030c 	add.w	r3, r7, #12
 8001244:	4619      	mov	r1, r3
 8001246:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800124a:	f001 fdfb 	bl	8002e44 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 800124e:	bf00      	nop
 8001250:	3720      	adds	r7, #32
 8001252:	46bd      	mov	sp, r7
 8001254:	bd80      	pop	{r7, pc}
 8001256:	bf00      	nop
 8001258:	40012c00 	.word	0x40012c00
 800125c:	40021000 	.word	0x40021000

08001260 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001260:	b480      	push	{r7}
 8001262:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001264:	e7fe      	b.n	8001264 <NMI_Handler+0x4>

08001266 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001266:	b480      	push	{r7}
 8001268:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800126a:	e7fe      	b.n	800126a <HardFault_Handler+0x4>

0800126c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800126c:	b480      	push	{r7}
 800126e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001270:	e7fe      	b.n	8001270 <MemManage_Handler+0x4>

08001272 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001272:	b480      	push	{r7}
 8001274:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001276:	e7fe      	b.n	8001276 <BusFault_Handler+0x4>

08001278 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001278:	b480      	push	{r7}
 800127a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800127c:	e7fe      	b.n	800127c <UsageFault_Handler+0x4>

0800127e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800127e:	b480      	push	{r7}
 8001280:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001282:	bf00      	nop
 8001284:	46bd      	mov	sp, r7
 8001286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800128a:	4770      	bx	lr

0800128c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800128c:	b480      	push	{r7}
 800128e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001290:	bf00      	nop
 8001292:	46bd      	mov	sp, r7
 8001294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001298:	4770      	bx	lr

0800129a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800129a:	b480      	push	{r7}
 800129c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800129e:	bf00      	nop
 80012a0:	46bd      	mov	sp, r7
 80012a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a6:	4770      	bx	lr

080012a8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80012a8:	b580      	push	{r7, lr}
 80012aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80012ac:	f000 f890 	bl	80013d0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80012b0:	bf00      	nop
 80012b2:	bd80      	pop	{r7, pc}

080012b4 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80012b4:	b480      	push	{r7}
 80012b6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80012b8:	4b06      	ldr	r3, [pc, #24]	; (80012d4 <SystemInit+0x20>)
 80012ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80012be:	4a05      	ldr	r2, [pc, #20]	; (80012d4 <SystemInit+0x20>)
 80012c0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80012c4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80012c8:	bf00      	nop
 80012ca:	46bd      	mov	sp, r7
 80012cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d0:	4770      	bx	lr
 80012d2:	bf00      	nop
 80012d4:	e000ed00 	.word	0xe000ed00

080012d8 <Reset_Handler>:
 80012d8:	480d      	ldr	r0, [pc, #52]	; (8001310 <LoopForever+0x2>)
 80012da:	4685      	mov	sp, r0
 80012dc:	480d      	ldr	r0, [pc, #52]	; (8001314 <LoopForever+0x6>)
 80012de:	490e      	ldr	r1, [pc, #56]	; (8001318 <LoopForever+0xa>)
 80012e0:	4a0e      	ldr	r2, [pc, #56]	; (800131c <LoopForever+0xe>)
 80012e2:	2300      	movs	r3, #0
 80012e4:	e002      	b.n	80012ec <LoopCopyDataInit>

080012e6 <CopyDataInit>:
 80012e6:	58d4      	ldr	r4, [r2, r3]
 80012e8:	50c4      	str	r4, [r0, r3]
 80012ea:	3304      	adds	r3, #4

080012ec <LoopCopyDataInit>:
 80012ec:	18c4      	adds	r4, r0, r3
 80012ee:	428c      	cmp	r4, r1
 80012f0:	d3f9      	bcc.n	80012e6 <CopyDataInit>
 80012f2:	4a0b      	ldr	r2, [pc, #44]	; (8001320 <LoopForever+0x12>)
 80012f4:	4c0b      	ldr	r4, [pc, #44]	; (8001324 <LoopForever+0x16>)
 80012f6:	2300      	movs	r3, #0
 80012f8:	e001      	b.n	80012fe <LoopFillZerobss>

080012fa <FillZerobss>:
 80012fa:	6013      	str	r3, [r2, #0]
 80012fc:	3204      	adds	r2, #4

080012fe <LoopFillZerobss>:
 80012fe:	42a2      	cmp	r2, r4
 8001300:	d3fb      	bcc.n	80012fa <FillZerobss>
 8001302:	f7ff ffd7 	bl	80012b4 <SystemInit>
 8001306:	f005 fdc9 	bl	8006e9c <__libc_init_array>
 800130a:	f7ff f9c3 	bl	8000694 <main>

0800130e <LoopForever>:
 800130e:	e7fe      	b.n	800130e <LoopForever>
 8001310:	20008000 	.word	0x20008000
 8001314:	20000000 	.word	0x20000000
 8001318:	2000000c 	.word	0x2000000c
 800131c:	08006f4c 	.word	0x08006f4c
 8001320:	2000000c 	.word	0x2000000c
 8001324:	20000270 	.word	0x20000270

08001328 <ADC1_2_IRQHandler>:
 8001328:	e7fe      	b.n	8001328 <ADC1_2_IRQHandler>

0800132a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800132a:	b580      	push	{r7, lr}
 800132c:	b082      	sub	sp, #8
 800132e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001330:	2300      	movs	r3, #0
 8001332:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001334:	2003      	movs	r0, #3
 8001336:	f001 fd53 	bl	8002de0 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800133a:	2000      	movs	r0, #0
 800133c:	f000 f80e 	bl	800135c <HAL_InitTick>
 8001340:	4603      	mov	r3, r0
 8001342:	2b00      	cmp	r3, #0
 8001344:	d002      	beq.n	800134c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001346:	2301      	movs	r3, #1
 8001348:	71fb      	strb	r3, [r7, #7]
 800134a:	e001      	b.n	8001350 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800134c:	f7ff fdbe 	bl	8000ecc <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001350:	79fb      	ldrb	r3, [r7, #7]

}
 8001352:	4618      	mov	r0, r3
 8001354:	3708      	adds	r7, #8
 8001356:	46bd      	mov	sp, r7
 8001358:	bd80      	pop	{r7, pc}
	...

0800135c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800135c:	b580      	push	{r7, lr}
 800135e:	b084      	sub	sp, #16
 8001360:	af00      	add	r7, sp, #0
 8001362:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001364:	2300      	movs	r3, #0
 8001366:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8001368:	4b16      	ldr	r3, [pc, #88]	; (80013c4 <HAL_InitTick+0x68>)
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	2b00      	cmp	r3, #0
 800136e:	d022      	beq.n	80013b6 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8001370:	4b15      	ldr	r3, [pc, #84]	; (80013c8 <HAL_InitTick+0x6c>)
 8001372:	681a      	ldr	r2, [r3, #0]
 8001374:	4b13      	ldr	r3, [pc, #76]	; (80013c4 <HAL_InitTick+0x68>)
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800137c:	fbb1 f3f3 	udiv	r3, r1, r3
 8001380:	fbb2 f3f3 	udiv	r3, r2, r3
 8001384:	4618      	mov	r0, r3
 8001386:	f001 fd50 	bl	8002e2a <HAL_SYSTICK_Config>
 800138a:	4603      	mov	r3, r0
 800138c:	2b00      	cmp	r3, #0
 800138e:	d10f      	bne.n	80013b0 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	2b0f      	cmp	r3, #15
 8001394:	d809      	bhi.n	80013aa <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001396:	2200      	movs	r2, #0
 8001398:	6879      	ldr	r1, [r7, #4]
 800139a:	f04f 30ff 	mov.w	r0, #4294967295
 800139e:	f001 fd2a 	bl	8002df6 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80013a2:	4a0a      	ldr	r2, [pc, #40]	; (80013cc <HAL_InitTick+0x70>)
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	6013      	str	r3, [r2, #0]
 80013a8:	e007      	b.n	80013ba <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 80013aa:	2301      	movs	r3, #1
 80013ac:	73fb      	strb	r3, [r7, #15]
 80013ae:	e004      	b.n	80013ba <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 80013b0:	2301      	movs	r3, #1
 80013b2:	73fb      	strb	r3, [r7, #15]
 80013b4:	e001      	b.n	80013ba <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 80013b6:	2301      	movs	r3, #1
 80013b8:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80013ba:	7bfb      	ldrb	r3, [r7, #15]
}
 80013bc:	4618      	mov	r0, r3
 80013be:	3710      	adds	r7, #16
 80013c0:	46bd      	mov	sp, r7
 80013c2:	bd80      	pop	{r7, pc}
 80013c4:	20000008 	.word	0x20000008
 80013c8:	20000000 	.word	0x20000000
 80013cc:	20000004 	.word	0x20000004

080013d0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80013d0:	b480      	push	{r7}
 80013d2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80013d4:	4b05      	ldr	r3, [pc, #20]	; (80013ec <HAL_IncTick+0x1c>)
 80013d6:	681a      	ldr	r2, [r3, #0]
 80013d8:	4b05      	ldr	r3, [pc, #20]	; (80013f0 <HAL_IncTick+0x20>)
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	4413      	add	r3, r2
 80013de:	4a03      	ldr	r2, [pc, #12]	; (80013ec <HAL_IncTick+0x1c>)
 80013e0:	6013      	str	r3, [r2, #0]
}
 80013e2:	bf00      	nop
 80013e4:	46bd      	mov	sp, r7
 80013e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ea:	4770      	bx	lr
 80013ec:	2000026c 	.word	0x2000026c
 80013f0:	20000008 	.word	0x20000008

080013f4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80013f4:	b480      	push	{r7}
 80013f6:	af00      	add	r7, sp, #0
  return uwTick;
 80013f8:	4b03      	ldr	r3, [pc, #12]	; (8001408 <HAL_GetTick+0x14>)
 80013fa:	681b      	ldr	r3, [r3, #0]
}
 80013fc:	4618      	mov	r0, r3
 80013fe:	46bd      	mov	sp, r7
 8001400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001404:	4770      	bx	lr
 8001406:	bf00      	nop
 8001408:	2000026c 	.word	0x2000026c

0800140c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800140c:	b580      	push	{r7, lr}
 800140e:	b084      	sub	sp, #16
 8001410:	af00      	add	r7, sp, #0
 8001412:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001414:	f7ff ffee 	bl	80013f4 <HAL_GetTick>
 8001418:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800141e:	68fb      	ldr	r3, [r7, #12]
 8001420:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001424:	d004      	beq.n	8001430 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8001426:	4b09      	ldr	r3, [pc, #36]	; (800144c <HAL_Delay+0x40>)
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	68fa      	ldr	r2, [r7, #12]
 800142c:	4413      	add	r3, r2
 800142e:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001430:	bf00      	nop
 8001432:	f7ff ffdf 	bl	80013f4 <HAL_GetTick>
 8001436:	4602      	mov	r2, r0
 8001438:	68bb      	ldr	r3, [r7, #8]
 800143a:	1ad3      	subs	r3, r2, r3
 800143c:	68fa      	ldr	r2, [r7, #12]
 800143e:	429a      	cmp	r2, r3
 8001440:	d8f7      	bhi.n	8001432 <HAL_Delay+0x26>
  {
  }
}
 8001442:	bf00      	nop
 8001444:	bf00      	nop
 8001446:	3710      	adds	r7, #16
 8001448:	46bd      	mov	sp, r7
 800144a:	bd80      	pop	{r7, pc}
 800144c:	20000008 	.word	0x20000008

08001450 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001450:	b480      	push	{r7}
 8001452:	b083      	sub	sp, #12
 8001454:	af00      	add	r7, sp, #0
 8001456:	6078      	str	r0, [r7, #4]
 8001458:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	689b      	ldr	r3, [r3, #8]
 800145e:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8001462:	683b      	ldr	r3, [r7, #0]
 8001464:	431a      	orrs	r2, r3
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	609a      	str	r2, [r3, #8]
}
 800146a:	bf00      	nop
 800146c:	370c      	adds	r7, #12
 800146e:	46bd      	mov	sp, r7
 8001470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001474:	4770      	bx	lr

08001476 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001476:	b480      	push	{r7}
 8001478:	b083      	sub	sp, #12
 800147a:	af00      	add	r7, sp, #0
 800147c:	6078      	str	r0, [r7, #4]
 800147e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	689b      	ldr	r3, [r3, #8]
 8001484:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8001488:	683b      	ldr	r3, [r7, #0]
 800148a:	431a      	orrs	r2, r3
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	609a      	str	r2, [r3, #8]
}
 8001490:	bf00      	nop
 8001492:	370c      	adds	r7, #12
 8001494:	46bd      	mov	sp, r7
 8001496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800149a:	4770      	bx	lr

0800149c <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 800149c:	b480      	push	{r7}
 800149e:	b083      	sub	sp, #12
 80014a0:	af00      	add	r7, sp, #0
 80014a2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	689b      	ldr	r3, [r3, #8]
 80014a8:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 80014ac:	4618      	mov	r0, r3
 80014ae:	370c      	adds	r7, #12
 80014b0:	46bd      	mov	sp, r7
 80014b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b6:	4770      	bx	lr

080014b8 <LL_ADC_SetOffset>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80014b8:	b480      	push	{r7}
 80014ba:	b087      	sub	sp, #28
 80014bc:	af00      	add	r7, sp, #0
 80014be:	60f8      	str	r0, [r7, #12]
 80014c0:	60b9      	str	r1, [r7, #8]
 80014c2:	607a      	str	r2, [r7, #4]
 80014c4:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80014c6:	68fb      	ldr	r3, [r7, #12]
 80014c8:	3360      	adds	r3, #96	; 0x60
 80014ca:	461a      	mov	r2, r3
 80014cc:	68bb      	ldr	r3, [r7, #8]
 80014ce:	009b      	lsls	r3, r3, #2
 80014d0:	4413      	add	r3, r2
 80014d2:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80014d4:	697b      	ldr	r3, [r7, #20]
 80014d6:	681a      	ldr	r2, [r3, #0]
 80014d8:	4b08      	ldr	r3, [pc, #32]	; (80014fc <LL_ADC_SetOffset+0x44>)
 80014da:	4013      	ands	r3, r2
 80014dc:	687a      	ldr	r2, [r7, #4]
 80014de:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 80014e2:	683a      	ldr	r2, [r7, #0]
 80014e4:	430a      	orrs	r2, r1
 80014e6:	4313      	orrs	r3, r2
 80014e8:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80014ec:	697b      	ldr	r3, [r7, #20]
 80014ee:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 80014f0:	bf00      	nop
 80014f2:	371c      	adds	r7, #28
 80014f4:	46bd      	mov	sp, r7
 80014f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014fa:	4770      	bx	lr
 80014fc:	03fff000 	.word	0x03fff000

08001500 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8001500:	b480      	push	{r7}
 8001502:	b085      	sub	sp, #20
 8001504:	af00      	add	r7, sp, #0
 8001506:	6078      	str	r0, [r7, #4]
 8001508:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	3360      	adds	r3, #96	; 0x60
 800150e:	461a      	mov	r2, r3
 8001510:	683b      	ldr	r3, [r7, #0]
 8001512:	009b      	lsls	r3, r3, #2
 8001514:	4413      	add	r3, r2
 8001516:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001518:	68fb      	ldr	r3, [r7, #12]
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8001520:	4618      	mov	r0, r3
 8001522:	3714      	adds	r7, #20
 8001524:	46bd      	mov	sp, r7
 8001526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800152a:	4770      	bx	lr

0800152c <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 800152c:	b480      	push	{r7}
 800152e:	b087      	sub	sp, #28
 8001530:	af00      	add	r7, sp, #0
 8001532:	60f8      	str	r0, [r7, #12]
 8001534:	60b9      	str	r1, [r7, #8]
 8001536:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001538:	68fb      	ldr	r3, [r7, #12]
 800153a:	3360      	adds	r3, #96	; 0x60
 800153c:	461a      	mov	r2, r3
 800153e:	68bb      	ldr	r3, [r7, #8]
 8001540:	009b      	lsls	r3, r3, #2
 8001542:	4413      	add	r3, r2
 8001544:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001546:	697b      	ldr	r3, [r7, #20]
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	431a      	orrs	r2, r3
 8001552:	697b      	ldr	r3, [r7, #20]
 8001554:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8001556:	bf00      	nop
 8001558:	371c      	adds	r7, #28
 800155a:	46bd      	mov	sp, r7
 800155c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001560:	4770      	bx	lr

08001562 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8001562:	b480      	push	{r7}
 8001564:	b087      	sub	sp, #28
 8001566:	af00      	add	r7, sp, #0
 8001568:	60f8      	str	r0, [r7, #12]
 800156a:	60b9      	str	r1, [r7, #8]
 800156c:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800156e:	68fb      	ldr	r3, [r7, #12]
 8001570:	3360      	adds	r3, #96	; 0x60
 8001572:	461a      	mov	r2, r3
 8001574:	68bb      	ldr	r3, [r7, #8]
 8001576:	009b      	lsls	r3, r3, #2
 8001578:	4413      	add	r3, r2
 800157a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800157c:	697b      	ldr	r3, [r7, #20]
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	431a      	orrs	r2, r3
 8001588:	697b      	ldr	r3, [r7, #20]
 800158a:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 800158c:	bf00      	nop
 800158e:	371c      	adds	r7, #28
 8001590:	46bd      	mov	sp, r7
 8001592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001596:	4770      	bx	lr

08001598 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8001598:	b480      	push	{r7}
 800159a:	b087      	sub	sp, #28
 800159c:	af00      	add	r7, sp, #0
 800159e:	60f8      	str	r0, [r7, #12]
 80015a0:	60b9      	str	r1, [r7, #8]
 80015a2:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80015a4:	68fb      	ldr	r3, [r7, #12]
 80015a6:	3360      	adds	r3, #96	; 0x60
 80015a8:	461a      	mov	r2, r3
 80015aa:	68bb      	ldr	r3, [r7, #8]
 80015ac:	009b      	lsls	r3, r3, #2
 80015ae:	4413      	add	r3, r2
 80015b0:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80015b2:	697b      	ldr	r3, [r7, #20]
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	431a      	orrs	r2, r3
 80015be:	697b      	ldr	r3, [r7, #20]
 80015c0:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 80015c2:	bf00      	nop
 80015c4:	371c      	adds	r7, #28
 80015c6:	46bd      	mov	sp, r7
 80015c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015cc:	4770      	bx	lr

080015ce <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 80015ce:	b480      	push	{r7}
 80015d0:	b083      	sub	sp, #12
 80015d2:	af00      	add	r7, sp, #0
 80015d4:	6078      	str	r0, [r7, #4]
 80015d6:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	695b      	ldr	r3, [r3, #20]
 80015dc:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80015e0:	683b      	ldr	r3, [r7, #0]
 80015e2:	431a      	orrs	r2, r3
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	615a      	str	r2, [r3, #20]
}
 80015e8:	bf00      	nop
 80015ea:	370c      	adds	r7, #12
 80015ec:	46bd      	mov	sp, r7
 80015ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f2:	4770      	bx	lr

080015f4 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 80015f4:	b480      	push	{r7}
 80015f6:	b083      	sub	sp, #12
 80015f8:	af00      	add	r7, sp, #0
 80015fa:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	68db      	ldr	r3, [r3, #12]
 8001600:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8001604:	2b00      	cmp	r3, #0
 8001606:	d101      	bne.n	800160c <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8001608:	2301      	movs	r3, #1
 800160a:	e000      	b.n	800160e <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 800160c:	2300      	movs	r3, #0
}
 800160e:	4618      	mov	r0, r3
 8001610:	370c      	adds	r7, #12
 8001612:	46bd      	mov	sp, r7
 8001614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001618:	4770      	bx	lr

0800161a <LL_ADC_REG_SetSequencerRanks>:
  *         (8) On STM32G4, fast channel allows: 2.5 (sampling) + 12.5 (conversion) = 15 ADC clock cycles (fADC) to convert in 12-bit resolution.
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 800161a:	b480      	push	{r7}
 800161c:	b087      	sub	sp, #28
 800161e:	af00      	add	r7, sp, #0
 8001620:	60f8      	str	r0, [r7, #12]
 8001622:	60b9      	str	r1, [r7, #8]
 8001624:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8001626:	68fb      	ldr	r3, [r7, #12]
 8001628:	3330      	adds	r3, #48	; 0x30
 800162a:	461a      	mov	r2, r3
 800162c:	68bb      	ldr	r3, [r7, #8]
 800162e:	0a1b      	lsrs	r3, r3, #8
 8001630:	009b      	lsls	r3, r3, #2
 8001632:	f003 030c 	and.w	r3, r3, #12
 8001636:	4413      	add	r3, r2
 8001638:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800163a:	697b      	ldr	r3, [r7, #20]
 800163c:	681a      	ldr	r2, [r3, #0]
 800163e:	68bb      	ldr	r3, [r7, #8]
 8001640:	f003 031f 	and.w	r3, r3, #31
 8001644:	211f      	movs	r1, #31
 8001646:	fa01 f303 	lsl.w	r3, r1, r3
 800164a:	43db      	mvns	r3, r3
 800164c:	401a      	ands	r2, r3
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	0e9b      	lsrs	r3, r3, #26
 8001652:	f003 011f 	and.w	r1, r3, #31
 8001656:	68bb      	ldr	r3, [r7, #8]
 8001658:	f003 031f 	and.w	r3, r3, #31
 800165c:	fa01 f303 	lsl.w	r3, r1, r3
 8001660:	431a      	orrs	r2, r3
 8001662:	697b      	ldr	r3, [r7, #20]
 8001664:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001666:	bf00      	nop
 8001668:	371c      	adds	r7, #28
 800166a:	46bd      	mov	sp, r7
 800166c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001670:	4770      	bx	lr

08001672 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001672:	b480      	push	{r7}
 8001674:	b087      	sub	sp, #28
 8001676:	af00      	add	r7, sp, #0
 8001678:	60f8      	str	r0, [r7, #12]
 800167a:	60b9      	str	r1, [r7, #8]
 800167c:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 800167e:	68fb      	ldr	r3, [r7, #12]
 8001680:	3314      	adds	r3, #20
 8001682:	461a      	mov	r2, r3
 8001684:	68bb      	ldr	r3, [r7, #8]
 8001686:	0e5b      	lsrs	r3, r3, #25
 8001688:	009b      	lsls	r3, r3, #2
 800168a:	f003 0304 	and.w	r3, r3, #4
 800168e:	4413      	add	r3, r2
 8001690:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001692:	697b      	ldr	r3, [r7, #20]
 8001694:	681a      	ldr	r2, [r3, #0]
 8001696:	68bb      	ldr	r3, [r7, #8]
 8001698:	0d1b      	lsrs	r3, r3, #20
 800169a:	f003 031f 	and.w	r3, r3, #31
 800169e:	2107      	movs	r1, #7
 80016a0:	fa01 f303 	lsl.w	r3, r1, r3
 80016a4:	43db      	mvns	r3, r3
 80016a6:	401a      	ands	r2, r3
 80016a8:	68bb      	ldr	r3, [r7, #8]
 80016aa:	0d1b      	lsrs	r3, r3, #20
 80016ac:	f003 031f 	and.w	r3, r3, #31
 80016b0:	6879      	ldr	r1, [r7, #4]
 80016b2:	fa01 f303 	lsl.w	r3, r1, r3
 80016b6:	431a      	orrs	r2, r3
 80016b8:	697b      	ldr	r3, [r7, #20]
 80016ba:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80016bc:	bf00      	nop
 80016be:	371c      	adds	r7, #28
 80016c0:	46bd      	mov	sp, r7
 80016c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c6:	4770      	bx	lr

080016c8 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80016c8:	b480      	push	{r7}
 80016ca:	b085      	sub	sp, #20
 80016cc:	af00      	add	r7, sp, #0
 80016ce:	60f8      	str	r0, [r7, #12]
 80016d0:	60b9      	str	r1, [r7, #8]
 80016d2:	607a      	str	r2, [r7, #4]
  /* Bits for single or differential mode selection for each channel are set  */
  /* to 1 only when the differential mode is selected, and to 0 when the      */
  /* single mode is selected.                                                 */
  
  if (SingleDiff == LL_ADC_DIFFERENTIAL_ENDED)
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	4a0f      	ldr	r2, [pc, #60]	; (8001714 <LL_ADC_SetChannelSingleDiff+0x4c>)
 80016d8:	4293      	cmp	r3, r2
 80016da:	d10a      	bne.n	80016f2 <LL_ADC_SetChannelSingleDiff+0x2a>
  {
    SET_BIT(ADCx->DIFSEL,
 80016dc:	68fb      	ldr	r3, [r7, #12]
 80016de:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 80016e2:	68bb      	ldr	r3, [r7, #8]
 80016e4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80016e8:	431a      	orrs	r2, r3
 80016ea:	68fb      	ldr	r3, [r7, #12]
 80016ec:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
  else
  {
    CLEAR_BIT(ADCx->DIFSEL,
            Channel & ADC_SINGLEDIFF_CHANNEL_MASK);
  }
}
 80016f0:	e00a      	b.n	8001708 <LL_ADC_SetChannelSingleDiff+0x40>
    CLEAR_BIT(ADCx->DIFSEL,
 80016f2:	68fb      	ldr	r3, [r7, #12]
 80016f4:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 80016f8:	68bb      	ldr	r3, [r7, #8]
 80016fa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80016fe:	43db      	mvns	r3, r3
 8001700:	401a      	ands	r2, r3
 8001702:	68fb      	ldr	r3, [r7, #12]
 8001704:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
}
 8001708:	bf00      	nop
 800170a:	3714      	adds	r7, #20
 800170c:	46bd      	mov	sp, r7
 800170e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001712:	4770      	bx	lr
 8001714:	407f0000 	.word	0x407f0000

08001718 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001718:	b480      	push	{r7}
 800171a:	b083      	sub	sp, #12
 800171c:	af00      	add	r7, sp, #0
 800171e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	689b      	ldr	r3, [r3, #8]
 8001724:	f003 031f 	and.w	r3, r3, #31
}
 8001728:	4618      	mov	r0, r3
 800172a:	370c      	adds	r7, #12
 800172c:	46bd      	mov	sp, r7
 800172e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001732:	4770      	bx	lr

08001734 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001734:	b480      	push	{r7}
 8001736:	b083      	sub	sp, #12
 8001738:	af00      	add	r7, sp, #0
 800173a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	689b      	ldr	r3, [r3, #8]
 8001740:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
}
 8001744:	4618      	mov	r0, r3
 8001746:	370c      	adds	r7, #12
 8001748:	46bd      	mov	sp, r7
 800174a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800174e:	4770      	bx	lr

08001750 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001750:	b480      	push	{r7}
 8001752:	b083      	sub	sp, #12
 8001754:	af00      	add	r7, sp, #0
 8001756:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	689b      	ldr	r3, [r3, #8]
 800175c:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8001760:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001764:	687a      	ldr	r2, [r7, #4]
 8001766:	6093      	str	r3, [r2, #8]
}
 8001768:	bf00      	nop
 800176a:	370c      	adds	r7, #12
 800176c:	46bd      	mov	sp, r7
 800176e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001772:	4770      	bx	lr

08001774 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8001774:	b480      	push	{r7}
 8001776:	b083      	sub	sp, #12
 8001778:	af00      	add	r7, sp, #0
 800177a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	689b      	ldr	r3, [r3, #8]
 8001780:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001784:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001788:	d101      	bne.n	800178e <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 800178a:	2301      	movs	r3, #1
 800178c:	e000      	b.n	8001790 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 800178e:	2300      	movs	r3, #0
}
 8001790:	4618      	mov	r0, r3
 8001792:	370c      	adds	r7, #12
 8001794:	46bd      	mov	sp, r7
 8001796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800179a:	4770      	bx	lr

0800179c <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 800179c:	b480      	push	{r7}
 800179e:	b083      	sub	sp, #12
 80017a0:	af00      	add	r7, sp, #0
 80017a2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	689b      	ldr	r3, [r3, #8]
 80017a8:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 80017ac:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80017b0:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80017b8:	bf00      	nop
 80017ba:	370c      	adds	r7, #12
 80017bc:	46bd      	mov	sp, r7
 80017be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c2:	4770      	bx	lr

080017c4 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 80017c4:	b480      	push	{r7}
 80017c6:	b083      	sub	sp, #12
 80017c8:	af00      	add	r7, sp, #0
 80017ca:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	689b      	ldr	r3, [r3, #8]
 80017d0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017d4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80017d8:	d101      	bne.n	80017de <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80017da:	2301      	movs	r3, #1
 80017dc:	e000      	b.n	80017e0 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80017de:	2300      	movs	r3, #0
}
 80017e0:	4618      	mov	r0, r3
 80017e2:	370c      	adds	r7, #12
 80017e4:	46bd      	mov	sp, r7
 80017e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ea:	4770      	bx	lr

080017ec <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 80017ec:	b480      	push	{r7}
 80017ee:	b083      	sub	sp, #12
 80017f0:	af00      	add	r7, sp, #0
 80017f2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	689b      	ldr	r3, [r3, #8]
 80017f8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80017fc:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001800:	f043 0201 	orr.w	r2, r3, #1
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8001808:	bf00      	nop
 800180a:	370c      	adds	r7, #12
 800180c:	46bd      	mov	sp, r7
 800180e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001812:	4770      	bx	lr

08001814 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8001814:	b480      	push	{r7}
 8001816:	b083      	sub	sp, #12
 8001818:	af00      	add	r7, sp, #0
 800181a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	689b      	ldr	r3, [r3, #8]
 8001820:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001824:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001828:	f043 0202 	orr.w	r2, r3, #2
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8001830:	bf00      	nop
 8001832:	370c      	adds	r7, #12
 8001834:	46bd      	mov	sp, r7
 8001836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800183a:	4770      	bx	lr

0800183c <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 800183c:	b480      	push	{r7}
 800183e:	b083      	sub	sp, #12
 8001840:	af00      	add	r7, sp, #0
 8001842:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	689b      	ldr	r3, [r3, #8]
 8001848:	f003 0301 	and.w	r3, r3, #1
 800184c:	2b01      	cmp	r3, #1
 800184e:	d101      	bne.n	8001854 <LL_ADC_IsEnabled+0x18>
 8001850:	2301      	movs	r3, #1
 8001852:	e000      	b.n	8001856 <LL_ADC_IsEnabled+0x1a>
 8001854:	2300      	movs	r3, #0
}
 8001856:	4618      	mov	r0, r3
 8001858:	370c      	adds	r7, #12
 800185a:	46bd      	mov	sp, r7
 800185c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001860:	4770      	bx	lr

08001862 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 8001862:	b480      	push	{r7}
 8001864:	b083      	sub	sp, #12
 8001866:	af00      	add	r7, sp, #0
 8001868:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	689b      	ldr	r3, [r3, #8]
 800186e:	f003 0302 	and.w	r3, r3, #2
 8001872:	2b02      	cmp	r3, #2
 8001874:	d101      	bne.n	800187a <LL_ADC_IsDisableOngoing+0x18>
 8001876:	2301      	movs	r3, #1
 8001878:	e000      	b.n	800187c <LL_ADC_IsDisableOngoing+0x1a>
 800187a:	2300      	movs	r3, #0
}
 800187c:	4618      	mov	r0, r3
 800187e:	370c      	adds	r7, #12
 8001880:	46bd      	mov	sp, r7
 8001882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001886:	4770      	bx	lr

08001888 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8001888:	b480      	push	{r7}
 800188a:	b083      	sub	sp, #12
 800188c:	af00      	add	r7, sp, #0
 800188e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	689b      	ldr	r3, [r3, #8]
 8001894:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001898:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800189c:	f043 0204 	orr.w	r2, r3, #4
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 80018a4:	bf00      	nop
 80018a6:	370c      	adds	r7, #12
 80018a8:	46bd      	mov	sp, r7
 80018aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ae:	4770      	bx	lr

080018b0 <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 80018b0:	b480      	push	{r7}
 80018b2:	b083      	sub	sp, #12
 80018b4:	af00      	add	r7, sp, #0
 80018b6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	689b      	ldr	r3, [r3, #8]
 80018bc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80018c0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80018c4:	f043 0210 	orr.w	r2, r3, #16
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 80018cc:	bf00      	nop
 80018ce:	370c      	adds	r7, #12
 80018d0:	46bd      	mov	sp, r7
 80018d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d6:	4770      	bx	lr

080018d8 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80018d8:	b480      	push	{r7}
 80018da:	b083      	sub	sp, #12
 80018dc:	af00      	add	r7, sp, #0
 80018de:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	689b      	ldr	r3, [r3, #8]
 80018e4:	f003 0304 	and.w	r3, r3, #4
 80018e8:	2b04      	cmp	r3, #4
 80018ea:	d101      	bne.n	80018f0 <LL_ADC_REG_IsConversionOngoing+0x18>
 80018ec:	2301      	movs	r3, #1
 80018ee:	e000      	b.n	80018f2 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80018f0:	2300      	movs	r3, #0
}
 80018f2:	4618      	mov	r0, r3
 80018f4:	370c      	adds	r7, #12
 80018f6:	46bd      	mov	sp, r7
 80018f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018fc:	4770      	bx	lr

080018fe <LL_ADC_INJ_StopConversion>:
  * @rmtoll CR       JADSTP         LL_ADC_INJ_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_INJ_StopConversion(ADC_TypeDef *ADCx)
{
 80018fe:	b480      	push	{r7}
 8001900:	b083      	sub	sp, #12
 8001902:	af00      	add	r7, sp, #0
 8001904:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	689b      	ldr	r3, [r3, #8]
 800190a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800190e:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001912:	f043 0220 	orr.w	r2, r3, #32
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_JADSTP);
}
 800191a:	bf00      	nop
 800191c:	370c      	adds	r7, #12
 800191e:	46bd      	mov	sp, r7
 8001920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001924:	4770      	bx	lr

08001926 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001926:	b480      	push	{r7}
 8001928:	b083      	sub	sp, #12
 800192a:	af00      	add	r7, sp, #0
 800192c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	689b      	ldr	r3, [r3, #8]
 8001932:	f003 0308 	and.w	r3, r3, #8
 8001936:	2b08      	cmp	r3, #8
 8001938:	d101      	bne.n	800193e <LL_ADC_INJ_IsConversionOngoing+0x18>
 800193a:	2301      	movs	r3, #1
 800193c:	e000      	b.n	8001940 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 800193e:	2300      	movs	r3, #0
}
 8001940:	4618      	mov	r0, r3
 8001942:	370c      	adds	r7, #12
 8001944:	46bd      	mov	sp, r7
 8001946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800194a:	4770      	bx	lr

0800194c <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 800194c:	b590      	push	{r4, r7, lr}
 800194e:	b089      	sub	sp, #36	; 0x24
 8001950:	af00      	add	r7, sp, #0
 8001952:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001954:	2300      	movs	r3, #0
 8001956:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8001958:	2300      	movs	r3, #0
 800195a:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	2b00      	cmp	r3, #0
 8001960:	d101      	bne.n	8001966 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8001962:	2301      	movs	r3, #1
 8001964:	e177      	b.n	8001c56 <HAL_ADC_Init+0x30a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	695b      	ldr	r3, [r3, #20]
 800196a:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001970:	2b00      	cmp	r3, #0
 8001972:	d109      	bne.n	8001988 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001974:	6878      	ldr	r0, [r7, #4]
 8001976:	f7ff facd 	bl	8000f14 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	2200      	movs	r2, #0
 800197e:	661a      	str	r2, [r3, #96]	; 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	2200      	movs	r2, #0
 8001984:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	4618      	mov	r0, r3
 800198e:	f7ff fef1 	bl	8001774 <LL_ADC_IsDeepPowerDownEnabled>
 8001992:	4603      	mov	r3, r0
 8001994:	2b00      	cmp	r3, #0
 8001996:	d004      	beq.n	80019a2 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	4618      	mov	r0, r3
 800199e:	f7ff fed7 	bl	8001750 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	4618      	mov	r0, r3
 80019a8:	f7ff ff0c 	bl	80017c4 <LL_ADC_IsInternalRegulatorEnabled>
 80019ac:	4603      	mov	r3, r0
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	d115      	bne.n	80019de <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	4618      	mov	r0, r3
 80019b8:	f7ff fef0 	bl	800179c <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80019bc:	4b9c      	ldr	r3, [pc, #624]	; (8001c30 <HAL_ADC_Init+0x2e4>)
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	099b      	lsrs	r3, r3, #6
 80019c2:	4a9c      	ldr	r2, [pc, #624]	; (8001c34 <HAL_ADC_Init+0x2e8>)
 80019c4:	fba2 2303 	umull	r2, r3, r2, r3
 80019c8:	099b      	lsrs	r3, r3, #6
 80019ca:	3301      	adds	r3, #1
 80019cc:	005b      	lsls	r3, r3, #1
 80019ce:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80019d0:	e002      	b.n	80019d8 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 80019d2:	68bb      	ldr	r3, [r7, #8]
 80019d4:	3b01      	subs	r3, #1
 80019d6:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80019d8:	68bb      	ldr	r3, [r7, #8]
 80019da:	2b00      	cmp	r3, #0
 80019dc:	d1f9      	bne.n	80019d2 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	4618      	mov	r0, r3
 80019e4:	f7ff feee 	bl	80017c4 <LL_ADC_IsInternalRegulatorEnabled>
 80019e8:	4603      	mov	r3, r0
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	d10d      	bne.n	8001a0a <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80019f2:	f043 0210 	orr.w	r2, r3, #16
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80019fe:	f043 0201 	orr.w	r2, r3, #1
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 8001a06:	2301      	movs	r3, #1
 8001a08:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	4618      	mov	r0, r3
 8001a10:	f7ff ff62 	bl	80018d8 <LL_ADC_REG_IsConversionOngoing>
 8001a14:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a1a:	f003 0310 	and.w	r3, r3, #16
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	f040 8110 	bne.w	8001c44 <HAL_ADC_Init+0x2f8>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8001a24:	697b      	ldr	r3, [r7, #20]
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	f040 810c 	bne.w	8001c44 <HAL_ADC_Init+0x2f8>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a30:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8001a34:	f043 0202 	orr.w	r2, r3, #2
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	4618      	mov	r0, r3
 8001a42:	f7ff fefb 	bl	800183c <LL_ADC_IsEnabled>
 8001a46:	4603      	mov	r3, r0
 8001a48:	2b00      	cmp	r3, #0
 8001a4a:	d111      	bne.n	8001a70 <HAL_ADC_Init+0x124>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001a4c:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8001a50:	f7ff fef4 	bl	800183c <LL_ADC_IsEnabled>
 8001a54:	4604      	mov	r4, r0
 8001a56:	4878      	ldr	r0, [pc, #480]	; (8001c38 <HAL_ADC_Init+0x2ec>)
 8001a58:	f7ff fef0 	bl	800183c <LL_ADC_IsEnabled>
 8001a5c:	4603      	mov	r3, r0
 8001a5e:	4323      	orrs	r3, r4
 8001a60:	2b00      	cmp	r3, #0
 8001a62:	d105      	bne.n	8001a70 <HAL_ADC_Init+0x124>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	685b      	ldr	r3, [r3, #4]
 8001a68:	4619      	mov	r1, r3
 8001a6a:	4874      	ldr	r0, [pc, #464]	; (8001c3c <HAL_ADC_Init+0x2f0>)
 8001a6c:	f7ff fcf0 	bl	8001450 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	7f5b      	ldrb	r3, [r3, #29]
 8001a74:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001a7a:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8001a80:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 8001a86:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001a8e:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001a90:	4313      	orrs	r3, r2
 8001a92:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001a9a:	2b01      	cmp	r3, #1
 8001a9c:	d106      	bne.n	8001aac <HAL_ADC_Init+0x160>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001aa2:	3b01      	subs	r3, #1
 8001aa4:	045b      	lsls	r3, r3, #17
 8001aa6:	69ba      	ldr	r2, [r7, #24]
 8001aa8:	4313      	orrs	r3, r2
 8001aaa:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	d009      	beq.n	8001ac8 <HAL_ADC_Init+0x17c>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ab8:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ac0:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001ac2:	69ba      	ldr	r2, [r7, #24]
 8001ac4:	4313      	orrs	r3, r2
 8001ac6:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	68da      	ldr	r2, [r3, #12]
 8001ace:	4b5c      	ldr	r3, [pc, #368]	; (8001c40 <HAL_ADC_Init+0x2f4>)
 8001ad0:	4013      	ands	r3, r2
 8001ad2:	687a      	ldr	r2, [r7, #4]
 8001ad4:	6812      	ldr	r2, [r2, #0]
 8001ad6:	69b9      	ldr	r1, [r7, #24]
 8001ad8:	430b      	orrs	r3, r1
 8001ada:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	691b      	ldr	r3, [r3, #16]
 8001ae2:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	430a      	orrs	r2, r1
 8001af0:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	4618      	mov	r0, r3
 8001af8:	f7ff feee 	bl	80018d8 <LL_ADC_REG_IsConversionOngoing>
 8001afc:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	4618      	mov	r0, r3
 8001b04:	f7ff ff0f 	bl	8001926 <LL_ADC_INJ_IsConversionOngoing>
 8001b08:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001b0a:	693b      	ldr	r3, [r7, #16]
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	d16d      	bne.n	8001bec <HAL_ADC_Init+0x2a0>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001b10:	68fb      	ldr	r3, [r7, #12]
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d16a      	bne.n	8001bec <HAL_ADC_Init+0x2a0>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	7f1b      	ldrb	r3, [r3, #28]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8001b1a:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001b22:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8001b24:	4313      	orrs	r3, r2
 8001b26:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	68db      	ldr	r3, [r3, #12]
 8001b2e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001b32:	f023 0302 	bic.w	r3, r3, #2
 8001b36:	687a      	ldr	r2, [r7, #4]
 8001b38:	6812      	ldr	r2, [r2, #0]
 8001b3a:	69b9      	ldr	r1, [r7, #24]
 8001b3c:	430b      	orrs	r3, r1
 8001b3e:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	691b      	ldr	r3, [r3, #16]
 8001b44:	2b00      	cmp	r3, #0
 8001b46:	d017      	beq.n	8001b78 <HAL_ADC_Init+0x22c>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	691a      	ldr	r2, [r3, #16]
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8001b56:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8001b60:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8001b64:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001b68:	687a      	ldr	r2, [r7, #4]
 8001b6a:	6911      	ldr	r1, [r2, #16]
 8001b6c:	687a      	ldr	r2, [r7, #4]
 8001b6e:	6812      	ldr	r2, [r2, #0]
 8001b70:	430b      	orrs	r3, r1
 8001b72:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
 8001b76:	e013      	b.n	8001ba0 <HAL_ADC_Init+0x254>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	691a      	ldr	r2, [r3, #16]
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8001b86:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8001b90:	687a      	ldr	r2, [r7, #4]
 8001b92:	6812      	ldr	r2, [r2, #0]
 8001b94:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8001b98:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001b9c:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001ba6:	2b01      	cmp	r3, #1
 8001ba8:	d118      	bne.n	8001bdc <HAL_ADC_Init+0x290>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	691b      	ldr	r3, [r3, #16]
 8001bb0:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8001bb4:	f023 0304 	bic.w	r3, r3, #4
 8001bb8:	687a      	ldr	r2, [r7, #4]
 8001bba:	6c51      	ldr	r1, [r2, #68]	; 0x44
 8001bbc:	687a      	ldr	r2, [r7, #4]
 8001bbe:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8001bc0:	4311      	orrs	r1, r2
 8001bc2:	687a      	ldr	r2, [r7, #4]
 8001bc4:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8001bc6:	4311      	orrs	r1, r2
 8001bc8:	687a      	ldr	r2, [r7, #4]
 8001bca:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8001bcc:	430a      	orrs	r2, r1
 8001bce:	431a      	orrs	r2, r3
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	f042 0201 	orr.w	r2, r2, #1
 8001bd8:	611a      	str	r2, [r3, #16]
 8001bda:	e007      	b.n	8001bec <HAL_ADC_Init+0x2a0>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	691a      	ldr	r2, [r3, #16]
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	f022 0201 	bic.w	r2, r2, #1
 8001bea:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	695b      	ldr	r3, [r3, #20]
 8001bf0:	2b01      	cmp	r3, #1
 8001bf2:	d10c      	bne.n	8001c0e <HAL_ADC_Init+0x2c2>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bfa:	f023 010f 	bic.w	r1, r3, #15
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	6a1b      	ldr	r3, [r3, #32]
 8001c02:	1e5a      	subs	r2, r3, #1
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	430a      	orrs	r2, r1
 8001c0a:	631a      	str	r2, [r3, #48]	; 0x30
 8001c0c:	e007      	b.n	8001c1e <HAL_ADC_Init+0x2d2>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	f022 020f 	bic.w	r2, r2, #15
 8001c1c:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c22:	f023 0303 	bic.w	r3, r3, #3
 8001c26:	f043 0201 	orr.w	r2, r3, #1
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	65da      	str	r2, [r3, #92]	; 0x5c
 8001c2e:	e011      	b.n	8001c54 <HAL_ADC_Init+0x308>
 8001c30:	20000000 	.word	0x20000000
 8001c34:	053e2d63 	.word	0x053e2d63
 8001c38:	50000100 	.word	0x50000100
 8001c3c:	50000300 	.word	0x50000300
 8001c40:	fff04007 	.word	0xfff04007
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c48:	f043 0210 	orr.w	r2, r3, #16
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8001c50:	2301      	movs	r3, #1
 8001c52:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8001c54:	7ffb      	ldrb	r3, [r7, #31]
}
 8001c56:	4618      	mov	r0, r3
 8001c58:	3724      	adds	r7, #36	; 0x24
 8001c5a:	46bd      	mov	sp, r7
 8001c5c:	bd90      	pop	{r4, r7, pc}
 8001c5e:	bf00      	nop

08001c60 <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8001c60:	b580      	push	{r7, lr}
 8001c62:	b086      	sub	sp, #24
 8001c64:	af00      	add	r7, sp, #0
 8001c66:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001c68:	4859      	ldr	r0, [pc, #356]	; (8001dd0 <HAL_ADC_Start+0x170>)
 8001c6a:	f7ff fd55 	bl	8001718 <LL_ADC_GetMultimode>
 8001c6e:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	4618      	mov	r0, r3
 8001c76:	f7ff fe2f 	bl	80018d8 <LL_ADC_REG_IsConversionOngoing>
 8001c7a:	4603      	mov	r3, r0
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	f040 809f 	bne.w	8001dc0 <HAL_ADC_Start+0x160>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8001c88:	2b01      	cmp	r3, #1
 8001c8a:	d101      	bne.n	8001c90 <HAL_ADC_Start+0x30>
 8001c8c:	2302      	movs	r3, #2
 8001c8e:	e09a      	b.n	8001dc6 <HAL_ADC_Start+0x166>
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	2201      	movs	r2, #1
 8001c94:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8001c98:	6878      	ldr	r0, [r7, #4]
 8001c9a:	f000 fe63 	bl	8002964 <ADC_Enable>
 8001c9e:	4603      	mov	r3, r0
 8001ca0:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8001ca2:	7dfb      	ldrb	r3, [r7, #23]
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	f040 8086 	bne.w	8001db6 <HAL_ADC_Start+0x156>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001cae:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001cb2:	f023 0301 	bic.w	r3, r3, #1
 8001cb6:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	65da      	str	r2, [r3, #92]	; 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	4a44      	ldr	r2, [pc, #272]	; (8001dd4 <HAL_ADC_Start+0x174>)
 8001cc4:	4293      	cmp	r3, r2
 8001cc6:	d002      	beq.n	8001cce <HAL_ADC_Start+0x6e>
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	e001      	b.n	8001cd2 <HAL_ADC_Start+0x72>
 8001cce:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8001cd2:	687a      	ldr	r2, [r7, #4]
 8001cd4:	6812      	ldr	r2, [r2, #0]
 8001cd6:	4293      	cmp	r3, r2
 8001cd8:	d002      	beq.n	8001ce0 <HAL_ADC_Start+0x80>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001cda:	693b      	ldr	r3, [r7, #16]
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	d105      	bne.n	8001cec <HAL_ADC_Start+0x8c>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ce4:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	65da      	str	r2, [r3, #92]	; 0x5c
      }
#endif

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001cf0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001cf4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001cf8:	d106      	bne.n	8001d08 <HAL_ADC_Start+0xa8>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001cfe:	f023 0206 	bic.w	r2, r3, #6
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	661a      	str	r2, [r3, #96]	; 0x60
 8001d06:	e002      	b.n	8001d0e <HAL_ADC_Start+0xae>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	2200      	movs	r2, #0
 8001d0c:	661a      	str	r2, [r3, #96]	; 0x60
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	221c      	movs	r2, #28
 8001d14:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	2200      	movs	r2, #0
 8001d1a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	4a2c      	ldr	r2, [pc, #176]	; (8001dd4 <HAL_ADC_Start+0x174>)
 8001d24:	4293      	cmp	r3, r2
 8001d26:	d002      	beq.n	8001d2e <HAL_ADC_Start+0xce>
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	e001      	b.n	8001d32 <HAL_ADC_Start+0xd2>
 8001d2e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8001d32:	687a      	ldr	r2, [r7, #4]
 8001d34:	6812      	ldr	r2, [r2, #0]
 8001d36:	4293      	cmp	r3, r2
 8001d38:	d008      	beq.n	8001d4c <HAL_ADC_Start+0xec>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001d3a:	693b      	ldr	r3, [r7, #16]
 8001d3c:	2b00      	cmp	r3, #0
 8001d3e:	d005      	beq.n	8001d4c <HAL_ADC_Start+0xec>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8001d40:	693b      	ldr	r3, [r7, #16]
 8001d42:	2b05      	cmp	r3, #5
 8001d44:	d002      	beq.n	8001d4c <HAL_ADC_Start+0xec>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8001d46:	693b      	ldr	r3, [r7, #16]
 8001d48:	2b09      	cmp	r3, #9
 8001d4a:	d114      	bne.n	8001d76 <HAL_ADC_Start+0x116>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	68db      	ldr	r3, [r3, #12]
 8001d52:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d007      	beq.n	8001d6a <HAL_ADC_Start+0x10a>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d5e:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001d62:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	65da      	str	r2, [r3, #92]	; 0x5c
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	4618      	mov	r0, r3
 8001d70:	f7ff fd8a 	bl	8001888 <LL_ADC_REG_StartConversion>
 8001d74:	e026      	b.n	8001dc4 <HAL_ADC_Start+0x164>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d7a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	65da      	str	r2, [r3, #92]	; 0x5c
        /* if Master ADC JAUTO bit is set, update Slave State in setting
           HAL_ADC_STATE_INJ_BUSY bit and in resetting HAL_ADC_STATE_INJ_EOC bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	4a13      	ldr	r2, [pc, #76]	; (8001dd4 <HAL_ADC_Start+0x174>)
 8001d88:	4293      	cmp	r3, r2
 8001d8a:	d002      	beq.n	8001d92 <HAL_ADC_Start+0x132>
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	e001      	b.n	8001d96 <HAL_ADC_Start+0x136>
 8001d92:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8001d96:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8001d98:	68fb      	ldr	r3, [r7, #12]
 8001d9a:	68db      	ldr	r3, [r3, #12]
 8001d9c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	d00f      	beq.n	8001dc4 <HAL_ADC_Start+0x164>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001da8:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001dac:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	65da      	str	r2, [r3, #92]	; 0x5c
 8001db4:	e006      	b.n	8001dc4 <HAL_ADC_Start+0x164>
#endif
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	2200      	movs	r2, #0
 8001dba:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
 8001dbe:	e001      	b.n	8001dc4 <HAL_ADC_Start+0x164>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8001dc0:	2302      	movs	r3, #2
 8001dc2:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8001dc4:	7dfb      	ldrb	r3, [r7, #23]
}
 8001dc6:	4618      	mov	r0, r3
 8001dc8:	3718      	adds	r7, #24
 8001dca:	46bd      	mov	sp, r7
 8001dcc:	bd80      	pop	{r7, pc}
 8001dce:	bf00      	nop
 8001dd0:	50000300 	.word	0x50000300
 8001dd4:	50000100 	.word	0x50000100

08001dd8 <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 8001dd8:	b580      	push	{r7, lr}
 8001dda:	b084      	sub	sp, #16
 8001ddc:	af00      	add	r7, sp, #0
 8001dde:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8001de6:	2b01      	cmp	r3, #1
 8001de8:	d101      	bne.n	8001dee <HAL_ADC_Stop+0x16>
 8001dea:	2302      	movs	r3, #2
 8001dec:	e023      	b.n	8001e36 <HAL_ADC_Stop+0x5e>
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	2201      	movs	r2, #1
 8001df2:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* 1. Stop potential conversion on going, on ADC groups regular and injected */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 8001df6:	2103      	movs	r1, #3
 8001df8:	6878      	ldr	r0, [r7, #4]
 8001dfa:	f000 fcf7 	bl	80027ec <ADC_ConversionStop>
 8001dfe:	4603      	mov	r3, r0
 8001e00:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 8001e02:	7bfb      	ldrb	r3, [r7, #15]
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	d111      	bne.n	8001e2c <HAL_ADC_Stop+0x54>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 8001e08:	6878      	ldr	r0, [r7, #4]
 8001e0a:	f000 fe0d 	bl	8002a28 <ADC_Disable>
 8001e0e:	4603      	mov	r3, r0
 8001e10:	73fb      	strb	r3, [r7, #15]

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 8001e12:	7bfb      	ldrb	r3, [r7, #15]
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	d109      	bne.n	8001e2c <HAL_ADC_Stop+0x54>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e1c:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001e20:	f023 0301 	bic.w	r3, r3, #1
 8001e24:	f043 0201 	orr.w	r2, r3, #1
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	65da      	str	r2, [r3, #92]	; 0x5c
                        HAL_ADC_STATE_READY);
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	2200      	movs	r2, #0
 8001e30:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8001e34:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e36:	4618      	mov	r0, r3
 8001e38:	3710      	adds	r7, #16
 8001e3a:	46bd      	mov	sp, r7
 8001e3c:	bd80      	pop	{r7, pc}
	...

08001e40 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8001e40:	b580      	push	{r7, lr}
 8001e42:	b088      	sub	sp, #32
 8001e44:	af00      	add	r7, sp, #0
 8001e46:	6078      	str	r0, [r7, #4]
 8001e48:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_End;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001e4a:	4867      	ldr	r0, [pc, #412]	; (8001fe8 <HAL_ADC_PollForConversion+0x1a8>)
 8001e4c:	f7ff fc64 	bl	8001718 <LL_ADC_GetMultimode>
 8001e50:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	699b      	ldr	r3, [r3, #24]
 8001e56:	2b08      	cmp	r3, #8
 8001e58:	d102      	bne.n	8001e60 <HAL_ADC_PollForConversion+0x20>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 8001e5a:	2308      	movs	r3, #8
 8001e5c:	61fb      	str	r3, [r7, #28]
 8001e5e:	e02a      	b.n	8001eb6 <HAL_ADC_PollForConversion+0x76>
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001e60:	697b      	ldr	r3, [r7, #20]
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d005      	beq.n	8001e72 <HAL_ADC_PollForConversion+0x32>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8001e66:	697b      	ldr	r3, [r7, #20]
 8001e68:	2b05      	cmp	r3, #5
 8001e6a:	d002      	beq.n	8001e72 <HAL_ADC_PollForConversion+0x32>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8001e6c:	697b      	ldr	r3, [r7, #20]
 8001e6e:	2b09      	cmp	r3, #9
 8001e70:	d111      	bne.n	8001e96 <HAL_ADC_PollForConversion+0x56>
       )
    {
      /* Check ADC DMA mode in independent mode on ADC group regular */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	68db      	ldr	r3, [r3, #12]
 8001e78:	f003 0301 	and.w	r3, r3, #1
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	d007      	beq.n	8001e90 <HAL_ADC_PollForConversion+0x50>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e84:	f043 0220 	orr.w	r2, r3, #32
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	65da      	str	r2, [r3, #92]	; 0x5c
        return HAL_ERROR;
 8001e8c:	2301      	movs	r3, #1
 8001e8e:	e0a6      	b.n	8001fde <HAL_ADC_PollForConversion+0x19e>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 8001e90:	2304      	movs	r3, #4
 8001e92:	61fb      	str	r3, [r7, #28]
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 8001e94:	e00f      	b.n	8001eb6 <HAL_ADC_PollForConversion+0x76>
      }
    }
    else
    {
      /* Check ADC DMA mode in multimode on ADC group regular */
      if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8001e96:	4854      	ldr	r0, [pc, #336]	; (8001fe8 <HAL_ADC_PollForConversion+0x1a8>)
 8001e98:	f7ff fc4c 	bl	8001734 <LL_ADC_GetMultiDMATransfer>
 8001e9c:	4603      	mov	r3, r0
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	d007      	beq.n	8001eb2 <HAL_ADC_PollForConversion+0x72>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ea6:	f043 0220 	orr.w	r2, r3, #32
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	65da      	str	r2, [r3, #92]	; 0x5c
        return HAL_ERROR;
 8001eae:	2301      	movs	r3, #1
 8001eb0:	e095      	b.n	8001fde <HAL_ADC_PollForConversion+0x19e>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 8001eb2:	2304      	movs	r3, #4
 8001eb4:	61fb      	str	r3, [r7, #28]
    }
#endif
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 8001eb6:	f7ff fa9d 	bl	80013f4 <HAL_GetTick>
 8001eba:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8001ebc:	e021      	b.n	8001f02 <HAL_ADC_PollForConversion+0xc2>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8001ebe:	683b      	ldr	r3, [r7, #0]
 8001ec0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ec4:	d01d      	beq.n	8001f02 <HAL_ADC_PollForConversion+0xc2>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 8001ec6:	f7ff fa95 	bl	80013f4 <HAL_GetTick>
 8001eca:	4602      	mov	r2, r0
 8001ecc:	693b      	ldr	r3, [r7, #16]
 8001ece:	1ad3      	subs	r3, r2, r3
 8001ed0:	683a      	ldr	r2, [r7, #0]
 8001ed2:	429a      	cmp	r2, r3
 8001ed4:	d302      	bcc.n	8001edc <HAL_ADC_PollForConversion+0x9c>
 8001ed6:	683b      	ldr	r3, [r7, #0]
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	d112      	bne.n	8001f02 <HAL_ADC_PollForConversion+0xc2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	681a      	ldr	r2, [r3, #0]
 8001ee2:	69fb      	ldr	r3, [r7, #28]
 8001ee4:	4013      	ands	r3, r2
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d10b      	bne.n	8001f02 <HAL_ADC_PollForConversion+0xc2>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001eee:	f043 0204 	orr.w	r2, r3, #4
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	2200      	movs	r2, #0
 8001efa:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

          return HAL_TIMEOUT;
 8001efe:	2303      	movs	r3, #3
 8001f00:	e06d      	b.n	8001fde <HAL_ADC_PollForConversion+0x19e>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	681a      	ldr	r2, [r3, #0]
 8001f08:	69fb      	ldr	r3, [r7, #28]
 8001f0a:	4013      	ands	r3, r2
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	d0d6      	beq.n	8001ebe <HAL_ADC_PollForConversion+0x7e>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f14:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	4618      	mov	r0, r3
 8001f22:	f7ff fb67 	bl	80015f4 <LL_ADC_REG_IsTriggerSourceSWStart>
 8001f26:	4603      	mov	r3, r0
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	d01c      	beq.n	8001f66 <HAL_ADC_PollForConversion+0x126>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	7f5b      	ldrb	r3, [r3, #29]
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	d118      	bne.n	8001f66 <HAL_ADC_PollForConversion+0x126>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	f003 0308 	and.w	r3, r3, #8
 8001f3e:	2b08      	cmp	r3, #8
 8001f40:	d111      	bne.n	8001f66 <HAL_ADC_PollForConversion+0x126>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f46:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	65da      	str	r2, [r3, #92]	; 0x5c

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f52:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d105      	bne.n	8001f66 <HAL_ADC_PollForConversion+0x126>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f5e:	f043 0201 	orr.w	r2, r3, #1
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Get relevant register CFGR in ADC instance of ADC master or slave        */
  /* in function of multimode state (for devices with multimode               */
  /* available).                                                              */
#if defined(ADC_MULTIMODE_SUPPORT)
  if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	4a20      	ldr	r2, [pc, #128]	; (8001fec <HAL_ADC_PollForConversion+0x1ac>)
 8001f6c:	4293      	cmp	r3, r2
 8001f6e:	d002      	beq.n	8001f76 <HAL_ADC_PollForConversion+0x136>
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	e001      	b.n	8001f7a <HAL_ADC_PollForConversion+0x13a>
 8001f76:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8001f7a:	687a      	ldr	r2, [r7, #4]
 8001f7c:	6812      	ldr	r2, [r2, #0]
 8001f7e:	4293      	cmp	r3, r2
 8001f80:	d008      	beq.n	8001f94 <HAL_ADC_PollForConversion+0x154>
      || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001f82:	697b      	ldr	r3, [r7, #20]
 8001f84:	2b00      	cmp	r3, #0
 8001f86:	d005      	beq.n	8001f94 <HAL_ADC_PollForConversion+0x154>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8001f88:	697b      	ldr	r3, [r7, #20]
 8001f8a:	2b05      	cmp	r3, #5
 8001f8c:	d002      	beq.n	8001f94 <HAL_ADC_PollForConversion+0x154>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8001f8e:	697b      	ldr	r3, [r7, #20]
 8001f90:	2b09      	cmp	r3, #9
 8001f92:	d104      	bne.n	8001f9e <HAL_ADC_PollForConversion+0x15e>
     )
  {
    /* Retrieve handle ADC CFGR register */
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	68db      	ldr	r3, [r3, #12]
 8001f9a:	61bb      	str	r3, [r7, #24]
 8001f9c:	e00d      	b.n	8001fba <HAL_ADC_PollForConversion+0x17a>
  }
  else
  {
    /* Retrieve Master ADC CFGR register */
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	4a12      	ldr	r2, [pc, #72]	; (8001fec <HAL_ADC_PollForConversion+0x1ac>)
 8001fa4:	4293      	cmp	r3, r2
 8001fa6:	d002      	beq.n	8001fae <HAL_ADC_PollForConversion+0x16e>
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	e001      	b.n	8001fb2 <HAL_ADC_PollForConversion+0x172>
 8001fae:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8001fb2:	60fb      	str	r3, [r7, #12]
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8001fb4:	68fb      	ldr	r3, [r7, #12]
 8001fb6:	68db      	ldr	r3, [r3, #12]
 8001fb8:	61bb      	str	r3, [r7, #24]
  /* Retrieve handle ADC CFGR register */
  tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 8001fba:	69fb      	ldr	r3, [r7, #28]
 8001fbc:	2b08      	cmp	r3, #8
 8001fbe:	d104      	bne.n	8001fca <HAL_ADC_PollForConversion+0x18a>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	2208      	movs	r2, #8
 8001fc6:	601a      	str	r2, [r3, #0]
 8001fc8:	e008      	b.n	8001fdc <HAL_ADC_PollForConversion+0x19c>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 8001fca:	69bb      	ldr	r3, [r7, #24]
 8001fcc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	d103      	bne.n	8001fdc <HAL_ADC_PollForConversion+0x19c>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	220c      	movs	r2, #12
 8001fda:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 8001fdc:	2300      	movs	r3, #0
}
 8001fde:	4618      	mov	r0, r3
 8001fe0:	3720      	adds	r7, #32
 8001fe2:	46bd      	mov	sp, r7
 8001fe4:	bd80      	pop	{r7, pc}
 8001fe6:	bf00      	nop
 8001fe8:	50000300 	.word	0x50000300
 8001fec:	50000100 	.word	0x50000100

08001ff0 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8001ff0:	b480      	push	{r7}
 8001ff2:	b083      	sub	sp, #12
 8001ff4:	af00      	add	r7, sp, #0
 8001ff6:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8001ffe:	4618      	mov	r0, r3
 8002000:	370c      	adds	r7, #12
 8002002:	46bd      	mov	sp, r7
 8002004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002008:	4770      	bx	lr
	...

0800200c <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 800200c:	b580      	push	{r7, lr}
 800200e:	b0b6      	sub	sp, #216	; 0xd8
 8002010:	af00      	add	r7, sp, #0
 8002012:	6078      	str	r0, [r7, #4]
 8002014:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002016:	2300      	movs	r3, #0
 8002018:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 800201c:	2300      	movs	r3, #0
 800201e:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8002026:	2b01      	cmp	r3, #1
 8002028:	d101      	bne.n	800202e <HAL_ADC_ConfigChannel+0x22>
 800202a:	2302      	movs	r3, #2
 800202c:	e3c8      	b.n	80027c0 <HAL_ADC_ConfigChannel+0x7b4>
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	2201      	movs	r2, #1
 8002032:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	4618      	mov	r0, r3
 800203c:	f7ff fc4c 	bl	80018d8 <LL_ADC_REG_IsConversionOngoing>
 8002040:	4603      	mov	r3, r0
 8002042:	2b00      	cmp	r3, #0
 8002044:	f040 83ad 	bne.w	80027a2 <HAL_ADC_ConfigChannel+0x796>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	6818      	ldr	r0, [r3, #0]
 800204c:	683b      	ldr	r3, [r7, #0]
 800204e:	6859      	ldr	r1, [r3, #4]
 8002050:	683b      	ldr	r3, [r7, #0]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	461a      	mov	r2, r3
 8002056:	f7ff fae0 	bl	800161a <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	4618      	mov	r0, r3
 8002060:	f7ff fc3a 	bl	80018d8 <LL_ADC_REG_IsConversionOngoing>
 8002064:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	4618      	mov	r0, r3
 800206e:	f7ff fc5a 	bl	8001926 <LL_ADC_INJ_IsConversionOngoing>
 8002072:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002076:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800207a:	2b00      	cmp	r3, #0
 800207c:	f040 81d9 	bne.w	8002432 <HAL_ADC_ConfigChannel+0x426>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002080:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8002084:	2b00      	cmp	r3, #0
 8002086:	f040 81d4 	bne.w	8002432 <HAL_ADC_ConfigChannel+0x426>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 800208a:	683b      	ldr	r3, [r7, #0]
 800208c:	689b      	ldr	r3, [r3, #8]
 800208e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002092:	d10f      	bne.n	80020b4 <HAL_ADC_ConfigChannel+0xa8>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	6818      	ldr	r0, [r3, #0]
 8002098:	683b      	ldr	r3, [r7, #0]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	2200      	movs	r2, #0
 800209e:	4619      	mov	r1, r3
 80020a0:	f7ff fae7 	bl	8001672 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 80020ac:	4618      	mov	r0, r3
 80020ae:	f7ff fa8e 	bl	80015ce <LL_ADC_SetSamplingTimeCommonConfig>
 80020b2:	e00e      	b.n	80020d2 <HAL_ADC_ConfigChannel+0xc6>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	6818      	ldr	r0, [r3, #0]
 80020b8:	683b      	ldr	r3, [r7, #0]
 80020ba:	6819      	ldr	r1, [r3, #0]
 80020bc:	683b      	ldr	r3, [r7, #0]
 80020be:	689b      	ldr	r3, [r3, #8]
 80020c0:	461a      	mov	r2, r3
 80020c2:	f7ff fad6 	bl	8001672 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	2100      	movs	r1, #0
 80020cc:	4618      	mov	r0, r3
 80020ce:	f7ff fa7e 	bl	80015ce <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 80020d2:	683b      	ldr	r3, [r7, #0]
 80020d4:	695a      	ldr	r2, [r3, #20]
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	68db      	ldr	r3, [r3, #12]
 80020dc:	08db      	lsrs	r3, r3, #3
 80020de:	f003 0303 	and.w	r3, r3, #3
 80020e2:	005b      	lsls	r3, r3, #1
 80020e4:	fa02 f303 	lsl.w	r3, r2, r3
 80020e8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 80020ec:	683b      	ldr	r3, [r7, #0]
 80020ee:	691b      	ldr	r3, [r3, #16]
 80020f0:	2b04      	cmp	r3, #4
 80020f2:	d022      	beq.n	800213a <HAL_ADC_ConfigChannel+0x12e>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	6818      	ldr	r0, [r3, #0]
 80020f8:	683b      	ldr	r3, [r7, #0]
 80020fa:	6919      	ldr	r1, [r3, #16]
 80020fc:	683b      	ldr	r3, [r7, #0]
 80020fe:	681a      	ldr	r2, [r3, #0]
 8002100:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8002104:	f7ff f9d8 	bl	80014b8 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(sConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, sConfig->OffsetNumber, sConfig->OffsetSign);
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	6818      	ldr	r0, [r3, #0]
 800210c:	683b      	ldr	r3, [r7, #0]
 800210e:	6919      	ldr	r1, [r3, #16]
 8002110:	683b      	ldr	r3, [r7, #0]
 8002112:	699b      	ldr	r3, [r3, #24]
 8002114:	461a      	mov	r2, r3
 8002116:	f7ff fa24 	bl	8001562 <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	6818      	ldr	r0, [r3, #0]
 800211e:	683b      	ldr	r3, [r7, #0]
 8002120:	6919      	ldr	r1, [r3, #16]
 8002122:	683b      	ldr	r3, [r7, #0]
 8002124:	7f1b      	ldrb	r3, [r3, #28]
 8002126:	2b01      	cmp	r3, #1
 8002128:	d102      	bne.n	8002130 <HAL_ADC_ConfigChannel+0x124>
 800212a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800212e:	e000      	b.n	8002132 <HAL_ADC_ConfigChannel+0x126>
 8002130:	2300      	movs	r3, #0
 8002132:	461a      	mov	r2, r3
 8002134:	f7ff fa30 	bl	8001598 <LL_ADC_SetOffsetSaturation>
 8002138:	e17b      	b.n	8002432 <HAL_ADC_ConfigChannel+0x426>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	2100      	movs	r1, #0
 8002140:	4618      	mov	r0, r3
 8002142:	f7ff f9dd 	bl	8001500 <LL_ADC_GetOffsetChannel>
 8002146:	4603      	mov	r3, r0
 8002148:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800214c:	2b00      	cmp	r3, #0
 800214e:	d10a      	bne.n	8002166 <HAL_ADC_ConfigChannel+0x15a>
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	2100      	movs	r1, #0
 8002156:	4618      	mov	r0, r3
 8002158:	f7ff f9d2 	bl	8001500 <LL_ADC_GetOffsetChannel>
 800215c:	4603      	mov	r3, r0
 800215e:	0e9b      	lsrs	r3, r3, #26
 8002160:	f003 021f 	and.w	r2, r3, #31
 8002164:	e01e      	b.n	80021a4 <HAL_ADC_ConfigChannel+0x198>
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	2100      	movs	r1, #0
 800216c:	4618      	mov	r0, r3
 800216e:	f7ff f9c7 	bl	8001500 <LL_ADC_GetOffsetChannel>
 8002172:	4603      	mov	r3, r0
 8002174:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002178:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800217c:	fa93 f3a3 	rbit	r3, r3
 8002180:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002184:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8002188:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 800218c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002190:	2b00      	cmp	r3, #0
 8002192:	d101      	bne.n	8002198 <HAL_ADC_ConfigChannel+0x18c>
  {
    return 32U;
 8002194:	2320      	movs	r3, #32
 8002196:	e004      	b.n	80021a2 <HAL_ADC_ConfigChannel+0x196>
  }
  return __builtin_clz(value);
 8002198:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800219c:	fab3 f383 	clz	r3, r3
 80021a0:	b2db      	uxtb	r3, r3
 80021a2:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80021a4:	683b      	ldr	r3, [r7, #0]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	d105      	bne.n	80021bc <HAL_ADC_ConfigChannel+0x1b0>
 80021b0:	683b      	ldr	r3, [r7, #0]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	0e9b      	lsrs	r3, r3, #26
 80021b6:	f003 031f 	and.w	r3, r3, #31
 80021ba:	e018      	b.n	80021ee <HAL_ADC_ConfigChannel+0x1e2>
 80021bc:	683b      	ldr	r3, [r7, #0]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021c4:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80021c8:	fa93 f3a3 	rbit	r3, r3
 80021cc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 80021d0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80021d4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 80021d8:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80021dc:	2b00      	cmp	r3, #0
 80021de:	d101      	bne.n	80021e4 <HAL_ADC_ConfigChannel+0x1d8>
    return 32U;
 80021e0:	2320      	movs	r3, #32
 80021e2:	e004      	b.n	80021ee <HAL_ADC_ConfigChannel+0x1e2>
  return __builtin_clz(value);
 80021e4:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80021e8:	fab3 f383 	clz	r3, r3
 80021ec:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80021ee:	429a      	cmp	r2, r3
 80021f0:	d106      	bne.n	8002200 <HAL_ADC_ConfigChannel+0x1f4>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	2200      	movs	r2, #0
 80021f8:	2100      	movs	r1, #0
 80021fa:	4618      	mov	r0, r3
 80021fc:	f7ff f996 	bl	800152c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	2101      	movs	r1, #1
 8002206:	4618      	mov	r0, r3
 8002208:	f7ff f97a 	bl	8001500 <LL_ADC_GetOffsetChannel>
 800220c:	4603      	mov	r3, r0
 800220e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002212:	2b00      	cmp	r3, #0
 8002214:	d10a      	bne.n	800222c <HAL_ADC_ConfigChannel+0x220>
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	2101      	movs	r1, #1
 800221c:	4618      	mov	r0, r3
 800221e:	f7ff f96f 	bl	8001500 <LL_ADC_GetOffsetChannel>
 8002222:	4603      	mov	r3, r0
 8002224:	0e9b      	lsrs	r3, r3, #26
 8002226:	f003 021f 	and.w	r2, r3, #31
 800222a:	e01e      	b.n	800226a <HAL_ADC_ConfigChannel+0x25e>
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	2101      	movs	r1, #1
 8002232:	4618      	mov	r0, r3
 8002234:	f7ff f964 	bl	8001500 <LL_ADC_GetOffsetChannel>
 8002238:	4603      	mov	r3, r0
 800223a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800223e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8002242:	fa93 f3a3 	rbit	r3, r3
 8002246:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 800224a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800224e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8002252:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002256:	2b00      	cmp	r3, #0
 8002258:	d101      	bne.n	800225e <HAL_ADC_ConfigChannel+0x252>
    return 32U;
 800225a:	2320      	movs	r3, #32
 800225c:	e004      	b.n	8002268 <HAL_ADC_ConfigChannel+0x25c>
  return __builtin_clz(value);
 800225e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002262:	fab3 f383 	clz	r3, r3
 8002266:	b2db      	uxtb	r3, r3
 8002268:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800226a:	683b      	ldr	r3, [r7, #0]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002272:	2b00      	cmp	r3, #0
 8002274:	d105      	bne.n	8002282 <HAL_ADC_ConfigChannel+0x276>
 8002276:	683b      	ldr	r3, [r7, #0]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	0e9b      	lsrs	r3, r3, #26
 800227c:	f003 031f 	and.w	r3, r3, #31
 8002280:	e018      	b.n	80022b4 <HAL_ADC_ConfigChannel+0x2a8>
 8002282:	683b      	ldr	r3, [r7, #0]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800228a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800228e:	fa93 f3a3 	rbit	r3, r3
 8002292:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8002296:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800229a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 800229e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d101      	bne.n	80022aa <HAL_ADC_ConfigChannel+0x29e>
    return 32U;
 80022a6:	2320      	movs	r3, #32
 80022a8:	e004      	b.n	80022b4 <HAL_ADC_ConfigChannel+0x2a8>
  return __builtin_clz(value);
 80022aa:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80022ae:	fab3 f383 	clz	r3, r3
 80022b2:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80022b4:	429a      	cmp	r2, r3
 80022b6:	d106      	bne.n	80022c6 <HAL_ADC_ConfigChannel+0x2ba>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	2200      	movs	r2, #0
 80022be:	2101      	movs	r1, #1
 80022c0:	4618      	mov	r0, r3
 80022c2:	f7ff f933 	bl	800152c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	2102      	movs	r1, #2
 80022cc:	4618      	mov	r0, r3
 80022ce:	f7ff f917 	bl	8001500 <LL_ADC_GetOffsetChannel>
 80022d2:	4603      	mov	r3, r0
 80022d4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80022d8:	2b00      	cmp	r3, #0
 80022da:	d10a      	bne.n	80022f2 <HAL_ADC_ConfigChannel+0x2e6>
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	2102      	movs	r1, #2
 80022e2:	4618      	mov	r0, r3
 80022e4:	f7ff f90c 	bl	8001500 <LL_ADC_GetOffsetChannel>
 80022e8:	4603      	mov	r3, r0
 80022ea:	0e9b      	lsrs	r3, r3, #26
 80022ec:	f003 021f 	and.w	r2, r3, #31
 80022f0:	e01e      	b.n	8002330 <HAL_ADC_ConfigChannel+0x324>
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	2102      	movs	r1, #2
 80022f8:	4618      	mov	r0, r3
 80022fa:	f7ff f901 	bl	8001500 <LL_ADC_GetOffsetChannel>
 80022fe:	4603      	mov	r3, r0
 8002300:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002304:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002308:	fa93 f3a3 	rbit	r3, r3
 800230c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 8002310:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002314:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 8002318:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800231c:	2b00      	cmp	r3, #0
 800231e:	d101      	bne.n	8002324 <HAL_ADC_ConfigChannel+0x318>
    return 32U;
 8002320:	2320      	movs	r3, #32
 8002322:	e004      	b.n	800232e <HAL_ADC_ConfigChannel+0x322>
  return __builtin_clz(value);
 8002324:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002328:	fab3 f383 	clz	r3, r3
 800232c:	b2db      	uxtb	r3, r3
 800232e:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002330:	683b      	ldr	r3, [r7, #0]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002338:	2b00      	cmp	r3, #0
 800233a:	d105      	bne.n	8002348 <HAL_ADC_ConfigChannel+0x33c>
 800233c:	683b      	ldr	r3, [r7, #0]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	0e9b      	lsrs	r3, r3, #26
 8002342:	f003 031f 	and.w	r3, r3, #31
 8002346:	e016      	b.n	8002376 <HAL_ADC_ConfigChannel+0x36a>
 8002348:	683b      	ldr	r3, [r7, #0]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002350:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002354:	fa93 f3a3 	rbit	r3, r3
 8002358:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 800235a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800235c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 8002360:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002364:	2b00      	cmp	r3, #0
 8002366:	d101      	bne.n	800236c <HAL_ADC_ConfigChannel+0x360>
    return 32U;
 8002368:	2320      	movs	r3, #32
 800236a:	e004      	b.n	8002376 <HAL_ADC_ConfigChannel+0x36a>
  return __builtin_clz(value);
 800236c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002370:	fab3 f383 	clz	r3, r3
 8002374:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002376:	429a      	cmp	r2, r3
 8002378:	d106      	bne.n	8002388 <HAL_ADC_ConfigChannel+0x37c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	2200      	movs	r2, #0
 8002380:	2102      	movs	r1, #2
 8002382:	4618      	mov	r0, r3
 8002384:	f7ff f8d2 	bl	800152c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	2103      	movs	r1, #3
 800238e:	4618      	mov	r0, r3
 8002390:	f7ff f8b6 	bl	8001500 <LL_ADC_GetOffsetChannel>
 8002394:	4603      	mov	r3, r0
 8002396:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800239a:	2b00      	cmp	r3, #0
 800239c:	d10a      	bne.n	80023b4 <HAL_ADC_ConfigChannel+0x3a8>
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	2103      	movs	r1, #3
 80023a4:	4618      	mov	r0, r3
 80023a6:	f7ff f8ab 	bl	8001500 <LL_ADC_GetOffsetChannel>
 80023aa:	4603      	mov	r3, r0
 80023ac:	0e9b      	lsrs	r3, r3, #26
 80023ae:	f003 021f 	and.w	r2, r3, #31
 80023b2:	e017      	b.n	80023e4 <HAL_ADC_ConfigChannel+0x3d8>
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	2103      	movs	r1, #3
 80023ba:	4618      	mov	r0, r3
 80023bc:	f7ff f8a0 	bl	8001500 <LL_ADC_GetOffsetChannel>
 80023c0:	4603      	mov	r3, r0
 80023c2:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023c4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80023c6:	fa93 f3a3 	rbit	r3, r3
 80023ca:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 80023cc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80023ce:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 80023d0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d101      	bne.n	80023da <HAL_ADC_ConfigChannel+0x3ce>
    return 32U;
 80023d6:	2320      	movs	r3, #32
 80023d8:	e003      	b.n	80023e2 <HAL_ADC_ConfigChannel+0x3d6>
  return __builtin_clz(value);
 80023da:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80023dc:	fab3 f383 	clz	r3, r3
 80023e0:	b2db      	uxtb	r3, r3
 80023e2:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80023e4:	683b      	ldr	r3, [r7, #0]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	d105      	bne.n	80023fc <HAL_ADC_ConfigChannel+0x3f0>
 80023f0:	683b      	ldr	r3, [r7, #0]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	0e9b      	lsrs	r3, r3, #26
 80023f6:	f003 031f 	and.w	r3, r3, #31
 80023fa:	e011      	b.n	8002420 <HAL_ADC_ConfigChannel+0x414>
 80023fc:	683b      	ldr	r3, [r7, #0]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002402:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002404:	fa93 f3a3 	rbit	r3, r3
 8002408:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 800240a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800240c:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 800240e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002410:	2b00      	cmp	r3, #0
 8002412:	d101      	bne.n	8002418 <HAL_ADC_ConfigChannel+0x40c>
    return 32U;
 8002414:	2320      	movs	r3, #32
 8002416:	e003      	b.n	8002420 <HAL_ADC_ConfigChannel+0x414>
  return __builtin_clz(value);
 8002418:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800241a:	fab3 f383 	clz	r3, r3
 800241e:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002420:	429a      	cmp	r2, r3
 8002422:	d106      	bne.n	8002432 <HAL_ADC_ConfigChannel+0x426>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	2200      	movs	r2, #0
 800242a:	2103      	movs	r1, #3
 800242c:	4618      	mov	r0, r3
 800242e:	f7ff f87d 	bl	800152c <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	4618      	mov	r0, r3
 8002438:	f7ff fa00 	bl	800183c <LL_ADC_IsEnabled>
 800243c:	4603      	mov	r3, r0
 800243e:	2b00      	cmp	r3, #0
 8002440:	f040 8140 	bne.w	80026c4 <HAL_ADC_ConfigChannel+0x6b8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	6818      	ldr	r0, [r3, #0]
 8002448:	683b      	ldr	r3, [r7, #0]
 800244a:	6819      	ldr	r1, [r3, #0]
 800244c:	683b      	ldr	r3, [r7, #0]
 800244e:	68db      	ldr	r3, [r3, #12]
 8002450:	461a      	mov	r2, r3
 8002452:	f7ff f939 	bl	80016c8 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002456:	683b      	ldr	r3, [r7, #0]
 8002458:	68db      	ldr	r3, [r3, #12]
 800245a:	4a8f      	ldr	r2, [pc, #572]	; (8002698 <HAL_ADC_ConfigChannel+0x68c>)
 800245c:	4293      	cmp	r3, r2
 800245e:	f040 8131 	bne.w	80026c4 <HAL_ADC_ConfigChannel+0x6b8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002466:	683b      	ldr	r3, [r7, #0]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800246e:	2b00      	cmp	r3, #0
 8002470:	d10b      	bne.n	800248a <HAL_ADC_ConfigChannel+0x47e>
 8002472:	683b      	ldr	r3, [r7, #0]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	0e9b      	lsrs	r3, r3, #26
 8002478:	3301      	adds	r3, #1
 800247a:	f003 031f 	and.w	r3, r3, #31
 800247e:	2b09      	cmp	r3, #9
 8002480:	bf94      	ite	ls
 8002482:	2301      	movls	r3, #1
 8002484:	2300      	movhi	r3, #0
 8002486:	b2db      	uxtb	r3, r3
 8002488:	e019      	b.n	80024be <HAL_ADC_ConfigChannel+0x4b2>
 800248a:	683b      	ldr	r3, [r7, #0]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002490:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002492:	fa93 f3a3 	rbit	r3, r3
 8002496:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8002498:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800249a:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 800249c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d101      	bne.n	80024a6 <HAL_ADC_ConfigChannel+0x49a>
    return 32U;
 80024a2:	2320      	movs	r3, #32
 80024a4:	e003      	b.n	80024ae <HAL_ADC_ConfigChannel+0x4a2>
  return __builtin_clz(value);
 80024a6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80024a8:	fab3 f383 	clz	r3, r3
 80024ac:	b2db      	uxtb	r3, r3
 80024ae:	3301      	adds	r3, #1
 80024b0:	f003 031f 	and.w	r3, r3, #31
 80024b4:	2b09      	cmp	r3, #9
 80024b6:	bf94      	ite	ls
 80024b8:	2301      	movls	r3, #1
 80024ba:	2300      	movhi	r3, #0
 80024bc:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d079      	beq.n	80025b6 <HAL_ADC_ConfigChannel+0x5aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80024c2:	683b      	ldr	r3, [r7, #0]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d107      	bne.n	80024de <HAL_ADC_ConfigChannel+0x4d2>
 80024ce:	683b      	ldr	r3, [r7, #0]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	0e9b      	lsrs	r3, r3, #26
 80024d4:	3301      	adds	r3, #1
 80024d6:	069b      	lsls	r3, r3, #26
 80024d8:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80024dc:	e015      	b.n	800250a <HAL_ADC_ConfigChannel+0x4fe>
 80024de:	683b      	ldr	r3, [r7, #0]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024e4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80024e6:	fa93 f3a3 	rbit	r3, r3
 80024ea:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 80024ec:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80024ee:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 80024f0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d101      	bne.n	80024fa <HAL_ADC_ConfigChannel+0x4ee>
    return 32U;
 80024f6:	2320      	movs	r3, #32
 80024f8:	e003      	b.n	8002502 <HAL_ADC_ConfigChannel+0x4f6>
  return __builtin_clz(value);
 80024fa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80024fc:	fab3 f383 	clz	r3, r3
 8002500:	b2db      	uxtb	r3, r3
 8002502:	3301      	adds	r3, #1
 8002504:	069b      	lsls	r3, r3, #26
 8002506:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800250a:	683b      	ldr	r3, [r7, #0]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002512:	2b00      	cmp	r3, #0
 8002514:	d109      	bne.n	800252a <HAL_ADC_ConfigChannel+0x51e>
 8002516:	683b      	ldr	r3, [r7, #0]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	0e9b      	lsrs	r3, r3, #26
 800251c:	3301      	adds	r3, #1
 800251e:	f003 031f 	and.w	r3, r3, #31
 8002522:	2101      	movs	r1, #1
 8002524:	fa01 f303 	lsl.w	r3, r1, r3
 8002528:	e017      	b.n	800255a <HAL_ADC_ConfigChannel+0x54e>
 800252a:	683b      	ldr	r3, [r7, #0]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002530:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002532:	fa93 f3a3 	rbit	r3, r3
 8002536:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8002538:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800253a:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 800253c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800253e:	2b00      	cmp	r3, #0
 8002540:	d101      	bne.n	8002546 <HAL_ADC_ConfigChannel+0x53a>
    return 32U;
 8002542:	2320      	movs	r3, #32
 8002544:	e003      	b.n	800254e <HAL_ADC_ConfigChannel+0x542>
  return __builtin_clz(value);
 8002546:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002548:	fab3 f383 	clz	r3, r3
 800254c:	b2db      	uxtb	r3, r3
 800254e:	3301      	adds	r3, #1
 8002550:	f003 031f 	and.w	r3, r3, #31
 8002554:	2101      	movs	r1, #1
 8002556:	fa01 f303 	lsl.w	r3, r1, r3
 800255a:	ea42 0103 	orr.w	r1, r2, r3
 800255e:	683b      	ldr	r3, [r7, #0]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002566:	2b00      	cmp	r3, #0
 8002568:	d10a      	bne.n	8002580 <HAL_ADC_ConfigChannel+0x574>
 800256a:	683b      	ldr	r3, [r7, #0]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	0e9b      	lsrs	r3, r3, #26
 8002570:	3301      	adds	r3, #1
 8002572:	f003 021f 	and.w	r2, r3, #31
 8002576:	4613      	mov	r3, r2
 8002578:	005b      	lsls	r3, r3, #1
 800257a:	4413      	add	r3, r2
 800257c:	051b      	lsls	r3, r3, #20
 800257e:	e018      	b.n	80025b2 <HAL_ADC_ConfigChannel+0x5a6>
 8002580:	683b      	ldr	r3, [r7, #0]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002586:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002588:	fa93 f3a3 	rbit	r3, r3
 800258c:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 800258e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002590:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8002592:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002594:	2b00      	cmp	r3, #0
 8002596:	d101      	bne.n	800259c <HAL_ADC_ConfigChannel+0x590>
    return 32U;
 8002598:	2320      	movs	r3, #32
 800259a:	e003      	b.n	80025a4 <HAL_ADC_ConfigChannel+0x598>
  return __builtin_clz(value);
 800259c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800259e:	fab3 f383 	clz	r3, r3
 80025a2:	b2db      	uxtb	r3, r3
 80025a4:	3301      	adds	r3, #1
 80025a6:	f003 021f 	and.w	r2, r3, #31
 80025aa:	4613      	mov	r3, r2
 80025ac:	005b      	lsls	r3, r3, #1
 80025ae:	4413      	add	r3, r2
 80025b0:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80025b2:	430b      	orrs	r3, r1
 80025b4:	e081      	b.n	80026ba <HAL_ADC_ConfigChannel+0x6ae>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80025b6:	683b      	ldr	r3, [r7, #0]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d107      	bne.n	80025d2 <HAL_ADC_ConfigChannel+0x5c6>
 80025c2:	683b      	ldr	r3, [r7, #0]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	0e9b      	lsrs	r3, r3, #26
 80025c8:	3301      	adds	r3, #1
 80025ca:	069b      	lsls	r3, r3, #26
 80025cc:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80025d0:	e015      	b.n	80025fe <HAL_ADC_ConfigChannel+0x5f2>
 80025d2:	683b      	ldr	r3, [r7, #0]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80025da:	fa93 f3a3 	rbit	r3, r3
 80025de:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 80025e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80025e2:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 80025e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d101      	bne.n	80025ee <HAL_ADC_ConfigChannel+0x5e2>
    return 32U;
 80025ea:	2320      	movs	r3, #32
 80025ec:	e003      	b.n	80025f6 <HAL_ADC_ConfigChannel+0x5ea>
  return __builtin_clz(value);
 80025ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80025f0:	fab3 f383 	clz	r3, r3
 80025f4:	b2db      	uxtb	r3, r3
 80025f6:	3301      	adds	r3, #1
 80025f8:	069b      	lsls	r3, r3, #26
 80025fa:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80025fe:	683b      	ldr	r3, [r7, #0]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002606:	2b00      	cmp	r3, #0
 8002608:	d109      	bne.n	800261e <HAL_ADC_ConfigChannel+0x612>
 800260a:	683b      	ldr	r3, [r7, #0]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	0e9b      	lsrs	r3, r3, #26
 8002610:	3301      	adds	r3, #1
 8002612:	f003 031f 	and.w	r3, r3, #31
 8002616:	2101      	movs	r1, #1
 8002618:	fa01 f303 	lsl.w	r3, r1, r3
 800261c:	e017      	b.n	800264e <HAL_ADC_ConfigChannel+0x642>
 800261e:	683b      	ldr	r3, [r7, #0]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002624:	6a3b      	ldr	r3, [r7, #32]
 8002626:	fa93 f3a3 	rbit	r3, r3
 800262a:	61fb      	str	r3, [r7, #28]
  return result;
 800262c:	69fb      	ldr	r3, [r7, #28]
 800262e:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8002630:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002632:	2b00      	cmp	r3, #0
 8002634:	d101      	bne.n	800263a <HAL_ADC_ConfigChannel+0x62e>
    return 32U;
 8002636:	2320      	movs	r3, #32
 8002638:	e003      	b.n	8002642 <HAL_ADC_ConfigChannel+0x636>
  return __builtin_clz(value);
 800263a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800263c:	fab3 f383 	clz	r3, r3
 8002640:	b2db      	uxtb	r3, r3
 8002642:	3301      	adds	r3, #1
 8002644:	f003 031f 	and.w	r3, r3, #31
 8002648:	2101      	movs	r1, #1
 800264a:	fa01 f303 	lsl.w	r3, r1, r3
 800264e:	ea42 0103 	orr.w	r1, r2, r3
 8002652:	683b      	ldr	r3, [r7, #0]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800265a:	2b00      	cmp	r3, #0
 800265c:	d10d      	bne.n	800267a <HAL_ADC_ConfigChannel+0x66e>
 800265e:	683b      	ldr	r3, [r7, #0]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	0e9b      	lsrs	r3, r3, #26
 8002664:	3301      	adds	r3, #1
 8002666:	f003 021f 	and.w	r2, r3, #31
 800266a:	4613      	mov	r3, r2
 800266c:	005b      	lsls	r3, r3, #1
 800266e:	4413      	add	r3, r2
 8002670:	3b1e      	subs	r3, #30
 8002672:	051b      	lsls	r3, r3, #20
 8002674:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002678:	e01e      	b.n	80026b8 <HAL_ADC_ConfigChannel+0x6ac>
 800267a:	683b      	ldr	r3, [r7, #0]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002680:	697b      	ldr	r3, [r7, #20]
 8002682:	fa93 f3a3 	rbit	r3, r3
 8002686:	613b      	str	r3, [r7, #16]
  return result;
 8002688:	693b      	ldr	r3, [r7, #16]
 800268a:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800268c:	69bb      	ldr	r3, [r7, #24]
 800268e:	2b00      	cmp	r3, #0
 8002690:	d104      	bne.n	800269c <HAL_ADC_ConfigChannel+0x690>
    return 32U;
 8002692:	2320      	movs	r3, #32
 8002694:	e006      	b.n	80026a4 <HAL_ADC_ConfigChannel+0x698>
 8002696:	bf00      	nop
 8002698:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 800269c:	69bb      	ldr	r3, [r7, #24]
 800269e:	fab3 f383 	clz	r3, r3
 80026a2:	b2db      	uxtb	r3, r3
 80026a4:	3301      	adds	r3, #1
 80026a6:	f003 021f 	and.w	r2, r3, #31
 80026aa:	4613      	mov	r3, r2
 80026ac:	005b      	lsls	r3, r3, #1
 80026ae:	4413      	add	r3, r2
 80026b0:	3b1e      	subs	r3, #30
 80026b2:	051b      	lsls	r3, r3, #20
 80026b4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80026b8:	430b      	orrs	r3, r1
 80026ba:	683a      	ldr	r2, [r7, #0]
 80026bc:	6892      	ldr	r2, [r2, #8]
 80026be:	4619      	mov	r1, r3
 80026c0:	f7fe ffd7 	bl	8001672 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80026c4:	683b      	ldr	r3, [r7, #0]
 80026c6:	681a      	ldr	r2, [r3, #0]
 80026c8:	4b3f      	ldr	r3, [pc, #252]	; (80027c8 <HAL_ADC_ConfigChannel+0x7bc>)
 80026ca:	4013      	ands	r3, r2
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	d071      	beq.n	80027b4 <HAL_ADC_ConfigChannel+0x7a8>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80026d0:	483e      	ldr	r0, [pc, #248]	; (80027cc <HAL_ADC_ConfigChannel+0x7c0>)
 80026d2:	f7fe fee3 	bl	800149c <LL_ADC_GetCommonPathInternalCh>
 80026d6:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 80026da:	683b      	ldr	r3, [r7, #0]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	4a3c      	ldr	r2, [pc, #240]	; (80027d0 <HAL_ADC_ConfigChannel+0x7c4>)
 80026e0:	4293      	cmp	r3, r2
 80026e2:	d004      	beq.n	80026ee <HAL_ADC_ConfigChannel+0x6e2>
 80026e4:	683b      	ldr	r3, [r7, #0]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	4a3a      	ldr	r2, [pc, #232]	; (80027d4 <HAL_ADC_ConfigChannel+0x7c8>)
 80026ea:	4293      	cmp	r3, r2
 80026ec:	d127      	bne.n	800273e <HAL_ADC_ConfigChannel+0x732>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80026ee:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80026f2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d121      	bne.n	800273e <HAL_ADC_ConfigChannel+0x732>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002702:	d157      	bne.n	80027b4 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002704:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002708:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800270c:	4619      	mov	r1, r3
 800270e:	482f      	ldr	r0, [pc, #188]	; (80027cc <HAL_ADC_ConfigChannel+0x7c0>)
 8002710:	f7fe feb1 	bl	8001476 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002714:	4b30      	ldr	r3, [pc, #192]	; (80027d8 <HAL_ADC_ConfigChannel+0x7cc>)
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	099b      	lsrs	r3, r3, #6
 800271a:	4a30      	ldr	r2, [pc, #192]	; (80027dc <HAL_ADC_ConfigChannel+0x7d0>)
 800271c:	fba2 2303 	umull	r2, r3, r2, r3
 8002720:	099b      	lsrs	r3, r3, #6
 8002722:	1c5a      	adds	r2, r3, #1
 8002724:	4613      	mov	r3, r2
 8002726:	005b      	lsls	r3, r3, #1
 8002728:	4413      	add	r3, r2
 800272a:	009b      	lsls	r3, r3, #2
 800272c:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800272e:	e002      	b.n	8002736 <HAL_ADC_ConfigChannel+0x72a>
          {
            wait_loop_index--;
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	3b01      	subs	r3, #1
 8002734:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	2b00      	cmp	r3, #0
 800273a:	d1f9      	bne.n	8002730 <HAL_ADC_ConfigChannel+0x724>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800273c:	e03a      	b.n	80027b4 <HAL_ADC_ConfigChannel+0x7a8>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 800273e:	683b      	ldr	r3, [r7, #0]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	4a27      	ldr	r2, [pc, #156]	; (80027e0 <HAL_ADC_ConfigChannel+0x7d4>)
 8002744:	4293      	cmp	r3, r2
 8002746:	d113      	bne.n	8002770 <HAL_ADC_ConfigChannel+0x764>
 8002748:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800274c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002750:	2b00      	cmp	r3, #0
 8002752:	d10d      	bne.n	8002770 <HAL_ADC_ConfigChannel+0x764>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	4a22      	ldr	r2, [pc, #136]	; (80027e4 <HAL_ADC_ConfigChannel+0x7d8>)
 800275a:	4293      	cmp	r3, r2
 800275c:	d02a      	beq.n	80027b4 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800275e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002762:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002766:	4619      	mov	r1, r3
 8002768:	4818      	ldr	r0, [pc, #96]	; (80027cc <HAL_ADC_ConfigChannel+0x7c0>)
 800276a:	f7fe fe84 	bl	8001476 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800276e:	e021      	b.n	80027b4 <HAL_ADC_ConfigChannel+0x7a8>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8002770:	683b      	ldr	r3, [r7, #0]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	4a1c      	ldr	r2, [pc, #112]	; (80027e8 <HAL_ADC_ConfigChannel+0x7dc>)
 8002776:	4293      	cmp	r3, r2
 8002778:	d11c      	bne.n	80027b4 <HAL_ADC_ConfigChannel+0x7a8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800277a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800277e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002782:	2b00      	cmp	r3, #0
 8002784:	d116      	bne.n	80027b4 <HAL_ADC_ConfigChannel+0x7a8>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	4a16      	ldr	r2, [pc, #88]	; (80027e4 <HAL_ADC_ConfigChannel+0x7d8>)
 800278c:	4293      	cmp	r3, r2
 800278e:	d011      	beq.n	80027b4 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002790:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002794:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002798:	4619      	mov	r1, r3
 800279a:	480c      	ldr	r0, [pc, #48]	; (80027cc <HAL_ADC_ConfigChannel+0x7c0>)
 800279c:	f7fe fe6b 	bl	8001476 <LL_ADC_SetCommonPathInternalCh>
 80027a0:	e008      	b.n	80027b4 <HAL_ADC_ConfigChannel+0x7a8>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80027a6:	f043 0220 	orr.w	r2, r3, #32
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 80027ae:	2301      	movs	r3, #1
 80027b0:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	2200      	movs	r2, #0
 80027b8:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 80027bc:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 80027c0:	4618      	mov	r0, r3
 80027c2:	37d8      	adds	r7, #216	; 0xd8
 80027c4:	46bd      	mov	sp, r7
 80027c6:	bd80      	pop	{r7, pc}
 80027c8:	80080000 	.word	0x80080000
 80027cc:	50000300 	.word	0x50000300
 80027d0:	c3210000 	.word	0xc3210000
 80027d4:	90c00010 	.word	0x90c00010
 80027d8:	20000000 	.word	0x20000000
 80027dc:	053e2d63 	.word	0x053e2d63
 80027e0:	c7520000 	.word	0xc7520000
 80027e4:	50000100 	.word	0x50000100
 80027e8:	cb840000 	.word	0xcb840000

080027ec <ADC_ConversionStop>:
  *            @arg @ref ADC_INJECTED_GROUP          ADC injected conversion type.
  *            @arg @ref ADC_REGULAR_INJECTED_GROUP  ADC regular and injected conversion type.
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc, uint32_t ConversionGroup)
{
 80027ec:	b580      	push	{r7, lr}
 80027ee:	b088      	sub	sp, #32
 80027f0:	af00      	add	r7, sp, #0
 80027f2:	6078      	str	r0, [r7, #4]
 80027f4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t Conversion_Timeout_CPU_cycles = 0UL;
 80027f6:	2300      	movs	r3, #0
 80027f8:	61fb      	str	r3, [r7, #28]
  uint32_t conversion_group_reassigned = ConversionGroup;
 80027fa:	683b      	ldr	r3, [r7, #0]
 80027fc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));

  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	4618      	mov	r0, r3
 8002804:	f7ff f868 	bl	80018d8 <LL_ADC_REG_IsConversionOngoing>
 8002808:	6138      	str	r0, [r7, #16]
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	4618      	mov	r0, r3
 8002810:	f7ff f889 	bl	8001926 <LL_ADC_INJ_IsConversionOngoing>
 8002814:	60f8      	str	r0, [r7, #12]
  if ((tmp_adc_is_conversion_on_going_regular != 0UL)
 8002816:	693b      	ldr	r3, [r7, #16]
 8002818:	2b00      	cmp	r3, #0
 800281a:	d103      	bne.n	8002824 <ADC_ConversionStop+0x38>
      || (tmp_adc_is_conversion_on_going_injected != 0UL)
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	2b00      	cmp	r3, #0
 8002820:	f000 8098 	beq.w	8002954 <ADC_ConversionStop+0x168>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if (((hadc->Instance->CFGR & ADC_CFGR_JAUTO) != 0UL)
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	68db      	ldr	r3, [r3, #12]
 800282a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800282e:	2b00      	cmp	r3, #0
 8002830:	d02a      	beq.n	8002888 <ADC_ConversionStop+0x9c>
        && (hadc->Init.ContinuousConvMode == ENABLE)
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	7f5b      	ldrb	r3, [r3, #29]
 8002836:	2b01      	cmp	r3, #1
 8002838:	d126      	bne.n	8002888 <ADC_ConversionStop+0x9c>
        && (hadc->Init.LowPowerAutoWait == ENABLE)
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	7f1b      	ldrb	r3, [r3, #28]
 800283e:	2b01      	cmp	r3, #1
 8002840:	d122      	bne.n	8002888 <ADC_ConversionStop+0x9c>
       )
    {
      /* Use stop of regular group */
      conversion_group_reassigned = ADC_REGULAR_GROUP;
 8002842:	2301      	movs	r3, #1
 8002844:	61bb      	str	r3, [r7, #24]

      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 8002846:	e014      	b.n	8002872 <ADC_ConversionStop+0x86>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES * 4UL))
 8002848:	69fb      	ldr	r3, [r7, #28]
 800284a:	4a45      	ldr	r2, [pc, #276]	; (8002960 <ADC_ConversionStop+0x174>)
 800284c:	4293      	cmp	r3, r2
 800284e:	d90d      	bls.n	800286c <ADC_ConversionStop+0x80>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002854:	f043 0210 	orr.w	r2, r3, #16
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002860:	f043 0201 	orr.w	r2, r3, #1
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	661a      	str	r2, [r3, #96]	; 0x60

          return HAL_ERROR;
 8002868:	2301      	movs	r3, #1
 800286a:	e074      	b.n	8002956 <ADC_ConversionStop+0x16a>
        }
        Conversion_Timeout_CPU_cycles ++;
 800286c:	69fb      	ldr	r3, [r7, #28]
 800286e:	3301      	adds	r3, #1
 8002870:	61fb      	str	r3, [r7, #28]
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800287c:	2b40      	cmp	r3, #64	; 0x40
 800287e:	d1e3      	bne.n	8002848 <ADC_ConversionStop+0x5c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	2240      	movs	r2, #64	; 0x40
 8002886:	601a      	str	r2, [r3, #0]
    }

    /* Stop potential conversion on going on ADC group regular */
    if (conversion_group_reassigned != ADC_INJECTED_GROUP)
 8002888:	69bb      	ldr	r3, [r7, #24]
 800288a:	2b02      	cmp	r3, #2
 800288c:	d014      	beq.n	80028b8 <ADC_ConversionStop+0xcc>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	4618      	mov	r0, r3
 8002894:	f7ff f820 	bl	80018d8 <LL_ADC_REG_IsConversionOngoing>
 8002898:	4603      	mov	r3, r0
 800289a:	2b00      	cmp	r3, #0
 800289c:	d00c      	beq.n	80028b8 <ADC_ConversionStop+0xcc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	4618      	mov	r0, r3
 80028a4:	f7fe ffdd 	bl	8001862 <LL_ADC_IsDisableOngoing>
 80028a8:	4603      	mov	r3, r0
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d104      	bne.n	80028b8 <ADC_ConversionStop+0xcc>
        {
          /* Stop ADC group regular conversion */
          LL_ADC_REG_StopConversion(hadc->Instance);
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	4618      	mov	r0, r3
 80028b4:	f7fe fffc 	bl	80018b0 <LL_ADC_REG_StopConversion>
        }
      }
    }

    /* Stop potential conversion on going on ADC group injected */
    if (conversion_group_reassigned != ADC_REGULAR_GROUP)
 80028b8:	69bb      	ldr	r3, [r7, #24]
 80028ba:	2b01      	cmp	r3, #1
 80028bc:	d014      	beq.n	80028e8 <ADC_ConversionStop+0xfc>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0 */
      if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	4618      	mov	r0, r3
 80028c4:	f7ff f82f 	bl	8001926 <LL_ADC_INJ_IsConversionOngoing>
 80028c8:	4603      	mov	r3, r0
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d00c      	beq.n	80028e8 <ADC_ConversionStop+0xfc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	4618      	mov	r0, r3
 80028d4:	f7fe ffc5 	bl	8001862 <LL_ADC_IsDisableOngoing>
 80028d8:	4603      	mov	r3, r0
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d104      	bne.n	80028e8 <ADC_ConversionStop+0xfc>
        {
          /* Stop ADC group injected conversion */
          LL_ADC_INJ_StopConversion(hadc->Instance);
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	4618      	mov	r0, r3
 80028e4:	f7ff f80b 	bl	80018fe <LL_ADC_INJ_StopConversion>
        }
      }
    }

    /* Selection of start and stop bits with respect to the regular or injected group */
    switch (conversion_group_reassigned)
 80028e8:	69bb      	ldr	r3, [r7, #24]
 80028ea:	2b02      	cmp	r3, #2
 80028ec:	d005      	beq.n	80028fa <ADC_ConversionStop+0x10e>
 80028ee:	69bb      	ldr	r3, [r7, #24]
 80028f0:	2b03      	cmp	r3, #3
 80028f2:	d105      	bne.n	8002900 <ADC_ConversionStop+0x114>
    {
      case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 80028f4:	230c      	movs	r3, #12
 80028f6:	617b      	str	r3, [r7, #20]
        break;
 80028f8:	e005      	b.n	8002906 <ADC_ConversionStop+0x11a>
      case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 80028fa:	2308      	movs	r3, #8
 80028fc:	617b      	str	r3, [r7, #20]
        break;
 80028fe:	e002      	b.n	8002906 <ADC_ConversionStop+0x11a>
      /* Case ADC_REGULAR_GROUP only*/
      default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 8002900:	2304      	movs	r3, #4
 8002902:	617b      	str	r3, [r7, #20]
        break;
 8002904:	bf00      	nop
    }

    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 8002906:	f7fe fd75 	bl	80013f4 <HAL_GetTick>
 800290a:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 800290c:	e01b      	b.n	8002946 <ADC_ConversionStop+0x15a>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 800290e:	f7fe fd71 	bl	80013f4 <HAL_GetTick>
 8002912:	4602      	mov	r2, r0
 8002914:	68bb      	ldr	r3, [r7, #8]
 8002916:	1ad3      	subs	r3, r2, r3
 8002918:	2b05      	cmp	r3, #5
 800291a:	d914      	bls.n	8002946 <ADC_ConversionStop+0x15a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	689a      	ldr	r2, [r3, #8]
 8002922:	697b      	ldr	r3, [r7, #20]
 8002924:	4013      	ands	r3, r2
 8002926:	2b00      	cmp	r3, #0
 8002928:	d00d      	beq.n	8002946 <ADC_ConversionStop+0x15a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800292e:	f043 0210 	orr.w	r2, r3, #16
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800293a:	f043 0201 	orr.w	r2, r3, #1
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	661a      	str	r2, [r3, #96]	; 0x60

          return HAL_ERROR;
 8002942:	2301      	movs	r3, #1
 8002944:	e007      	b.n	8002956 <ADC_ConversionStop+0x16a>
    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	689a      	ldr	r2, [r3, #8]
 800294c:	697b      	ldr	r3, [r7, #20]
 800294e:	4013      	ands	r3, r2
 8002950:	2b00      	cmp	r3, #0
 8002952:	d1dc      	bne.n	800290e <ADC_ConversionStop+0x122>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 8002954:	2300      	movs	r3, #0
}
 8002956:	4618      	mov	r0, r3
 8002958:	3720      	adds	r7, #32
 800295a:	46bd      	mov	sp, r7
 800295c:	bd80      	pop	{r7, pc}
 800295e:	bf00      	nop
 8002960:	a33fffff 	.word	0xa33fffff

08002964 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8002964:	b580      	push	{r7, lr}
 8002966:	b084      	sub	sp, #16
 8002968:	af00      	add	r7, sp, #0
 800296a:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	4618      	mov	r0, r3
 8002972:	f7fe ff63 	bl	800183c <LL_ADC_IsEnabled>
 8002976:	4603      	mov	r3, r0
 8002978:	2b00      	cmp	r3, #0
 800297a:	d14d      	bne.n	8002a18 <ADC_Enable+0xb4>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	689a      	ldr	r2, [r3, #8]
 8002982:	4b28      	ldr	r3, [pc, #160]	; (8002a24 <ADC_Enable+0xc0>)
 8002984:	4013      	ands	r3, r2
 8002986:	2b00      	cmp	r3, #0
 8002988:	d00d      	beq.n	80029a6 <ADC_Enable+0x42>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800298e:	f043 0210 	orr.w	r2, r3, #16
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800299a:	f043 0201 	orr.w	r2, r3, #1
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	661a      	str	r2, [r3, #96]	; 0x60

      return HAL_ERROR;
 80029a2:	2301      	movs	r3, #1
 80029a4:	e039      	b.n	8002a1a <ADC_Enable+0xb6>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	4618      	mov	r0, r3
 80029ac:	f7fe ff1e 	bl	80017ec <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 80029b0:	f7fe fd20 	bl	80013f4 <HAL_GetTick>
 80029b4:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80029b6:	e028      	b.n	8002a0a <ADC_Enable+0xa6>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	4618      	mov	r0, r3
 80029be:	f7fe ff3d 	bl	800183c <LL_ADC_IsEnabled>
 80029c2:	4603      	mov	r3, r0
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	d104      	bne.n	80029d2 <ADC_Enable+0x6e>
      {
        LL_ADC_Enable(hadc->Instance);
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	4618      	mov	r0, r3
 80029ce:	f7fe ff0d 	bl	80017ec <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80029d2:	f7fe fd0f 	bl	80013f4 <HAL_GetTick>
 80029d6:	4602      	mov	r2, r0
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	1ad3      	subs	r3, r2, r3
 80029dc:	2b02      	cmp	r3, #2
 80029de:	d914      	bls.n	8002a0a <ADC_Enable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	f003 0301 	and.w	r3, r3, #1
 80029ea:	2b01      	cmp	r3, #1
 80029ec:	d00d      	beq.n	8002a0a <ADC_Enable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80029f2:	f043 0210 	orr.w	r2, r3, #16
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80029fe:	f043 0201 	orr.w	r2, r3, #1
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	661a      	str	r2, [r3, #96]	; 0x60

          return HAL_ERROR;
 8002a06:	2301      	movs	r3, #1
 8002a08:	e007      	b.n	8002a1a <ADC_Enable+0xb6>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	f003 0301 	and.w	r3, r3, #1
 8002a14:	2b01      	cmp	r3, #1
 8002a16:	d1cf      	bne.n	80029b8 <ADC_Enable+0x54>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002a18:	2300      	movs	r3, #0
}
 8002a1a:	4618      	mov	r0, r3
 8002a1c:	3710      	adds	r7, #16
 8002a1e:	46bd      	mov	sp, r7
 8002a20:	bd80      	pop	{r7, pc}
 8002a22:	bf00      	nop
 8002a24:	8000003f 	.word	0x8000003f

08002a28 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8002a28:	b580      	push	{r7, lr}
 8002a2a:	b084      	sub	sp, #16
 8002a2c:	af00      	add	r7, sp, #0
 8002a2e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	4618      	mov	r0, r3
 8002a36:	f7fe ff14 	bl	8001862 <LL_ADC_IsDisableOngoing>
 8002a3a:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	4618      	mov	r0, r3
 8002a42:	f7fe fefb 	bl	800183c <LL_ADC_IsEnabled>
 8002a46:	4603      	mov	r3, r0
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d047      	beq.n	8002adc <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d144      	bne.n	8002adc <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	689b      	ldr	r3, [r3, #8]
 8002a58:	f003 030d 	and.w	r3, r3, #13
 8002a5c:	2b01      	cmp	r3, #1
 8002a5e:	d10c      	bne.n	8002a7a <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	4618      	mov	r0, r3
 8002a66:	f7fe fed5 	bl	8001814 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	2203      	movs	r2, #3
 8002a70:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002a72:	f7fe fcbf 	bl	80013f4 <HAL_GetTick>
 8002a76:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002a78:	e029      	b.n	8002ace <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a7e:	f043 0210 	orr.w	r2, r3, #16
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	65da      	str	r2, [r3, #92]	; 0x5c
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002a8a:	f043 0201 	orr.w	r2, r3, #1
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_ERROR;
 8002a92:	2301      	movs	r3, #1
 8002a94:	e023      	b.n	8002ade <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002a96:	f7fe fcad 	bl	80013f4 <HAL_GetTick>
 8002a9a:	4602      	mov	r2, r0
 8002a9c:	68bb      	ldr	r3, [r7, #8]
 8002a9e:	1ad3      	subs	r3, r2, r3
 8002aa0:	2b02      	cmp	r3, #2
 8002aa2:	d914      	bls.n	8002ace <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	689b      	ldr	r3, [r3, #8]
 8002aaa:	f003 0301 	and.w	r3, r3, #1
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d00d      	beq.n	8002ace <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ab6:	f043 0210 	orr.w	r2, r3, #16
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002ac2:	f043 0201 	orr.w	r2, r3, #1
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	661a      	str	r2, [r3, #96]	; 0x60

          return HAL_ERROR;
 8002aca:	2301      	movs	r3, #1
 8002acc:	e007      	b.n	8002ade <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	689b      	ldr	r3, [r3, #8]
 8002ad4:	f003 0301 	and.w	r3, r3, #1
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	d1dc      	bne.n	8002a96 <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002adc:	2300      	movs	r3, #0
}
 8002ade:	4618      	mov	r0, r3
 8002ae0:	3710      	adds	r7, #16
 8002ae2:	46bd      	mov	sp, r7
 8002ae4:	bd80      	pop	{r7, pc}

08002ae6 <LL_ADC_IsEnabled>:
{
 8002ae6:	b480      	push	{r7}
 8002ae8:	b083      	sub	sp, #12
 8002aea:	af00      	add	r7, sp, #0
 8002aec:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	689b      	ldr	r3, [r3, #8]
 8002af2:	f003 0301 	and.w	r3, r3, #1
 8002af6:	2b01      	cmp	r3, #1
 8002af8:	d101      	bne.n	8002afe <LL_ADC_IsEnabled+0x18>
 8002afa:	2301      	movs	r3, #1
 8002afc:	e000      	b.n	8002b00 <LL_ADC_IsEnabled+0x1a>
 8002afe:	2300      	movs	r3, #0
}
 8002b00:	4618      	mov	r0, r3
 8002b02:	370c      	adds	r7, #12
 8002b04:	46bd      	mov	sp, r7
 8002b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b0a:	4770      	bx	lr

08002b0c <LL_ADC_REG_IsConversionOngoing>:
{
 8002b0c:	b480      	push	{r7}
 8002b0e:	b083      	sub	sp, #12
 8002b10:	af00      	add	r7, sp, #0
 8002b12:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	689b      	ldr	r3, [r3, #8]
 8002b18:	f003 0304 	and.w	r3, r3, #4
 8002b1c:	2b04      	cmp	r3, #4
 8002b1e:	d101      	bne.n	8002b24 <LL_ADC_REG_IsConversionOngoing+0x18>
 8002b20:	2301      	movs	r3, #1
 8002b22:	e000      	b.n	8002b26 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002b24:	2300      	movs	r3, #0
}
 8002b26:	4618      	mov	r0, r3
 8002b28:	370c      	adds	r7, #12
 8002b2a:	46bd      	mov	sp, r7
 8002b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b30:	4770      	bx	lr
	...

08002b34 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8002b34:	b590      	push	{r4, r7, lr}
 8002b36:	b0a1      	sub	sp, #132	; 0x84
 8002b38:	af00      	add	r7, sp, #0
 8002b3a:	6078      	str	r0, [r7, #4]
 8002b3c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002b3e:	2300      	movs	r3, #0
 8002b40:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8002b4a:	2b01      	cmp	r3, #1
 8002b4c:	d101      	bne.n	8002b52 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8002b4e:	2302      	movs	r3, #2
 8002b50:	e08b      	b.n	8002c6a <HAL_ADCEx_MultiModeConfigChannel+0x136>
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	2201      	movs	r2, #1
 8002b56:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmphadcSlave);
 8002b5a:	2300      	movs	r3, #0
 8002b5c:	667b      	str	r3, [r7, #100]	; 0x64
  ADC_CLEAR_ERRORCODE(&tmphadcSlave);
 8002b5e:	2300      	movs	r3, #0
 8002b60:	66bb      	str	r3, [r7, #104]	; 0x68

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002b6a:	d102      	bne.n	8002b72 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8002b6c:	4b41      	ldr	r3, [pc, #260]	; (8002c74 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8002b6e:	60bb      	str	r3, [r7, #8]
 8002b70:	e001      	b.n	8002b76 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8002b72:	2300      	movs	r3, #0
 8002b74:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 8002b76:	68bb      	ldr	r3, [r7, #8]
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	d10b      	bne.n	8002b94 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b80:	f043 0220 	orr.w	r2, r3, #32
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	2200      	movs	r2, #0
 8002b8c:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    return HAL_ERROR;
 8002b90:	2301      	movs	r3, #1
 8002b92:	e06a      	b.n	8002c6a <HAL_ADCEx_MultiModeConfigChannel+0x136>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8002b94:	68bb      	ldr	r3, [r7, #8]
 8002b96:	4618      	mov	r0, r3
 8002b98:	f7ff ffb8 	bl	8002b0c <LL_ADC_REG_IsConversionOngoing>
 8002b9c:	67b8      	str	r0, [r7, #120]	; 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	4618      	mov	r0, r3
 8002ba4:	f7ff ffb2 	bl	8002b0c <LL_ADC_REG_IsConversionOngoing>
 8002ba8:	4603      	mov	r3, r0
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d14c      	bne.n	8002c48 <HAL_ADCEx_MultiModeConfigChannel+0x114>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8002bae:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	d149      	bne.n	8002c48 <HAL_ADCEx_MultiModeConfigChannel+0x114>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8002bb4:	4b30      	ldr	r3, [pc, #192]	; (8002c78 <HAL_ADCEx_MultiModeConfigChannel+0x144>)
 8002bb6:	677b      	str	r3, [r7, #116]	; 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002bb8:	683b      	ldr	r3, [r7, #0]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	d028      	beq.n	8002c12 <HAL_ADCEx_MultiModeConfigChannel+0xde>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8002bc0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002bc2:	689b      	ldr	r3, [r3, #8]
 8002bc4:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002bc8:	683b      	ldr	r3, [r7, #0]
 8002bca:	6859      	ldr	r1, [r3, #4]
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002bd2:	035b      	lsls	r3, r3, #13
 8002bd4:	430b      	orrs	r3, r1
 8002bd6:	431a      	orrs	r2, r3
 8002bd8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002bda:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002bdc:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8002be0:	f7ff ff81 	bl	8002ae6 <LL_ADC_IsEnabled>
 8002be4:	4604      	mov	r4, r0
 8002be6:	4823      	ldr	r0, [pc, #140]	; (8002c74 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8002be8:	f7ff ff7d 	bl	8002ae6 <LL_ADC_IsEnabled>
 8002bec:	4603      	mov	r3, r0
 8002bee:	4323      	orrs	r3, r4
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d133      	bne.n	8002c5c <HAL_ADCEx_MultiModeConfigChannel+0x128>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8002bf4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002bf6:	689b      	ldr	r3, [r3, #8]
 8002bf8:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8002bfc:	f023 030f 	bic.w	r3, r3, #15
 8002c00:	683a      	ldr	r2, [r7, #0]
 8002c02:	6811      	ldr	r1, [r2, #0]
 8002c04:	683a      	ldr	r2, [r7, #0]
 8002c06:	6892      	ldr	r2, [r2, #8]
 8002c08:	430a      	orrs	r2, r1
 8002c0a:	431a      	orrs	r2, r3
 8002c0c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002c0e:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002c10:	e024      	b.n	8002c5c <HAL_ADCEx_MultiModeConfigChannel+0x128>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8002c12:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002c14:	689b      	ldr	r3, [r3, #8]
 8002c16:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002c1a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002c1c:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002c1e:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8002c22:	f7ff ff60 	bl	8002ae6 <LL_ADC_IsEnabled>
 8002c26:	4604      	mov	r4, r0
 8002c28:	4812      	ldr	r0, [pc, #72]	; (8002c74 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8002c2a:	f7ff ff5c 	bl	8002ae6 <LL_ADC_IsEnabled>
 8002c2e:	4603      	mov	r3, r0
 8002c30:	4323      	orrs	r3, r4
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d112      	bne.n	8002c5c <HAL_ADCEx_MultiModeConfigChannel+0x128>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8002c36:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002c38:	689b      	ldr	r3, [r3, #8]
 8002c3a:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8002c3e:	f023 030f 	bic.w	r3, r3, #15
 8002c42:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8002c44:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002c46:	e009      	b.n	8002c5c <HAL_ADCEx_MultiModeConfigChannel+0x128>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c4c:	f043 0220 	orr.w	r2, r3, #32
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8002c54:	2301      	movs	r3, #1
 8002c56:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 8002c5a:	e000      	b.n	8002c5e <HAL_ADCEx_MultiModeConfigChannel+0x12a>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002c5c:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	2200      	movs	r2, #0
 8002c62:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8002c66:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 8002c6a:	4618      	mov	r0, r3
 8002c6c:	3784      	adds	r7, #132	; 0x84
 8002c6e:	46bd      	mov	sp, r7
 8002c70:	bd90      	pop	{r4, r7, pc}
 8002c72:	bf00      	nop
 8002c74:	50000100 	.word	0x50000100
 8002c78:	50000300 	.word	0x50000300

08002c7c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002c7c:	b480      	push	{r7}
 8002c7e:	b085      	sub	sp, #20
 8002c80:	af00      	add	r7, sp, #0
 8002c82:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	f003 0307 	and.w	r3, r3, #7
 8002c8a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002c8c:	4b0c      	ldr	r3, [pc, #48]	; (8002cc0 <__NVIC_SetPriorityGrouping+0x44>)
 8002c8e:	68db      	ldr	r3, [r3, #12]
 8002c90:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002c92:	68ba      	ldr	r2, [r7, #8]
 8002c94:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002c98:	4013      	ands	r3, r2
 8002c9a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002ca0:	68bb      	ldr	r3, [r7, #8]
 8002ca2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002ca4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002ca8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002cac:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002cae:	4a04      	ldr	r2, [pc, #16]	; (8002cc0 <__NVIC_SetPriorityGrouping+0x44>)
 8002cb0:	68bb      	ldr	r3, [r7, #8]
 8002cb2:	60d3      	str	r3, [r2, #12]
}
 8002cb4:	bf00      	nop
 8002cb6:	3714      	adds	r7, #20
 8002cb8:	46bd      	mov	sp, r7
 8002cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cbe:	4770      	bx	lr
 8002cc0:	e000ed00 	.word	0xe000ed00

08002cc4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002cc4:	b480      	push	{r7}
 8002cc6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002cc8:	4b04      	ldr	r3, [pc, #16]	; (8002cdc <__NVIC_GetPriorityGrouping+0x18>)
 8002cca:	68db      	ldr	r3, [r3, #12]
 8002ccc:	0a1b      	lsrs	r3, r3, #8
 8002cce:	f003 0307 	and.w	r3, r3, #7
}
 8002cd2:	4618      	mov	r0, r3
 8002cd4:	46bd      	mov	sp, r7
 8002cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cda:	4770      	bx	lr
 8002cdc:	e000ed00 	.word	0xe000ed00

08002ce0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002ce0:	b480      	push	{r7}
 8002ce2:	b083      	sub	sp, #12
 8002ce4:	af00      	add	r7, sp, #0
 8002ce6:	4603      	mov	r3, r0
 8002ce8:	6039      	str	r1, [r7, #0]
 8002cea:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002cec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	db0a      	blt.n	8002d0a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002cf4:	683b      	ldr	r3, [r7, #0]
 8002cf6:	b2da      	uxtb	r2, r3
 8002cf8:	490c      	ldr	r1, [pc, #48]	; (8002d2c <__NVIC_SetPriority+0x4c>)
 8002cfa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002cfe:	0112      	lsls	r2, r2, #4
 8002d00:	b2d2      	uxtb	r2, r2
 8002d02:	440b      	add	r3, r1
 8002d04:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002d08:	e00a      	b.n	8002d20 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002d0a:	683b      	ldr	r3, [r7, #0]
 8002d0c:	b2da      	uxtb	r2, r3
 8002d0e:	4908      	ldr	r1, [pc, #32]	; (8002d30 <__NVIC_SetPriority+0x50>)
 8002d10:	79fb      	ldrb	r3, [r7, #7]
 8002d12:	f003 030f 	and.w	r3, r3, #15
 8002d16:	3b04      	subs	r3, #4
 8002d18:	0112      	lsls	r2, r2, #4
 8002d1a:	b2d2      	uxtb	r2, r2
 8002d1c:	440b      	add	r3, r1
 8002d1e:	761a      	strb	r2, [r3, #24]
}
 8002d20:	bf00      	nop
 8002d22:	370c      	adds	r7, #12
 8002d24:	46bd      	mov	sp, r7
 8002d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d2a:	4770      	bx	lr
 8002d2c:	e000e100 	.word	0xe000e100
 8002d30:	e000ed00 	.word	0xe000ed00

08002d34 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002d34:	b480      	push	{r7}
 8002d36:	b089      	sub	sp, #36	; 0x24
 8002d38:	af00      	add	r7, sp, #0
 8002d3a:	60f8      	str	r0, [r7, #12]
 8002d3c:	60b9      	str	r1, [r7, #8]
 8002d3e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	f003 0307 	and.w	r3, r3, #7
 8002d46:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002d48:	69fb      	ldr	r3, [r7, #28]
 8002d4a:	f1c3 0307 	rsb	r3, r3, #7
 8002d4e:	2b04      	cmp	r3, #4
 8002d50:	bf28      	it	cs
 8002d52:	2304      	movcs	r3, #4
 8002d54:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002d56:	69fb      	ldr	r3, [r7, #28]
 8002d58:	3304      	adds	r3, #4
 8002d5a:	2b06      	cmp	r3, #6
 8002d5c:	d902      	bls.n	8002d64 <NVIC_EncodePriority+0x30>
 8002d5e:	69fb      	ldr	r3, [r7, #28]
 8002d60:	3b03      	subs	r3, #3
 8002d62:	e000      	b.n	8002d66 <NVIC_EncodePriority+0x32>
 8002d64:	2300      	movs	r3, #0
 8002d66:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002d68:	f04f 32ff 	mov.w	r2, #4294967295
 8002d6c:	69bb      	ldr	r3, [r7, #24]
 8002d6e:	fa02 f303 	lsl.w	r3, r2, r3
 8002d72:	43da      	mvns	r2, r3
 8002d74:	68bb      	ldr	r3, [r7, #8]
 8002d76:	401a      	ands	r2, r3
 8002d78:	697b      	ldr	r3, [r7, #20]
 8002d7a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002d7c:	f04f 31ff 	mov.w	r1, #4294967295
 8002d80:	697b      	ldr	r3, [r7, #20]
 8002d82:	fa01 f303 	lsl.w	r3, r1, r3
 8002d86:	43d9      	mvns	r1, r3
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002d8c:	4313      	orrs	r3, r2
         );
}
 8002d8e:	4618      	mov	r0, r3
 8002d90:	3724      	adds	r7, #36	; 0x24
 8002d92:	46bd      	mov	sp, r7
 8002d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d98:	4770      	bx	lr
	...

08002d9c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002d9c:	b580      	push	{r7, lr}
 8002d9e:	b082      	sub	sp, #8
 8002da0:	af00      	add	r7, sp, #0
 8002da2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	3b01      	subs	r3, #1
 8002da8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002dac:	d301      	bcc.n	8002db2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002dae:	2301      	movs	r3, #1
 8002db0:	e00f      	b.n	8002dd2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002db2:	4a0a      	ldr	r2, [pc, #40]	; (8002ddc <SysTick_Config+0x40>)
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	3b01      	subs	r3, #1
 8002db8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002dba:	210f      	movs	r1, #15
 8002dbc:	f04f 30ff 	mov.w	r0, #4294967295
 8002dc0:	f7ff ff8e 	bl	8002ce0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002dc4:	4b05      	ldr	r3, [pc, #20]	; (8002ddc <SysTick_Config+0x40>)
 8002dc6:	2200      	movs	r2, #0
 8002dc8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002dca:	4b04      	ldr	r3, [pc, #16]	; (8002ddc <SysTick_Config+0x40>)
 8002dcc:	2207      	movs	r2, #7
 8002dce:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002dd0:	2300      	movs	r3, #0
}
 8002dd2:	4618      	mov	r0, r3
 8002dd4:	3708      	adds	r7, #8
 8002dd6:	46bd      	mov	sp, r7
 8002dd8:	bd80      	pop	{r7, pc}
 8002dda:	bf00      	nop
 8002ddc:	e000e010 	.word	0xe000e010

08002de0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002de0:	b580      	push	{r7, lr}
 8002de2:	b082      	sub	sp, #8
 8002de4:	af00      	add	r7, sp, #0
 8002de6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002de8:	6878      	ldr	r0, [r7, #4]
 8002dea:	f7ff ff47 	bl	8002c7c <__NVIC_SetPriorityGrouping>
}
 8002dee:	bf00      	nop
 8002df0:	3708      	adds	r7, #8
 8002df2:	46bd      	mov	sp, r7
 8002df4:	bd80      	pop	{r7, pc}

08002df6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002df6:	b580      	push	{r7, lr}
 8002df8:	b086      	sub	sp, #24
 8002dfa:	af00      	add	r7, sp, #0
 8002dfc:	4603      	mov	r3, r0
 8002dfe:	60b9      	str	r1, [r7, #8]
 8002e00:	607a      	str	r2, [r7, #4]
 8002e02:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002e04:	f7ff ff5e 	bl	8002cc4 <__NVIC_GetPriorityGrouping>
 8002e08:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002e0a:	687a      	ldr	r2, [r7, #4]
 8002e0c:	68b9      	ldr	r1, [r7, #8]
 8002e0e:	6978      	ldr	r0, [r7, #20]
 8002e10:	f7ff ff90 	bl	8002d34 <NVIC_EncodePriority>
 8002e14:	4602      	mov	r2, r0
 8002e16:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002e1a:	4611      	mov	r1, r2
 8002e1c:	4618      	mov	r0, r3
 8002e1e:	f7ff ff5f 	bl	8002ce0 <__NVIC_SetPriority>
}
 8002e22:	bf00      	nop
 8002e24:	3718      	adds	r7, #24
 8002e26:	46bd      	mov	sp, r7
 8002e28:	bd80      	pop	{r7, pc}

08002e2a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002e2a:	b580      	push	{r7, lr}
 8002e2c:	b082      	sub	sp, #8
 8002e2e:	af00      	add	r7, sp, #0
 8002e30:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002e32:	6878      	ldr	r0, [r7, #4]
 8002e34:	f7ff ffb2 	bl	8002d9c <SysTick_Config>
 8002e38:	4603      	mov	r3, r0
}
 8002e3a:	4618      	mov	r0, r3
 8002e3c:	3708      	adds	r7, #8
 8002e3e:	46bd      	mov	sp, r7
 8002e40:	bd80      	pop	{r7, pc}
	...

08002e44 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002e44:	b480      	push	{r7}
 8002e46:	b087      	sub	sp, #28
 8002e48:	af00      	add	r7, sp, #0
 8002e4a:	6078      	str	r0, [r7, #4]
 8002e4c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8002e4e:	2300      	movs	r3, #0
 8002e50:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8002e52:	e15a      	b.n	800310a <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8002e54:	683b      	ldr	r3, [r7, #0]
 8002e56:	681a      	ldr	r2, [r3, #0]
 8002e58:	2101      	movs	r1, #1
 8002e5a:	697b      	ldr	r3, [r7, #20]
 8002e5c:	fa01 f303 	lsl.w	r3, r1, r3
 8002e60:	4013      	ands	r3, r2
 8002e62:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	f000 814c 	beq.w	8003104 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002e6c:	683b      	ldr	r3, [r7, #0]
 8002e6e:	685b      	ldr	r3, [r3, #4]
 8002e70:	f003 0303 	and.w	r3, r3, #3
 8002e74:	2b01      	cmp	r3, #1
 8002e76:	d005      	beq.n	8002e84 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002e78:	683b      	ldr	r3, [r7, #0]
 8002e7a:	685b      	ldr	r3, [r3, #4]
 8002e7c:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002e80:	2b02      	cmp	r3, #2
 8002e82:	d130      	bne.n	8002ee6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	689b      	ldr	r3, [r3, #8]
 8002e88:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8002e8a:	697b      	ldr	r3, [r7, #20]
 8002e8c:	005b      	lsls	r3, r3, #1
 8002e8e:	2203      	movs	r2, #3
 8002e90:	fa02 f303 	lsl.w	r3, r2, r3
 8002e94:	43db      	mvns	r3, r3
 8002e96:	693a      	ldr	r2, [r7, #16]
 8002e98:	4013      	ands	r3, r2
 8002e9a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002e9c:	683b      	ldr	r3, [r7, #0]
 8002e9e:	68da      	ldr	r2, [r3, #12]
 8002ea0:	697b      	ldr	r3, [r7, #20]
 8002ea2:	005b      	lsls	r3, r3, #1
 8002ea4:	fa02 f303 	lsl.w	r3, r2, r3
 8002ea8:	693a      	ldr	r2, [r7, #16]
 8002eaa:	4313      	orrs	r3, r2
 8002eac:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	693a      	ldr	r2, [r7, #16]
 8002eb2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	685b      	ldr	r3, [r3, #4]
 8002eb8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002eba:	2201      	movs	r2, #1
 8002ebc:	697b      	ldr	r3, [r7, #20]
 8002ebe:	fa02 f303 	lsl.w	r3, r2, r3
 8002ec2:	43db      	mvns	r3, r3
 8002ec4:	693a      	ldr	r2, [r7, #16]
 8002ec6:	4013      	ands	r3, r2
 8002ec8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002eca:	683b      	ldr	r3, [r7, #0]
 8002ecc:	685b      	ldr	r3, [r3, #4]
 8002ece:	091b      	lsrs	r3, r3, #4
 8002ed0:	f003 0201 	and.w	r2, r3, #1
 8002ed4:	697b      	ldr	r3, [r7, #20]
 8002ed6:	fa02 f303 	lsl.w	r3, r2, r3
 8002eda:	693a      	ldr	r2, [r7, #16]
 8002edc:	4313      	orrs	r3, r2
 8002ede:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	693a      	ldr	r2, [r7, #16]
 8002ee4:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002ee6:	683b      	ldr	r3, [r7, #0]
 8002ee8:	685b      	ldr	r3, [r3, #4]
 8002eea:	f003 0303 	and.w	r3, r3, #3
 8002eee:	2b03      	cmp	r3, #3
 8002ef0:	d017      	beq.n	8002f22 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	68db      	ldr	r3, [r3, #12]
 8002ef6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002ef8:	697b      	ldr	r3, [r7, #20]
 8002efa:	005b      	lsls	r3, r3, #1
 8002efc:	2203      	movs	r2, #3
 8002efe:	fa02 f303 	lsl.w	r3, r2, r3
 8002f02:	43db      	mvns	r3, r3
 8002f04:	693a      	ldr	r2, [r7, #16]
 8002f06:	4013      	ands	r3, r2
 8002f08:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002f0a:	683b      	ldr	r3, [r7, #0]
 8002f0c:	689a      	ldr	r2, [r3, #8]
 8002f0e:	697b      	ldr	r3, [r7, #20]
 8002f10:	005b      	lsls	r3, r3, #1
 8002f12:	fa02 f303 	lsl.w	r3, r2, r3
 8002f16:	693a      	ldr	r2, [r7, #16]
 8002f18:	4313      	orrs	r3, r2
 8002f1a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	693a      	ldr	r2, [r7, #16]
 8002f20:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002f22:	683b      	ldr	r3, [r7, #0]
 8002f24:	685b      	ldr	r3, [r3, #4]
 8002f26:	f003 0303 	and.w	r3, r3, #3
 8002f2a:	2b02      	cmp	r3, #2
 8002f2c:	d123      	bne.n	8002f76 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002f2e:	697b      	ldr	r3, [r7, #20]
 8002f30:	08da      	lsrs	r2, r3, #3
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	3208      	adds	r2, #8
 8002f36:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002f3a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8002f3c:	697b      	ldr	r3, [r7, #20]
 8002f3e:	f003 0307 	and.w	r3, r3, #7
 8002f42:	009b      	lsls	r3, r3, #2
 8002f44:	220f      	movs	r2, #15
 8002f46:	fa02 f303 	lsl.w	r3, r2, r3
 8002f4a:	43db      	mvns	r3, r3
 8002f4c:	693a      	ldr	r2, [r7, #16]
 8002f4e:	4013      	ands	r3, r2
 8002f50:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8002f52:	683b      	ldr	r3, [r7, #0]
 8002f54:	691a      	ldr	r2, [r3, #16]
 8002f56:	697b      	ldr	r3, [r7, #20]
 8002f58:	f003 0307 	and.w	r3, r3, #7
 8002f5c:	009b      	lsls	r3, r3, #2
 8002f5e:	fa02 f303 	lsl.w	r3, r2, r3
 8002f62:	693a      	ldr	r2, [r7, #16]
 8002f64:	4313      	orrs	r3, r2
 8002f66:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8002f68:	697b      	ldr	r3, [r7, #20]
 8002f6a:	08da      	lsrs	r2, r3, #3
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	3208      	adds	r2, #8
 8002f70:	6939      	ldr	r1, [r7, #16]
 8002f72:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8002f7c:	697b      	ldr	r3, [r7, #20]
 8002f7e:	005b      	lsls	r3, r3, #1
 8002f80:	2203      	movs	r2, #3
 8002f82:	fa02 f303 	lsl.w	r3, r2, r3
 8002f86:	43db      	mvns	r3, r3
 8002f88:	693a      	ldr	r2, [r7, #16]
 8002f8a:	4013      	ands	r3, r2
 8002f8c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002f8e:	683b      	ldr	r3, [r7, #0]
 8002f90:	685b      	ldr	r3, [r3, #4]
 8002f92:	f003 0203 	and.w	r2, r3, #3
 8002f96:	697b      	ldr	r3, [r7, #20]
 8002f98:	005b      	lsls	r3, r3, #1
 8002f9a:	fa02 f303 	lsl.w	r3, r2, r3
 8002f9e:	693a      	ldr	r2, [r7, #16]
 8002fa0:	4313      	orrs	r3, r2
 8002fa2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	693a      	ldr	r2, [r7, #16]
 8002fa8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002faa:	683b      	ldr	r3, [r7, #0]
 8002fac:	685b      	ldr	r3, [r3, #4]
 8002fae:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	f000 80a6 	beq.w	8003104 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002fb8:	4b5b      	ldr	r3, [pc, #364]	; (8003128 <HAL_GPIO_Init+0x2e4>)
 8002fba:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002fbc:	4a5a      	ldr	r2, [pc, #360]	; (8003128 <HAL_GPIO_Init+0x2e4>)
 8002fbe:	f043 0301 	orr.w	r3, r3, #1
 8002fc2:	6613      	str	r3, [r2, #96]	; 0x60
 8002fc4:	4b58      	ldr	r3, [pc, #352]	; (8003128 <HAL_GPIO_Init+0x2e4>)
 8002fc6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002fc8:	f003 0301 	and.w	r3, r3, #1
 8002fcc:	60bb      	str	r3, [r7, #8]
 8002fce:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002fd0:	4a56      	ldr	r2, [pc, #344]	; (800312c <HAL_GPIO_Init+0x2e8>)
 8002fd2:	697b      	ldr	r3, [r7, #20]
 8002fd4:	089b      	lsrs	r3, r3, #2
 8002fd6:	3302      	adds	r3, #2
 8002fd8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002fdc:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8002fde:	697b      	ldr	r3, [r7, #20]
 8002fe0:	f003 0303 	and.w	r3, r3, #3
 8002fe4:	009b      	lsls	r3, r3, #2
 8002fe6:	220f      	movs	r2, #15
 8002fe8:	fa02 f303 	lsl.w	r3, r2, r3
 8002fec:	43db      	mvns	r3, r3
 8002fee:	693a      	ldr	r2, [r7, #16]
 8002ff0:	4013      	ands	r3, r2
 8002ff2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002ffa:	d01f      	beq.n	800303c <HAL_GPIO_Init+0x1f8>
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	4a4c      	ldr	r2, [pc, #304]	; (8003130 <HAL_GPIO_Init+0x2ec>)
 8003000:	4293      	cmp	r3, r2
 8003002:	d019      	beq.n	8003038 <HAL_GPIO_Init+0x1f4>
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	4a4b      	ldr	r2, [pc, #300]	; (8003134 <HAL_GPIO_Init+0x2f0>)
 8003008:	4293      	cmp	r3, r2
 800300a:	d013      	beq.n	8003034 <HAL_GPIO_Init+0x1f0>
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	4a4a      	ldr	r2, [pc, #296]	; (8003138 <HAL_GPIO_Init+0x2f4>)
 8003010:	4293      	cmp	r3, r2
 8003012:	d00d      	beq.n	8003030 <HAL_GPIO_Init+0x1ec>
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	4a49      	ldr	r2, [pc, #292]	; (800313c <HAL_GPIO_Init+0x2f8>)
 8003018:	4293      	cmp	r3, r2
 800301a:	d007      	beq.n	800302c <HAL_GPIO_Init+0x1e8>
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	4a48      	ldr	r2, [pc, #288]	; (8003140 <HAL_GPIO_Init+0x2fc>)
 8003020:	4293      	cmp	r3, r2
 8003022:	d101      	bne.n	8003028 <HAL_GPIO_Init+0x1e4>
 8003024:	2305      	movs	r3, #5
 8003026:	e00a      	b.n	800303e <HAL_GPIO_Init+0x1fa>
 8003028:	2306      	movs	r3, #6
 800302a:	e008      	b.n	800303e <HAL_GPIO_Init+0x1fa>
 800302c:	2304      	movs	r3, #4
 800302e:	e006      	b.n	800303e <HAL_GPIO_Init+0x1fa>
 8003030:	2303      	movs	r3, #3
 8003032:	e004      	b.n	800303e <HAL_GPIO_Init+0x1fa>
 8003034:	2302      	movs	r3, #2
 8003036:	e002      	b.n	800303e <HAL_GPIO_Init+0x1fa>
 8003038:	2301      	movs	r3, #1
 800303a:	e000      	b.n	800303e <HAL_GPIO_Init+0x1fa>
 800303c:	2300      	movs	r3, #0
 800303e:	697a      	ldr	r2, [r7, #20]
 8003040:	f002 0203 	and.w	r2, r2, #3
 8003044:	0092      	lsls	r2, r2, #2
 8003046:	4093      	lsls	r3, r2
 8003048:	693a      	ldr	r2, [r7, #16]
 800304a:	4313      	orrs	r3, r2
 800304c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800304e:	4937      	ldr	r1, [pc, #220]	; (800312c <HAL_GPIO_Init+0x2e8>)
 8003050:	697b      	ldr	r3, [r7, #20]
 8003052:	089b      	lsrs	r3, r3, #2
 8003054:	3302      	adds	r3, #2
 8003056:	693a      	ldr	r2, [r7, #16]
 8003058:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800305c:	4b39      	ldr	r3, [pc, #228]	; (8003144 <HAL_GPIO_Init+0x300>)
 800305e:	689b      	ldr	r3, [r3, #8]
 8003060:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	43db      	mvns	r3, r3
 8003066:	693a      	ldr	r2, [r7, #16]
 8003068:	4013      	ands	r3, r2
 800306a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800306c:	683b      	ldr	r3, [r7, #0]
 800306e:	685b      	ldr	r3, [r3, #4]
 8003070:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003074:	2b00      	cmp	r3, #0
 8003076:	d003      	beq.n	8003080 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8003078:	693a      	ldr	r2, [r7, #16]
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	4313      	orrs	r3, r2
 800307e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003080:	4a30      	ldr	r2, [pc, #192]	; (8003144 <HAL_GPIO_Init+0x300>)
 8003082:	693b      	ldr	r3, [r7, #16]
 8003084:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8003086:	4b2f      	ldr	r3, [pc, #188]	; (8003144 <HAL_GPIO_Init+0x300>)
 8003088:	68db      	ldr	r3, [r3, #12]
 800308a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	43db      	mvns	r3, r3
 8003090:	693a      	ldr	r2, [r7, #16]
 8003092:	4013      	ands	r3, r2
 8003094:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003096:	683b      	ldr	r3, [r7, #0]
 8003098:	685b      	ldr	r3, [r3, #4]
 800309a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d003      	beq.n	80030aa <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 80030a2:	693a      	ldr	r2, [r7, #16]
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	4313      	orrs	r3, r2
 80030a8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80030aa:	4a26      	ldr	r2, [pc, #152]	; (8003144 <HAL_GPIO_Init+0x300>)
 80030ac:	693b      	ldr	r3, [r7, #16]
 80030ae:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 80030b0:	4b24      	ldr	r3, [pc, #144]	; (8003144 <HAL_GPIO_Init+0x300>)
 80030b2:	685b      	ldr	r3, [r3, #4]
 80030b4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	43db      	mvns	r3, r3
 80030ba:	693a      	ldr	r2, [r7, #16]
 80030bc:	4013      	ands	r3, r2
 80030be:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80030c0:	683b      	ldr	r3, [r7, #0]
 80030c2:	685b      	ldr	r3, [r3, #4]
 80030c4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d003      	beq.n	80030d4 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 80030cc:	693a      	ldr	r2, [r7, #16]
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	4313      	orrs	r3, r2
 80030d2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80030d4:	4a1b      	ldr	r2, [pc, #108]	; (8003144 <HAL_GPIO_Init+0x300>)
 80030d6:	693b      	ldr	r3, [r7, #16]
 80030d8:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80030da:	4b1a      	ldr	r3, [pc, #104]	; (8003144 <HAL_GPIO_Init+0x300>)
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	43db      	mvns	r3, r3
 80030e4:	693a      	ldr	r2, [r7, #16]
 80030e6:	4013      	ands	r3, r2
 80030e8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80030ea:	683b      	ldr	r3, [r7, #0]
 80030ec:	685b      	ldr	r3, [r3, #4]
 80030ee:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d003      	beq.n	80030fe <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 80030f6:	693a      	ldr	r2, [r7, #16]
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	4313      	orrs	r3, r2
 80030fc:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80030fe:	4a11      	ldr	r2, [pc, #68]	; (8003144 <HAL_GPIO_Init+0x300>)
 8003100:	693b      	ldr	r3, [r7, #16]
 8003102:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8003104:	697b      	ldr	r3, [r7, #20]
 8003106:	3301      	adds	r3, #1
 8003108:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 800310a:	683b      	ldr	r3, [r7, #0]
 800310c:	681a      	ldr	r2, [r3, #0]
 800310e:	697b      	ldr	r3, [r7, #20]
 8003110:	fa22 f303 	lsr.w	r3, r2, r3
 8003114:	2b00      	cmp	r3, #0
 8003116:	f47f ae9d 	bne.w	8002e54 <HAL_GPIO_Init+0x10>
  }
}
 800311a:	bf00      	nop
 800311c:	bf00      	nop
 800311e:	371c      	adds	r7, #28
 8003120:	46bd      	mov	sp, r7
 8003122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003126:	4770      	bx	lr
 8003128:	40021000 	.word	0x40021000
 800312c:	40010000 	.word	0x40010000
 8003130:	48000400 	.word	0x48000400
 8003134:	48000800 	.word	0x48000800
 8003138:	48000c00 	.word	0x48000c00
 800313c:	48001000 	.word	0x48001000
 8003140:	48001400 	.word	0x48001400
 8003144:	40010400 	.word	0x40010400

08003148 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003148:	b480      	push	{r7}
 800314a:	b083      	sub	sp, #12
 800314c:	af00      	add	r7, sp, #0
 800314e:	6078      	str	r0, [r7, #4]
 8003150:	460b      	mov	r3, r1
 8003152:	807b      	strh	r3, [r7, #2]
 8003154:	4613      	mov	r3, r2
 8003156:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003158:	787b      	ldrb	r3, [r7, #1]
 800315a:	2b00      	cmp	r3, #0
 800315c:	d003      	beq.n	8003166 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800315e:	887a      	ldrh	r2, [r7, #2]
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003164:	e002      	b.n	800316c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003166:	887a      	ldrh	r2, [r7, #2]
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800316c:	bf00      	nop
 800316e:	370c      	adds	r7, #12
 8003170:	46bd      	mov	sp, r7
 8003172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003176:	4770      	bx	lr

08003178 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003178:	b480      	push	{r7}
 800317a:	b085      	sub	sp, #20
 800317c:	af00      	add	r7, sp, #0
 800317e:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	2b00      	cmp	r3, #0
 8003184:	d141      	bne.n	800320a <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003186:	4b4b      	ldr	r3, [pc, #300]	; (80032b4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800318e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003192:	d131      	bne.n	80031f8 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003194:	4b47      	ldr	r3, [pc, #284]	; (80032b4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003196:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800319a:	4a46      	ldr	r2, [pc, #280]	; (80032b4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800319c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80031a0:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80031a4:	4b43      	ldr	r3, [pc, #268]	; (80032b4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80031ac:	4a41      	ldr	r2, [pc, #260]	; (80032b4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80031ae:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80031b2:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80031b4:	4b40      	ldr	r3, [pc, #256]	; (80032b8 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	2232      	movs	r2, #50	; 0x32
 80031ba:	fb02 f303 	mul.w	r3, r2, r3
 80031be:	4a3f      	ldr	r2, [pc, #252]	; (80032bc <HAL_PWREx_ControlVoltageScaling+0x144>)
 80031c0:	fba2 2303 	umull	r2, r3, r2, r3
 80031c4:	0c9b      	lsrs	r3, r3, #18
 80031c6:	3301      	adds	r3, #1
 80031c8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80031ca:	e002      	b.n	80031d2 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	3b01      	subs	r3, #1
 80031d0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80031d2:	4b38      	ldr	r3, [pc, #224]	; (80032b4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80031d4:	695b      	ldr	r3, [r3, #20]
 80031d6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80031da:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80031de:	d102      	bne.n	80031e6 <HAL_PWREx_ControlVoltageScaling+0x6e>
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d1f2      	bne.n	80031cc <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80031e6:	4b33      	ldr	r3, [pc, #204]	; (80032b4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80031e8:	695b      	ldr	r3, [r3, #20]
 80031ea:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80031ee:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80031f2:	d158      	bne.n	80032a6 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80031f4:	2303      	movs	r3, #3
 80031f6:	e057      	b.n	80032a8 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80031f8:	4b2e      	ldr	r3, [pc, #184]	; (80032b4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80031fa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80031fe:	4a2d      	ldr	r2, [pc, #180]	; (80032b4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003200:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003204:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8003208:	e04d      	b.n	80032a6 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003210:	d141      	bne.n	8003296 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003212:	4b28      	ldr	r3, [pc, #160]	; (80032b4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800321a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800321e:	d131      	bne.n	8003284 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003220:	4b24      	ldr	r3, [pc, #144]	; (80032b4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003222:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003226:	4a23      	ldr	r2, [pc, #140]	; (80032b4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003228:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800322c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003230:	4b20      	ldr	r3, [pc, #128]	; (80032b4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003238:	4a1e      	ldr	r2, [pc, #120]	; (80032b4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800323a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800323e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003240:	4b1d      	ldr	r3, [pc, #116]	; (80032b8 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	2232      	movs	r2, #50	; 0x32
 8003246:	fb02 f303 	mul.w	r3, r2, r3
 800324a:	4a1c      	ldr	r2, [pc, #112]	; (80032bc <HAL_PWREx_ControlVoltageScaling+0x144>)
 800324c:	fba2 2303 	umull	r2, r3, r2, r3
 8003250:	0c9b      	lsrs	r3, r3, #18
 8003252:	3301      	adds	r3, #1
 8003254:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003256:	e002      	b.n	800325e <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	3b01      	subs	r3, #1
 800325c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800325e:	4b15      	ldr	r3, [pc, #84]	; (80032b4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003260:	695b      	ldr	r3, [r3, #20]
 8003262:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003266:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800326a:	d102      	bne.n	8003272 <HAL_PWREx_ControlVoltageScaling+0xfa>
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	2b00      	cmp	r3, #0
 8003270:	d1f2      	bne.n	8003258 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003272:	4b10      	ldr	r3, [pc, #64]	; (80032b4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003274:	695b      	ldr	r3, [r3, #20]
 8003276:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800327a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800327e:	d112      	bne.n	80032a6 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8003280:	2303      	movs	r3, #3
 8003282:	e011      	b.n	80032a8 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003284:	4b0b      	ldr	r3, [pc, #44]	; (80032b4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003286:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800328a:	4a0a      	ldr	r2, [pc, #40]	; (80032b4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800328c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003290:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8003294:	e007      	b.n	80032a6 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003296:	4b07      	ldr	r3, [pc, #28]	; (80032b4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800329e:	4a05      	ldr	r2, [pc, #20]	; (80032b4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80032a0:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80032a4:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 80032a6:	2300      	movs	r3, #0
}
 80032a8:	4618      	mov	r0, r3
 80032aa:	3714      	adds	r7, #20
 80032ac:	46bd      	mov	sp, r7
 80032ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032b2:	4770      	bx	lr
 80032b4:	40007000 	.word	0x40007000
 80032b8:	20000000 	.word	0x20000000
 80032bc:	431bde83 	.word	0x431bde83

080032c0 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 80032c0:	b480      	push	{r7}
 80032c2:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 80032c4:	4b05      	ldr	r3, [pc, #20]	; (80032dc <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80032c6:	689b      	ldr	r3, [r3, #8]
 80032c8:	4a04      	ldr	r2, [pc, #16]	; (80032dc <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80032ca:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80032ce:	6093      	str	r3, [r2, #8]
}
 80032d0:	bf00      	nop
 80032d2:	46bd      	mov	sp, r7
 80032d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032d8:	4770      	bx	lr
 80032da:	bf00      	nop
 80032dc:	40007000 	.word	0x40007000

080032e0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80032e0:	b580      	push	{r7, lr}
 80032e2:	b088      	sub	sp, #32
 80032e4:	af00      	add	r7, sp, #0
 80032e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d101      	bne.n	80032f2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80032ee:	2301      	movs	r3, #1
 80032f0:	e306      	b.n	8003900 <HAL_RCC_OscConfig+0x620>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	f003 0301 	and.w	r3, r3, #1
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d075      	beq.n	80033ea <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80032fe:	4b97      	ldr	r3, [pc, #604]	; (800355c <HAL_RCC_OscConfig+0x27c>)
 8003300:	689b      	ldr	r3, [r3, #8]
 8003302:	f003 030c 	and.w	r3, r3, #12
 8003306:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003308:	4b94      	ldr	r3, [pc, #592]	; (800355c <HAL_RCC_OscConfig+0x27c>)
 800330a:	68db      	ldr	r3, [r3, #12]
 800330c:	f003 0303 	and.w	r3, r3, #3
 8003310:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8003312:	69bb      	ldr	r3, [r7, #24]
 8003314:	2b0c      	cmp	r3, #12
 8003316:	d102      	bne.n	800331e <HAL_RCC_OscConfig+0x3e>
 8003318:	697b      	ldr	r3, [r7, #20]
 800331a:	2b03      	cmp	r3, #3
 800331c:	d002      	beq.n	8003324 <HAL_RCC_OscConfig+0x44>
 800331e:	69bb      	ldr	r3, [r7, #24]
 8003320:	2b08      	cmp	r3, #8
 8003322:	d10b      	bne.n	800333c <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003324:	4b8d      	ldr	r3, [pc, #564]	; (800355c <HAL_RCC_OscConfig+0x27c>)
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800332c:	2b00      	cmp	r3, #0
 800332e:	d05b      	beq.n	80033e8 <HAL_RCC_OscConfig+0x108>
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	685b      	ldr	r3, [r3, #4]
 8003334:	2b00      	cmp	r3, #0
 8003336:	d157      	bne.n	80033e8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003338:	2301      	movs	r3, #1
 800333a:	e2e1      	b.n	8003900 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	685b      	ldr	r3, [r3, #4]
 8003340:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003344:	d106      	bne.n	8003354 <HAL_RCC_OscConfig+0x74>
 8003346:	4b85      	ldr	r3, [pc, #532]	; (800355c <HAL_RCC_OscConfig+0x27c>)
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	4a84      	ldr	r2, [pc, #528]	; (800355c <HAL_RCC_OscConfig+0x27c>)
 800334c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003350:	6013      	str	r3, [r2, #0]
 8003352:	e01d      	b.n	8003390 <HAL_RCC_OscConfig+0xb0>
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	685b      	ldr	r3, [r3, #4]
 8003358:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800335c:	d10c      	bne.n	8003378 <HAL_RCC_OscConfig+0x98>
 800335e:	4b7f      	ldr	r3, [pc, #508]	; (800355c <HAL_RCC_OscConfig+0x27c>)
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	4a7e      	ldr	r2, [pc, #504]	; (800355c <HAL_RCC_OscConfig+0x27c>)
 8003364:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003368:	6013      	str	r3, [r2, #0]
 800336a:	4b7c      	ldr	r3, [pc, #496]	; (800355c <HAL_RCC_OscConfig+0x27c>)
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	4a7b      	ldr	r2, [pc, #492]	; (800355c <HAL_RCC_OscConfig+0x27c>)
 8003370:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003374:	6013      	str	r3, [r2, #0]
 8003376:	e00b      	b.n	8003390 <HAL_RCC_OscConfig+0xb0>
 8003378:	4b78      	ldr	r3, [pc, #480]	; (800355c <HAL_RCC_OscConfig+0x27c>)
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	4a77      	ldr	r2, [pc, #476]	; (800355c <HAL_RCC_OscConfig+0x27c>)
 800337e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003382:	6013      	str	r3, [r2, #0]
 8003384:	4b75      	ldr	r3, [pc, #468]	; (800355c <HAL_RCC_OscConfig+0x27c>)
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	4a74      	ldr	r2, [pc, #464]	; (800355c <HAL_RCC_OscConfig+0x27c>)
 800338a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800338e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	685b      	ldr	r3, [r3, #4]
 8003394:	2b00      	cmp	r3, #0
 8003396:	d013      	beq.n	80033c0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003398:	f7fe f82c 	bl	80013f4 <HAL_GetTick>
 800339c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800339e:	e008      	b.n	80033b2 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80033a0:	f7fe f828 	bl	80013f4 <HAL_GetTick>
 80033a4:	4602      	mov	r2, r0
 80033a6:	693b      	ldr	r3, [r7, #16]
 80033a8:	1ad3      	subs	r3, r2, r3
 80033aa:	2b64      	cmp	r3, #100	; 0x64
 80033ac:	d901      	bls.n	80033b2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80033ae:	2303      	movs	r3, #3
 80033b0:	e2a6      	b.n	8003900 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80033b2:	4b6a      	ldr	r3, [pc, #424]	; (800355c <HAL_RCC_OscConfig+0x27c>)
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d0f0      	beq.n	80033a0 <HAL_RCC_OscConfig+0xc0>
 80033be:	e014      	b.n	80033ea <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033c0:	f7fe f818 	bl	80013f4 <HAL_GetTick>
 80033c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80033c6:	e008      	b.n	80033da <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80033c8:	f7fe f814 	bl	80013f4 <HAL_GetTick>
 80033cc:	4602      	mov	r2, r0
 80033ce:	693b      	ldr	r3, [r7, #16]
 80033d0:	1ad3      	subs	r3, r2, r3
 80033d2:	2b64      	cmp	r3, #100	; 0x64
 80033d4:	d901      	bls.n	80033da <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80033d6:	2303      	movs	r3, #3
 80033d8:	e292      	b.n	8003900 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80033da:	4b60      	ldr	r3, [pc, #384]	; (800355c <HAL_RCC_OscConfig+0x27c>)
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d1f0      	bne.n	80033c8 <HAL_RCC_OscConfig+0xe8>
 80033e6:	e000      	b.n	80033ea <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80033e8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	f003 0302 	and.w	r3, r3, #2
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d075      	beq.n	80034e2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80033f6:	4b59      	ldr	r3, [pc, #356]	; (800355c <HAL_RCC_OscConfig+0x27c>)
 80033f8:	689b      	ldr	r3, [r3, #8]
 80033fa:	f003 030c 	and.w	r3, r3, #12
 80033fe:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003400:	4b56      	ldr	r3, [pc, #344]	; (800355c <HAL_RCC_OscConfig+0x27c>)
 8003402:	68db      	ldr	r3, [r3, #12]
 8003404:	f003 0303 	and.w	r3, r3, #3
 8003408:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 800340a:	69bb      	ldr	r3, [r7, #24]
 800340c:	2b0c      	cmp	r3, #12
 800340e:	d102      	bne.n	8003416 <HAL_RCC_OscConfig+0x136>
 8003410:	697b      	ldr	r3, [r7, #20]
 8003412:	2b02      	cmp	r3, #2
 8003414:	d002      	beq.n	800341c <HAL_RCC_OscConfig+0x13c>
 8003416:	69bb      	ldr	r3, [r7, #24]
 8003418:	2b04      	cmp	r3, #4
 800341a:	d11f      	bne.n	800345c <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800341c:	4b4f      	ldr	r3, [pc, #316]	; (800355c <HAL_RCC_OscConfig+0x27c>)
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003424:	2b00      	cmp	r3, #0
 8003426:	d005      	beq.n	8003434 <HAL_RCC_OscConfig+0x154>
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	68db      	ldr	r3, [r3, #12]
 800342c:	2b00      	cmp	r3, #0
 800342e:	d101      	bne.n	8003434 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8003430:	2301      	movs	r3, #1
 8003432:	e265      	b.n	8003900 <HAL_RCC_OscConfig+0x620>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003434:	4b49      	ldr	r3, [pc, #292]	; (800355c <HAL_RCC_OscConfig+0x27c>)
 8003436:	685b      	ldr	r3, [r3, #4]
 8003438:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	691b      	ldr	r3, [r3, #16]
 8003440:	061b      	lsls	r3, r3, #24
 8003442:	4946      	ldr	r1, [pc, #280]	; (800355c <HAL_RCC_OscConfig+0x27c>)
 8003444:	4313      	orrs	r3, r2
 8003446:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8003448:	4b45      	ldr	r3, [pc, #276]	; (8003560 <HAL_RCC_OscConfig+0x280>)
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	4618      	mov	r0, r3
 800344e:	f7fd ff85 	bl	800135c <HAL_InitTick>
 8003452:	4603      	mov	r3, r0
 8003454:	2b00      	cmp	r3, #0
 8003456:	d043      	beq.n	80034e0 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8003458:	2301      	movs	r3, #1
 800345a:	e251      	b.n	8003900 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	68db      	ldr	r3, [r3, #12]
 8003460:	2b00      	cmp	r3, #0
 8003462:	d023      	beq.n	80034ac <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003464:	4b3d      	ldr	r3, [pc, #244]	; (800355c <HAL_RCC_OscConfig+0x27c>)
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	4a3c      	ldr	r2, [pc, #240]	; (800355c <HAL_RCC_OscConfig+0x27c>)
 800346a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800346e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003470:	f7fd ffc0 	bl	80013f4 <HAL_GetTick>
 8003474:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003476:	e008      	b.n	800348a <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003478:	f7fd ffbc 	bl	80013f4 <HAL_GetTick>
 800347c:	4602      	mov	r2, r0
 800347e:	693b      	ldr	r3, [r7, #16]
 8003480:	1ad3      	subs	r3, r2, r3
 8003482:	2b02      	cmp	r3, #2
 8003484:	d901      	bls.n	800348a <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8003486:	2303      	movs	r3, #3
 8003488:	e23a      	b.n	8003900 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800348a:	4b34      	ldr	r3, [pc, #208]	; (800355c <HAL_RCC_OscConfig+0x27c>)
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003492:	2b00      	cmp	r3, #0
 8003494:	d0f0      	beq.n	8003478 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003496:	4b31      	ldr	r3, [pc, #196]	; (800355c <HAL_RCC_OscConfig+0x27c>)
 8003498:	685b      	ldr	r3, [r3, #4]
 800349a:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	691b      	ldr	r3, [r3, #16]
 80034a2:	061b      	lsls	r3, r3, #24
 80034a4:	492d      	ldr	r1, [pc, #180]	; (800355c <HAL_RCC_OscConfig+0x27c>)
 80034a6:	4313      	orrs	r3, r2
 80034a8:	604b      	str	r3, [r1, #4]
 80034aa:	e01a      	b.n	80034e2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80034ac:	4b2b      	ldr	r3, [pc, #172]	; (800355c <HAL_RCC_OscConfig+0x27c>)
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	4a2a      	ldr	r2, [pc, #168]	; (800355c <HAL_RCC_OscConfig+0x27c>)
 80034b2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80034b6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034b8:	f7fd ff9c 	bl	80013f4 <HAL_GetTick>
 80034bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80034be:	e008      	b.n	80034d2 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80034c0:	f7fd ff98 	bl	80013f4 <HAL_GetTick>
 80034c4:	4602      	mov	r2, r0
 80034c6:	693b      	ldr	r3, [r7, #16]
 80034c8:	1ad3      	subs	r3, r2, r3
 80034ca:	2b02      	cmp	r3, #2
 80034cc:	d901      	bls.n	80034d2 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 80034ce:	2303      	movs	r3, #3
 80034d0:	e216      	b.n	8003900 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80034d2:	4b22      	ldr	r3, [pc, #136]	; (800355c <HAL_RCC_OscConfig+0x27c>)
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d1f0      	bne.n	80034c0 <HAL_RCC_OscConfig+0x1e0>
 80034de:	e000      	b.n	80034e2 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80034e0:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	f003 0308 	and.w	r3, r3, #8
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d041      	beq.n	8003572 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	695b      	ldr	r3, [r3, #20]
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d01c      	beq.n	8003530 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80034f6:	4b19      	ldr	r3, [pc, #100]	; (800355c <HAL_RCC_OscConfig+0x27c>)
 80034f8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80034fc:	4a17      	ldr	r2, [pc, #92]	; (800355c <HAL_RCC_OscConfig+0x27c>)
 80034fe:	f043 0301 	orr.w	r3, r3, #1
 8003502:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003506:	f7fd ff75 	bl	80013f4 <HAL_GetTick>
 800350a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800350c:	e008      	b.n	8003520 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800350e:	f7fd ff71 	bl	80013f4 <HAL_GetTick>
 8003512:	4602      	mov	r2, r0
 8003514:	693b      	ldr	r3, [r7, #16]
 8003516:	1ad3      	subs	r3, r2, r3
 8003518:	2b02      	cmp	r3, #2
 800351a:	d901      	bls.n	8003520 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800351c:	2303      	movs	r3, #3
 800351e:	e1ef      	b.n	8003900 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003520:	4b0e      	ldr	r3, [pc, #56]	; (800355c <HAL_RCC_OscConfig+0x27c>)
 8003522:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003526:	f003 0302 	and.w	r3, r3, #2
 800352a:	2b00      	cmp	r3, #0
 800352c:	d0ef      	beq.n	800350e <HAL_RCC_OscConfig+0x22e>
 800352e:	e020      	b.n	8003572 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003530:	4b0a      	ldr	r3, [pc, #40]	; (800355c <HAL_RCC_OscConfig+0x27c>)
 8003532:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003536:	4a09      	ldr	r2, [pc, #36]	; (800355c <HAL_RCC_OscConfig+0x27c>)
 8003538:	f023 0301 	bic.w	r3, r3, #1
 800353c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003540:	f7fd ff58 	bl	80013f4 <HAL_GetTick>
 8003544:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003546:	e00d      	b.n	8003564 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003548:	f7fd ff54 	bl	80013f4 <HAL_GetTick>
 800354c:	4602      	mov	r2, r0
 800354e:	693b      	ldr	r3, [r7, #16]
 8003550:	1ad3      	subs	r3, r2, r3
 8003552:	2b02      	cmp	r3, #2
 8003554:	d906      	bls.n	8003564 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8003556:	2303      	movs	r3, #3
 8003558:	e1d2      	b.n	8003900 <HAL_RCC_OscConfig+0x620>
 800355a:	bf00      	nop
 800355c:	40021000 	.word	0x40021000
 8003560:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003564:	4b8c      	ldr	r3, [pc, #560]	; (8003798 <HAL_RCC_OscConfig+0x4b8>)
 8003566:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800356a:	f003 0302 	and.w	r3, r3, #2
 800356e:	2b00      	cmp	r3, #0
 8003570:	d1ea      	bne.n	8003548 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	f003 0304 	and.w	r3, r3, #4
 800357a:	2b00      	cmp	r3, #0
 800357c:	f000 80a6 	beq.w	80036cc <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003580:	2300      	movs	r3, #0
 8003582:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003584:	4b84      	ldr	r3, [pc, #528]	; (8003798 <HAL_RCC_OscConfig+0x4b8>)
 8003586:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003588:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800358c:	2b00      	cmp	r3, #0
 800358e:	d101      	bne.n	8003594 <HAL_RCC_OscConfig+0x2b4>
 8003590:	2301      	movs	r3, #1
 8003592:	e000      	b.n	8003596 <HAL_RCC_OscConfig+0x2b6>
 8003594:	2300      	movs	r3, #0
 8003596:	2b00      	cmp	r3, #0
 8003598:	d00d      	beq.n	80035b6 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800359a:	4b7f      	ldr	r3, [pc, #508]	; (8003798 <HAL_RCC_OscConfig+0x4b8>)
 800359c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800359e:	4a7e      	ldr	r2, [pc, #504]	; (8003798 <HAL_RCC_OscConfig+0x4b8>)
 80035a0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80035a4:	6593      	str	r3, [r2, #88]	; 0x58
 80035a6:	4b7c      	ldr	r3, [pc, #496]	; (8003798 <HAL_RCC_OscConfig+0x4b8>)
 80035a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80035aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80035ae:	60fb      	str	r3, [r7, #12]
 80035b0:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80035b2:	2301      	movs	r3, #1
 80035b4:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80035b6:	4b79      	ldr	r3, [pc, #484]	; (800379c <HAL_RCC_OscConfig+0x4bc>)
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d118      	bne.n	80035f4 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80035c2:	4b76      	ldr	r3, [pc, #472]	; (800379c <HAL_RCC_OscConfig+0x4bc>)
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	4a75      	ldr	r2, [pc, #468]	; (800379c <HAL_RCC_OscConfig+0x4bc>)
 80035c8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80035cc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80035ce:	f7fd ff11 	bl	80013f4 <HAL_GetTick>
 80035d2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80035d4:	e008      	b.n	80035e8 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80035d6:	f7fd ff0d 	bl	80013f4 <HAL_GetTick>
 80035da:	4602      	mov	r2, r0
 80035dc:	693b      	ldr	r3, [r7, #16]
 80035de:	1ad3      	subs	r3, r2, r3
 80035e0:	2b02      	cmp	r3, #2
 80035e2:	d901      	bls.n	80035e8 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 80035e4:	2303      	movs	r3, #3
 80035e6:	e18b      	b.n	8003900 <HAL_RCC_OscConfig+0x620>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80035e8:	4b6c      	ldr	r3, [pc, #432]	; (800379c <HAL_RCC_OscConfig+0x4bc>)
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	d0f0      	beq.n	80035d6 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	689b      	ldr	r3, [r3, #8]
 80035f8:	2b01      	cmp	r3, #1
 80035fa:	d108      	bne.n	800360e <HAL_RCC_OscConfig+0x32e>
 80035fc:	4b66      	ldr	r3, [pc, #408]	; (8003798 <HAL_RCC_OscConfig+0x4b8>)
 80035fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003602:	4a65      	ldr	r2, [pc, #404]	; (8003798 <HAL_RCC_OscConfig+0x4b8>)
 8003604:	f043 0301 	orr.w	r3, r3, #1
 8003608:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800360c:	e024      	b.n	8003658 <HAL_RCC_OscConfig+0x378>
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	689b      	ldr	r3, [r3, #8]
 8003612:	2b05      	cmp	r3, #5
 8003614:	d110      	bne.n	8003638 <HAL_RCC_OscConfig+0x358>
 8003616:	4b60      	ldr	r3, [pc, #384]	; (8003798 <HAL_RCC_OscConfig+0x4b8>)
 8003618:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800361c:	4a5e      	ldr	r2, [pc, #376]	; (8003798 <HAL_RCC_OscConfig+0x4b8>)
 800361e:	f043 0304 	orr.w	r3, r3, #4
 8003622:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003626:	4b5c      	ldr	r3, [pc, #368]	; (8003798 <HAL_RCC_OscConfig+0x4b8>)
 8003628:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800362c:	4a5a      	ldr	r2, [pc, #360]	; (8003798 <HAL_RCC_OscConfig+0x4b8>)
 800362e:	f043 0301 	orr.w	r3, r3, #1
 8003632:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003636:	e00f      	b.n	8003658 <HAL_RCC_OscConfig+0x378>
 8003638:	4b57      	ldr	r3, [pc, #348]	; (8003798 <HAL_RCC_OscConfig+0x4b8>)
 800363a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800363e:	4a56      	ldr	r2, [pc, #344]	; (8003798 <HAL_RCC_OscConfig+0x4b8>)
 8003640:	f023 0301 	bic.w	r3, r3, #1
 8003644:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003648:	4b53      	ldr	r3, [pc, #332]	; (8003798 <HAL_RCC_OscConfig+0x4b8>)
 800364a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800364e:	4a52      	ldr	r2, [pc, #328]	; (8003798 <HAL_RCC_OscConfig+0x4b8>)
 8003650:	f023 0304 	bic.w	r3, r3, #4
 8003654:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	689b      	ldr	r3, [r3, #8]
 800365c:	2b00      	cmp	r3, #0
 800365e:	d016      	beq.n	800368e <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003660:	f7fd fec8 	bl	80013f4 <HAL_GetTick>
 8003664:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003666:	e00a      	b.n	800367e <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003668:	f7fd fec4 	bl	80013f4 <HAL_GetTick>
 800366c:	4602      	mov	r2, r0
 800366e:	693b      	ldr	r3, [r7, #16]
 8003670:	1ad3      	subs	r3, r2, r3
 8003672:	f241 3288 	movw	r2, #5000	; 0x1388
 8003676:	4293      	cmp	r3, r2
 8003678:	d901      	bls.n	800367e <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 800367a:	2303      	movs	r3, #3
 800367c:	e140      	b.n	8003900 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800367e:	4b46      	ldr	r3, [pc, #280]	; (8003798 <HAL_RCC_OscConfig+0x4b8>)
 8003680:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003684:	f003 0302 	and.w	r3, r3, #2
 8003688:	2b00      	cmp	r3, #0
 800368a:	d0ed      	beq.n	8003668 <HAL_RCC_OscConfig+0x388>
 800368c:	e015      	b.n	80036ba <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800368e:	f7fd feb1 	bl	80013f4 <HAL_GetTick>
 8003692:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003694:	e00a      	b.n	80036ac <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003696:	f7fd fead 	bl	80013f4 <HAL_GetTick>
 800369a:	4602      	mov	r2, r0
 800369c:	693b      	ldr	r3, [r7, #16]
 800369e:	1ad3      	subs	r3, r2, r3
 80036a0:	f241 3288 	movw	r2, #5000	; 0x1388
 80036a4:	4293      	cmp	r3, r2
 80036a6:	d901      	bls.n	80036ac <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 80036a8:	2303      	movs	r3, #3
 80036aa:	e129      	b.n	8003900 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80036ac:	4b3a      	ldr	r3, [pc, #232]	; (8003798 <HAL_RCC_OscConfig+0x4b8>)
 80036ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80036b2:	f003 0302 	and.w	r3, r3, #2
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d1ed      	bne.n	8003696 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80036ba:	7ffb      	ldrb	r3, [r7, #31]
 80036bc:	2b01      	cmp	r3, #1
 80036be:	d105      	bne.n	80036cc <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80036c0:	4b35      	ldr	r3, [pc, #212]	; (8003798 <HAL_RCC_OscConfig+0x4b8>)
 80036c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80036c4:	4a34      	ldr	r2, [pc, #208]	; (8003798 <HAL_RCC_OscConfig+0x4b8>)
 80036c6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80036ca:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	f003 0320 	and.w	r3, r3, #32
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	d03c      	beq.n	8003752 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	699b      	ldr	r3, [r3, #24]
 80036dc:	2b00      	cmp	r3, #0
 80036de:	d01c      	beq.n	800371a <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80036e0:	4b2d      	ldr	r3, [pc, #180]	; (8003798 <HAL_RCC_OscConfig+0x4b8>)
 80036e2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80036e6:	4a2c      	ldr	r2, [pc, #176]	; (8003798 <HAL_RCC_OscConfig+0x4b8>)
 80036e8:	f043 0301 	orr.w	r3, r3, #1
 80036ec:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80036f0:	f7fd fe80 	bl	80013f4 <HAL_GetTick>
 80036f4:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80036f6:	e008      	b.n	800370a <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80036f8:	f7fd fe7c 	bl	80013f4 <HAL_GetTick>
 80036fc:	4602      	mov	r2, r0
 80036fe:	693b      	ldr	r3, [r7, #16]
 8003700:	1ad3      	subs	r3, r2, r3
 8003702:	2b02      	cmp	r3, #2
 8003704:	d901      	bls.n	800370a <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8003706:	2303      	movs	r3, #3
 8003708:	e0fa      	b.n	8003900 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800370a:	4b23      	ldr	r3, [pc, #140]	; (8003798 <HAL_RCC_OscConfig+0x4b8>)
 800370c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003710:	f003 0302 	and.w	r3, r3, #2
 8003714:	2b00      	cmp	r3, #0
 8003716:	d0ef      	beq.n	80036f8 <HAL_RCC_OscConfig+0x418>
 8003718:	e01b      	b.n	8003752 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800371a:	4b1f      	ldr	r3, [pc, #124]	; (8003798 <HAL_RCC_OscConfig+0x4b8>)
 800371c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003720:	4a1d      	ldr	r2, [pc, #116]	; (8003798 <HAL_RCC_OscConfig+0x4b8>)
 8003722:	f023 0301 	bic.w	r3, r3, #1
 8003726:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800372a:	f7fd fe63 	bl	80013f4 <HAL_GetTick>
 800372e:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003730:	e008      	b.n	8003744 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003732:	f7fd fe5f 	bl	80013f4 <HAL_GetTick>
 8003736:	4602      	mov	r2, r0
 8003738:	693b      	ldr	r3, [r7, #16]
 800373a:	1ad3      	subs	r3, r2, r3
 800373c:	2b02      	cmp	r3, #2
 800373e:	d901      	bls.n	8003744 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8003740:	2303      	movs	r3, #3
 8003742:	e0dd      	b.n	8003900 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003744:	4b14      	ldr	r3, [pc, #80]	; (8003798 <HAL_RCC_OscConfig+0x4b8>)
 8003746:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800374a:	f003 0302 	and.w	r3, r3, #2
 800374e:	2b00      	cmp	r3, #0
 8003750:	d1ef      	bne.n	8003732 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	69db      	ldr	r3, [r3, #28]
 8003756:	2b00      	cmp	r3, #0
 8003758:	f000 80d1 	beq.w	80038fe <HAL_RCC_OscConfig+0x61e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800375c:	4b0e      	ldr	r3, [pc, #56]	; (8003798 <HAL_RCC_OscConfig+0x4b8>)
 800375e:	689b      	ldr	r3, [r3, #8]
 8003760:	f003 030c 	and.w	r3, r3, #12
 8003764:	2b0c      	cmp	r3, #12
 8003766:	f000 808b 	beq.w	8003880 <HAL_RCC_OscConfig+0x5a0>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	69db      	ldr	r3, [r3, #28]
 800376e:	2b02      	cmp	r3, #2
 8003770:	d15e      	bne.n	8003830 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003772:	4b09      	ldr	r3, [pc, #36]	; (8003798 <HAL_RCC_OscConfig+0x4b8>)
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	4a08      	ldr	r2, [pc, #32]	; (8003798 <HAL_RCC_OscConfig+0x4b8>)
 8003778:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800377c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800377e:	f7fd fe39 	bl	80013f4 <HAL_GetTick>
 8003782:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003784:	e00c      	b.n	80037a0 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003786:	f7fd fe35 	bl	80013f4 <HAL_GetTick>
 800378a:	4602      	mov	r2, r0
 800378c:	693b      	ldr	r3, [r7, #16]
 800378e:	1ad3      	subs	r3, r2, r3
 8003790:	2b02      	cmp	r3, #2
 8003792:	d905      	bls.n	80037a0 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8003794:	2303      	movs	r3, #3
 8003796:	e0b3      	b.n	8003900 <HAL_RCC_OscConfig+0x620>
 8003798:	40021000 	.word	0x40021000
 800379c:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80037a0:	4b59      	ldr	r3, [pc, #356]	; (8003908 <HAL_RCC_OscConfig+0x628>)
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d1ec      	bne.n	8003786 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80037ac:	4b56      	ldr	r3, [pc, #344]	; (8003908 <HAL_RCC_OscConfig+0x628>)
 80037ae:	68da      	ldr	r2, [r3, #12]
 80037b0:	4b56      	ldr	r3, [pc, #344]	; (800390c <HAL_RCC_OscConfig+0x62c>)
 80037b2:	4013      	ands	r3, r2
 80037b4:	687a      	ldr	r2, [r7, #4]
 80037b6:	6a11      	ldr	r1, [r2, #32]
 80037b8:	687a      	ldr	r2, [r7, #4]
 80037ba:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80037bc:	3a01      	subs	r2, #1
 80037be:	0112      	lsls	r2, r2, #4
 80037c0:	4311      	orrs	r1, r2
 80037c2:	687a      	ldr	r2, [r7, #4]
 80037c4:	6a92      	ldr	r2, [r2, #40]	; 0x28
 80037c6:	0212      	lsls	r2, r2, #8
 80037c8:	4311      	orrs	r1, r2
 80037ca:	687a      	ldr	r2, [r7, #4]
 80037cc:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80037ce:	0852      	lsrs	r2, r2, #1
 80037d0:	3a01      	subs	r2, #1
 80037d2:	0552      	lsls	r2, r2, #21
 80037d4:	4311      	orrs	r1, r2
 80037d6:	687a      	ldr	r2, [r7, #4]
 80037d8:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80037da:	0852      	lsrs	r2, r2, #1
 80037dc:	3a01      	subs	r2, #1
 80037de:	0652      	lsls	r2, r2, #25
 80037e0:	4311      	orrs	r1, r2
 80037e2:	687a      	ldr	r2, [r7, #4]
 80037e4:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80037e6:	06d2      	lsls	r2, r2, #27
 80037e8:	430a      	orrs	r2, r1
 80037ea:	4947      	ldr	r1, [pc, #284]	; (8003908 <HAL_RCC_OscConfig+0x628>)
 80037ec:	4313      	orrs	r3, r2
 80037ee:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80037f0:	4b45      	ldr	r3, [pc, #276]	; (8003908 <HAL_RCC_OscConfig+0x628>)
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	4a44      	ldr	r2, [pc, #272]	; (8003908 <HAL_RCC_OscConfig+0x628>)
 80037f6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80037fa:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80037fc:	4b42      	ldr	r3, [pc, #264]	; (8003908 <HAL_RCC_OscConfig+0x628>)
 80037fe:	68db      	ldr	r3, [r3, #12]
 8003800:	4a41      	ldr	r2, [pc, #260]	; (8003908 <HAL_RCC_OscConfig+0x628>)
 8003802:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003806:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003808:	f7fd fdf4 	bl	80013f4 <HAL_GetTick>
 800380c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800380e:	e008      	b.n	8003822 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003810:	f7fd fdf0 	bl	80013f4 <HAL_GetTick>
 8003814:	4602      	mov	r2, r0
 8003816:	693b      	ldr	r3, [r7, #16]
 8003818:	1ad3      	subs	r3, r2, r3
 800381a:	2b02      	cmp	r3, #2
 800381c:	d901      	bls.n	8003822 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 800381e:	2303      	movs	r3, #3
 8003820:	e06e      	b.n	8003900 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003822:	4b39      	ldr	r3, [pc, #228]	; (8003908 <HAL_RCC_OscConfig+0x628>)
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800382a:	2b00      	cmp	r3, #0
 800382c:	d0f0      	beq.n	8003810 <HAL_RCC_OscConfig+0x530>
 800382e:	e066      	b.n	80038fe <HAL_RCC_OscConfig+0x61e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003830:	4b35      	ldr	r3, [pc, #212]	; (8003908 <HAL_RCC_OscConfig+0x628>)
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	4a34      	ldr	r2, [pc, #208]	; (8003908 <HAL_RCC_OscConfig+0x628>)
 8003836:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800383a:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 800383c:	4b32      	ldr	r3, [pc, #200]	; (8003908 <HAL_RCC_OscConfig+0x628>)
 800383e:	68db      	ldr	r3, [r3, #12]
 8003840:	4a31      	ldr	r2, [pc, #196]	; (8003908 <HAL_RCC_OscConfig+0x628>)
 8003842:	f023 0303 	bic.w	r3, r3, #3
 8003846:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8003848:	4b2f      	ldr	r3, [pc, #188]	; (8003908 <HAL_RCC_OscConfig+0x628>)
 800384a:	68db      	ldr	r3, [r3, #12]
 800384c:	4a2e      	ldr	r2, [pc, #184]	; (8003908 <HAL_RCC_OscConfig+0x628>)
 800384e:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8003852:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003856:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003858:	f7fd fdcc 	bl	80013f4 <HAL_GetTick>
 800385c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800385e:	e008      	b.n	8003872 <HAL_RCC_OscConfig+0x592>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003860:	f7fd fdc8 	bl	80013f4 <HAL_GetTick>
 8003864:	4602      	mov	r2, r0
 8003866:	693b      	ldr	r3, [r7, #16]
 8003868:	1ad3      	subs	r3, r2, r3
 800386a:	2b02      	cmp	r3, #2
 800386c:	d901      	bls.n	8003872 <HAL_RCC_OscConfig+0x592>
          {
            return HAL_TIMEOUT;
 800386e:	2303      	movs	r3, #3
 8003870:	e046      	b.n	8003900 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003872:	4b25      	ldr	r3, [pc, #148]	; (8003908 <HAL_RCC_OscConfig+0x628>)
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800387a:	2b00      	cmp	r3, #0
 800387c:	d1f0      	bne.n	8003860 <HAL_RCC_OscConfig+0x580>
 800387e:	e03e      	b.n	80038fe <HAL_RCC_OscConfig+0x61e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	69db      	ldr	r3, [r3, #28]
 8003884:	2b01      	cmp	r3, #1
 8003886:	d101      	bne.n	800388c <HAL_RCC_OscConfig+0x5ac>
      {
        return HAL_ERROR;
 8003888:	2301      	movs	r3, #1
 800388a:	e039      	b.n	8003900 <HAL_RCC_OscConfig+0x620>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 800388c:	4b1e      	ldr	r3, [pc, #120]	; (8003908 <HAL_RCC_OscConfig+0x628>)
 800388e:	68db      	ldr	r3, [r3, #12]
 8003890:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003892:	697b      	ldr	r3, [r7, #20]
 8003894:	f003 0203 	and.w	r2, r3, #3
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	6a1b      	ldr	r3, [r3, #32]
 800389c:	429a      	cmp	r2, r3
 800389e:	d12c      	bne.n	80038fa <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80038a0:	697b      	ldr	r3, [r7, #20]
 80038a2:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038aa:	3b01      	subs	r3, #1
 80038ac:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80038ae:	429a      	cmp	r2, r3
 80038b0:	d123      	bne.n	80038fa <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80038b2:	697b      	ldr	r3, [r7, #20]
 80038b4:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038bc:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80038be:	429a      	cmp	r2, r3
 80038c0:	d11b      	bne.n	80038fa <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80038c2:	697b      	ldr	r3, [r7, #20]
 80038c4:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038cc:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80038ce:	429a      	cmp	r2, r3
 80038d0:	d113      	bne.n	80038fa <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80038d2:	697b      	ldr	r3, [r7, #20]
 80038d4:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038dc:	085b      	lsrs	r3, r3, #1
 80038de:	3b01      	subs	r3, #1
 80038e0:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80038e2:	429a      	cmp	r2, r3
 80038e4:	d109      	bne.n	80038fa <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80038e6:	697b      	ldr	r3, [r7, #20]
 80038e8:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80038f0:	085b      	lsrs	r3, r3, #1
 80038f2:	3b01      	subs	r3, #1
 80038f4:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80038f6:	429a      	cmp	r2, r3
 80038f8:	d001      	beq.n	80038fe <HAL_RCC_OscConfig+0x61e>
      {
        return HAL_ERROR;
 80038fa:	2301      	movs	r3, #1
 80038fc:	e000      	b.n	8003900 <HAL_RCC_OscConfig+0x620>
      }
    }
  }
  }

  return HAL_OK;
 80038fe:	2300      	movs	r3, #0
}
 8003900:	4618      	mov	r0, r3
 8003902:	3720      	adds	r7, #32
 8003904:	46bd      	mov	sp, r7
 8003906:	bd80      	pop	{r7, pc}
 8003908:	40021000 	.word	0x40021000
 800390c:	019f800c 	.word	0x019f800c

08003910 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003910:	b580      	push	{r7, lr}
 8003912:	b086      	sub	sp, #24
 8003914:	af00      	add	r7, sp, #0
 8003916:	6078      	str	r0, [r7, #4]
 8003918:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 800391a:	2300      	movs	r3, #0
 800391c:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	2b00      	cmp	r3, #0
 8003922:	d101      	bne.n	8003928 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003924:	2301      	movs	r3, #1
 8003926:	e11e      	b.n	8003b66 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003928:	4b91      	ldr	r3, [pc, #580]	; (8003b70 <HAL_RCC_ClockConfig+0x260>)
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	f003 030f 	and.w	r3, r3, #15
 8003930:	683a      	ldr	r2, [r7, #0]
 8003932:	429a      	cmp	r2, r3
 8003934:	d910      	bls.n	8003958 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003936:	4b8e      	ldr	r3, [pc, #568]	; (8003b70 <HAL_RCC_ClockConfig+0x260>)
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	f023 020f 	bic.w	r2, r3, #15
 800393e:	498c      	ldr	r1, [pc, #560]	; (8003b70 <HAL_RCC_ClockConfig+0x260>)
 8003940:	683b      	ldr	r3, [r7, #0]
 8003942:	4313      	orrs	r3, r2
 8003944:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003946:	4b8a      	ldr	r3, [pc, #552]	; (8003b70 <HAL_RCC_ClockConfig+0x260>)
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	f003 030f 	and.w	r3, r3, #15
 800394e:	683a      	ldr	r2, [r7, #0]
 8003950:	429a      	cmp	r2, r3
 8003952:	d001      	beq.n	8003958 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003954:	2301      	movs	r3, #1
 8003956:	e106      	b.n	8003b66 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	f003 0301 	and.w	r3, r3, #1
 8003960:	2b00      	cmp	r3, #0
 8003962:	d073      	beq.n	8003a4c <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	685b      	ldr	r3, [r3, #4]
 8003968:	2b03      	cmp	r3, #3
 800396a:	d129      	bne.n	80039c0 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800396c:	4b81      	ldr	r3, [pc, #516]	; (8003b74 <HAL_RCC_ClockConfig+0x264>)
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003974:	2b00      	cmp	r3, #0
 8003976:	d101      	bne.n	800397c <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8003978:	2301      	movs	r3, #1
 800397a:	e0f4      	b.n	8003b66 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 800397c:	f000 f99e 	bl	8003cbc <RCC_GetSysClockFreqFromPLLSource>
 8003980:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8003982:	693b      	ldr	r3, [r7, #16]
 8003984:	4a7c      	ldr	r2, [pc, #496]	; (8003b78 <HAL_RCC_ClockConfig+0x268>)
 8003986:	4293      	cmp	r3, r2
 8003988:	d93f      	bls.n	8003a0a <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800398a:	4b7a      	ldr	r3, [pc, #488]	; (8003b74 <HAL_RCC_ClockConfig+0x264>)
 800398c:	689b      	ldr	r3, [r3, #8]
 800398e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003992:	2b00      	cmp	r3, #0
 8003994:	d009      	beq.n	80039aa <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d033      	beq.n	8003a0a <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d12f      	bne.n	8003a0a <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80039aa:	4b72      	ldr	r3, [pc, #456]	; (8003b74 <HAL_RCC_ClockConfig+0x264>)
 80039ac:	689b      	ldr	r3, [r3, #8]
 80039ae:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80039b2:	4a70      	ldr	r2, [pc, #448]	; (8003b74 <HAL_RCC_ClockConfig+0x264>)
 80039b4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80039b8:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80039ba:	2380      	movs	r3, #128	; 0x80
 80039bc:	617b      	str	r3, [r7, #20]
 80039be:	e024      	b.n	8003a0a <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	685b      	ldr	r3, [r3, #4]
 80039c4:	2b02      	cmp	r3, #2
 80039c6:	d107      	bne.n	80039d8 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80039c8:	4b6a      	ldr	r3, [pc, #424]	; (8003b74 <HAL_RCC_ClockConfig+0x264>)
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	d109      	bne.n	80039e8 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80039d4:	2301      	movs	r3, #1
 80039d6:	e0c6      	b.n	8003b66 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80039d8:	4b66      	ldr	r3, [pc, #408]	; (8003b74 <HAL_RCC_ClockConfig+0x264>)
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	d101      	bne.n	80039e8 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80039e4:	2301      	movs	r3, #1
 80039e6:	e0be      	b.n	8003b66 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 80039e8:	f000 f8ce 	bl	8003b88 <HAL_RCC_GetSysClockFreq>
 80039ec:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 80039ee:	693b      	ldr	r3, [r7, #16]
 80039f0:	4a61      	ldr	r2, [pc, #388]	; (8003b78 <HAL_RCC_ClockConfig+0x268>)
 80039f2:	4293      	cmp	r3, r2
 80039f4:	d909      	bls.n	8003a0a <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80039f6:	4b5f      	ldr	r3, [pc, #380]	; (8003b74 <HAL_RCC_ClockConfig+0x264>)
 80039f8:	689b      	ldr	r3, [r3, #8]
 80039fa:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80039fe:	4a5d      	ldr	r2, [pc, #372]	; (8003b74 <HAL_RCC_ClockConfig+0x264>)
 8003a00:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003a04:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8003a06:	2380      	movs	r3, #128	; 0x80
 8003a08:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003a0a:	4b5a      	ldr	r3, [pc, #360]	; (8003b74 <HAL_RCC_ClockConfig+0x264>)
 8003a0c:	689b      	ldr	r3, [r3, #8]
 8003a0e:	f023 0203 	bic.w	r2, r3, #3
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	685b      	ldr	r3, [r3, #4]
 8003a16:	4957      	ldr	r1, [pc, #348]	; (8003b74 <HAL_RCC_ClockConfig+0x264>)
 8003a18:	4313      	orrs	r3, r2
 8003a1a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003a1c:	f7fd fcea 	bl	80013f4 <HAL_GetTick>
 8003a20:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003a22:	e00a      	b.n	8003a3a <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003a24:	f7fd fce6 	bl	80013f4 <HAL_GetTick>
 8003a28:	4602      	mov	r2, r0
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	1ad3      	subs	r3, r2, r3
 8003a2e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003a32:	4293      	cmp	r3, r2
 8003a34:	d901      	bls.n	8003a3a <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8003a36:	2303      	movs	r3, #3
 8003a38:	e095      	b.n	8003b66 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003a3a:	4b4e      	ldr	r3, [pc, #312]	; (8003b74 <HAL_RCC_ClockConfig+0x264>)
 8003a3c:	689b      	ldr	r3, [r3, #8]
 8003a3e:	f003 020c 	and.w	r2, r3, #12
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	685b      	ldr	r3, [r3, #4]
 8003a46:	009b      	lsls	r3, r3, #2
 8003a48:	429a      	cmp	r2, r3
 8003a4a:	d1eb      	bne.n	8003a24 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	f003 0302 	and.w	r3, r3, #2
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	d023      	beq.n	8003aa0 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	f003 0304 	and.w	r3, r3, #4
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	d005      	beq.n	8003a70 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003a64:	4b43      	ldr	r3, [pc, #268]	; (8003b74 <HAL_RCC_ClockConfig+0x264>)
 8003a66:	689b      	ldr	r3, [r3, #8]
 8003a68:	4a42      	ldr	r2, [pc, #264]	; (8003b74 <HAL_RCC_ClockConfig+0x264>)
 8003a6a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003a6e:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	f003 0308 	and.w	r3, r3, #8
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	d007      	beq.n	8003a8c <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8003a7c:	4b3d      	ldr	r3, [pc, #244]	; (8003b74 <HAL_RCC_ClockConfig+0x264>)
 8003a7e:	689b      	ldr	r3, [r3, #8]
 8003a80:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8003a84:	4a3b      	ldr	r2, [pc, #236]	; (8003b74 <HAL_RCC_ClockConfig+0x264>)
 8003a86:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003a8a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003a8c:	4b39      	ldr	r3, [pc, #228]	; (8003b74 <HAL_RCC_ClockConfig+0x264>)
 8003a8e:	689b      	ldr	r3, [r3, #8]
 8003a90:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	689b      	ldr	r3, [r3, #8]
 8003a98:	4936      	ldr	r1, [pc, #216]	; (8003b74 <HAL_RCC_ClockConfig+0x264>)
 8003a9a:	4313      	orrs	r3, r2
 8003a9c:	608b      	str	r3, [r1, #8]
 8003a9e:	e008      	b.n	8003ab2 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8003aa0:	697b      	ldr	r3, [r7, #20]
 8003aa2:	2b80      	cmp	r3, #128	; 0x80
 8003aa4:	d105      	bne.n	8003ab2 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8003aa6:	4b33      	ldr	r3, [pc, #204]	; (8003b74 <HAL_RCC_ClockConfig+0x264>)
 8003aa8:	689b      	ldr	r3, [r3, #8]
 8003aaa:	4a32      	ldr	r2, [pc, #200]	; (8003b74 <HAL_RCC_ClockConfig+0x264>)
 8003aac:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003ab0:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003ab2:	4b2f      	ldr	r3, [pc, #188]	; (8003b70 <HAL_RCC_ClockConfig+0x260>)
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	f003 030f 	and.w	r3, r3, #15
 8003aba:	683a      	ldr	r2, [r7, #0]
 8003abc:	429a      	cmp	r2, r3
 8003abe:	d21d      	bcs.n	8003afc <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003ac0:	4b2b      	ldr	r3, [pc, #172]	; (8003b70 <HAL_RCC_ClockConfig+0x260>)
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	f023 020f 	bic.w	r2, r3, #15
 8003ac8:	4929      	ldr	r1, [pc, #164]	; (8003b70 <HAL_RCC_ClockConfig+0x260>)
 8003aca:	683b      	ldr	r3, [r7, #0]
 8003acc:	4313      	orrs	r3, r2
 8003ace:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8003ad0:	f7fd fc90 	bl	80013f4 <HAL_GetTick>
 8003ad4:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003ad6:	e00a      	b.n	8003aee <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003ad8:	f7fd fc8c 	bl	80013f4 <HAL_GetTick>
 8003adc:	4602      	mov	r2, r0
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	1ad3      	subs	r3, r2, r3
 8003ae2:	f241 3288 	movw	r2, #5000	; 0x1388
 8003ae6:	4293      	cmp	r3, r2
 8003ae8:	d901      	bls.n	8003aee <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8003aea:	2303      	movs	r3, #3
 8003aec:	e03b      	b.n	8003b66 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003aee:	4b20      	ldr	r3, [pc, #128]	; (8003b70 <HAL_RCC_ClockConfig+0x260>)
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	f003 030f 	and.w	r3, r3, #15
 8003af6:	683a      	ldr	r2, [r7, #0]
 8003af8:	429a      	cmp	r2, r3
 8003afa:	d1ed      	bne.n	8003ad8 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	f003 0304 	and.w	r3, r3, #4
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	d008      	beq.n	8003b1a <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003b08:	4b1a      	ldr	r3, [pc, #104]	; (8003b74 <HAL_RCC_ClockConfig+0x264>)
 8003b0a:	689b      	ldr	r3, [r3, #8]
 8003b0c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	68db      	ldr	r3, [r3, #12]
 8003b14:	4917      	ldr	r1, [pc, #92]	; (8003b74 <HAL_RCC_ClockConfig+0x264>)
 8003b16:	4313      	orrs	r3, r2
 8003b18:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	f003 0308 	and.w	r3, r3, #8
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d009      	beq.n	8003b3a <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003b26:	4b13      	ldr	r3, [pc, #76]	; (8003b74 <HAL_RCC_ClockConfig+0x264>)
 8003b28:	689b      	ldr	r3, [r3, #8]
 8003b2a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	691b      	ldr	r3, [r3, #16]
 8003b32:	00db      	lsls	r3, r3, #3
 8003b34:	490f      	ldr	r1, [pc, #60]	; (8003b74 <HAL_RCC_ClockConfig+0x264>)
 8003b36:	4313      	orrs	r3, r2
 8003b38:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003b3a:	f000 f825 	bl	8003b88 <HAL_RCC_GetSysClockFreq>
 8003b3e:	4602      	mov	r2, r0
 8003b40:	4b0c      	ldr	r3, [pc, #48]	; (8003b74 <HAL_RCC_ClockConfig+0x264>)
 8003b42:	689b      	ldr	r3, [r3, #8]
 8003b44:	091b      	lsrs	r3, r3, #4
 8003b46:	f003 030f 	and.w	r3, r3, #15
 8003b4a:	490c      	ldr	r1, [pc, #48]	; (8003b7c <HAL_RCC_ClockConfig+0x26c>)
 8003b4c:	5ccb      	ldrb	r3, [r1, r3]
 8003b4e:	f003 031f 	and.w	r3, r3, #31
 8003b52:	fa22 f303 	lsr.w	r3, r2, r3
 8003b56:	4a0a      	ldr	r2, [pc, #40]	; (8003b80 <HAL_RCC_ClockConfig+0x270>)
 8003b58:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8003b5a:	4b0a      	ldr	r3, [pc, #40]	; (8003b84 <HAL_RCC_ClockConfig+0x274>)
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	4618      	mov	r0, r3
 8003b60:	f7fd fbfc 	bl	800135c <HAL_InitTick>
 8003b64:	4603      	mov	r3, r0
}
 8003b66:	4618      	mov	r0, r3
 8003b68:	3718      	adds	r7, #24
 8003b6a:	46bd      	mov	sp, r7
 8003b6c:	bd80      	pop	{r7, pc}
 8003b6e:	bf00      	nop
 8003b70:	40022000 	.word	0x40022000
 8003b74:	40021000 	.word	0x40021000
 8003b78:	04c4b400 	.word	0x04c4b400
 8003b7c:	08006efc 	.word	0x08006efc
 8003b80:	20000000 	.word	0x20000000
 8003b84:	20000004 	.word	0x20000004

08003b88 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003b88:	b480      	push	{r7}
 8003b8a:	b087      	sub	sp, #28
 8003b8c:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8003b8e:	4b2c      	ldr	r3, [pc, #176]	; (8003c40 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003b90:	689b      	ldr	r3, [r3, #8]
 8003b92:	f003 030c 	and.w	r3, r3, #12
 8003b96:	2b04      	cmp	r3, #4
 8003b98:	d102      	bne.n	8003ba0 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003b9a:	4b2a      	ldr	r3, [pc, #168]	; (8003c44 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003b9c:	613b      	str	r3, [r7, #16]
 8003b9e:	e047      	b.n	8003c30 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8003ba0:	4b27      	ldr	r3, [pc, #156]	; (8003c40 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003ba2:	689b      	ldr	r3, [r3, #8]
 8003ba4:	f003 030c 	and.w	r3, r3, #12
 8003ba8:	2b08      	cmp	r3, #8
 8003baa:	d102      	bne.n	8003bb2 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003bac:	4b26      	ldr	r3, [pc, #152]	; (8003c48 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003bae:	613b      	str	r3, [r7, #16]
 8003bb0:	e03e      	b.n	8003c30 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8003bb2:	4b23      	ldr	r3, [pc, #140]	; (8003c40 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003bb4:	689b      	ldr	r3, [r3, #8]
 8003bb6:	f003 030c 	and.w	r3, r3, #12
 8003bba:	2b0c      	cmp	r3, #12
 8003bbc:	d136      	bne.n	8003c2c <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003bbe:	4b20      	ldr	r3, [pc, #128]	; (8003c40 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003bc0:	68db      	ldr	r3, [r3, #12]
 8003bc2:	f003 0303 	and.w	r3, r3, #3
 8003bc6:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003bc8:	4b1d      	ldr	r3, [pc, #116]	; (8003c40 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003bca:	68db      	ldr	r3, [r3, #12]
 8003bcc:	091b      	lsrs	r3, r3, #4
 8003bce:	f003 030f 	and.w	r3, r3, #15
 8003bd2:	3301      	adds	r3, #1
 8003bd4:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	2b03      	cmp	r3, #3
 8003bda:	d10c      	bne.n	8003bf6 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003bdc:	4a1a      	ldr	r2, [pc, #104]	; (8003c48 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003bde:	68bb      	ldr	r3, [r7, #8]
 8003be0:	fbb2 f3f3 	udiv	r3, r2, r3
 8003be4:	4a16      	ldr	r2, [pc, #88]	; (8003c40 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003be6:	68d2      	ldr	r2, [r2, #12]
 8003be8:	0a12      	lsrs	r2, r2, #8
 8003bea:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003bee:	fb02 f303 	mul.w	r3, r2, r3
 8003bf2:	617b      	str	r3, [r7, #20]
      break;
 8003bf4:	e00c      	b.n	8003c10 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003bf6:	4a13      	ldr	r2, [pc, #76]	; (8003c44 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003bf8:	68bb      	ldr	r3, [r7, #8]
 8003bfa:	fbb2 f3f3 	udiv	r3, r2, r3
 8003bfe:	4a10      	ldr	r2, [pc, #64]	; (8003c40 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003c00:	68d2      	ldr	r2, [r2, #12]
 8003c02:	0a12      	lsrs	r2, r2, #8
 8003c04:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003c08:	fb02 f303 	mul.w	r3, r2, r3
 8003c0c:	617b      	str	r3, [r7, #20]
      break;
 8003c0e:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003c10:	4b0b      	ldr	r3, [pc, #44]	; (8003c40 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003c12:	68db      	ldr	r3, [r3, #12]
 8003c14:	0e5b      	lsrs	r3, r3, #25
 8003c16:	f003 0303 	and.w	r3, r3, #3
 8003c1a:	3301      	adds	r3, #1
 8003c1c:	005b      	lsls	r3, r3, #1
 8003c1e:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8003c20:	697a      	ldr	r2, [r7, #20]
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c28:	613b      	str	r3, [r7, #16]
 8003c2a:	e001      	b.n	8003c30 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8003c2c:	2300      	movs	r3, #0
 8003c2e:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8003c30:	693b      	ldr	r3, [r7, #16]
}
 8003c32:	4618      	mov	r0, r3
 8003c34:	371c      	adds	r7, #28
 8003c36:	46bd      	mov	sp, r7
 8003c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c3c:	4770      	bx	lr
 8003c3e:	bf00      	nop
 8003c40:	40021000 	.word	0x40021000
 8003c44:	00f42400 	.word	0x00f42400
 8003c48:	016e3600 	.word	0x016e3600

08003c4c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003c4c:	b480      	push	{r7}
 8003c4e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003c50:	4b03      	ldr	r3, [pc, #12]	; (8003c60 <HAL_RCC_GetHCLKFreq+0x14>)
 8003c52:	681b      	ldr	r3, [r3, #0]
}
 8003c54:	4618      	mov	r0, r3
 8003c56:	46bd      	mov	sp, r7
 8003c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c5c:	4770      	bx	lr
 8003c5e:	bf00      	nop
 8003c60:	20000000 	.word	0x20000000

08003c64 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003c64:	b580      	push	{r7, lr}
 8003c66:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003c68:	f7ff fff0 	bl	8003c4c <HAL_RCC_GetHCLKFreq>
 8003c6c:	4602      	mov	r2, r0
 8003c6e:	4b06      	ldr	r3, [pc, #24]	; (8003c88 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003c70:	689b      	ldr	r3, [r3, #8]
 8003c72:	0a1b      	lsrs	r3, r3, #8
 8003c74:	f003 0307 	and.w	r3, r3, #7
 8003c78:	4904      	ldr	r1, [pc, #16]	; (8003c8c <HAL_RCC_GetPCLK1Freq+0x28>)
 8003c7a:	5ccb      	ldrb	r3, [r1, r3]
 8003c7c:	f003 031f 	and.w	r3, r3, #31
 8003c80:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003c84:	4618      	mov	r0, r3
 8003c86:	bd80      	pop	{r7, pc}
 8003c88:	40021000 	.word	0x40021000
 8003c8c:	08006f0c 	.word	0x08006f0c

08003c90 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003c90:	b580      	push	{r7, lr}
 8003c92:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003c94:	f7ff ffda 	bl	8003c4c <HAL_RCC_GetHCLKFreq>
 8003c98:	4602      	mov	r2, r0
 8003c9a:	4b06      	ldr	r3, [pc, #24]	; (8003cb4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003c9c:	689b      	ldr	r3, [r3, #8]
 8003c9e:	0adb      	lsrs	r3, r3, #11
 8003ca0:	f003 0307 	and.w	r3, r3, #7
 8003ca4:	4904      	ldr	r1, [pc, #16]	; (8003cb8 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003ca6:	5ccb      	ldrb	r3, [r1, r3]
 8003ca8:	f003 031f 	and.w	r3, r3, #31
 8003cac:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003cb0:	4618      	mov	r0, r3
 8003cb2:	bd80      	pop	{r7, pc}
 8003cb4:	40021000 	.word	0x40021000
 8003cb8:	08006f0c 	.word	0x08006f0c

08003cbc <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8003cbc:	b480      	push	{r7}
 8003cbe:	b087      	sub	sp, #28
 8003cc0:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003cc2:	4b1e      	ldr	r3, [pc, #120]	; (8003d3c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003cc4:	68db      	ldr	r3, [r3, #12]
 8003cc6:	f003 0303 	and.w	r3, r3, #3
 8003cca:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003ccc:	4b1b      	ldr	r3, [pc, #108]	; (8003d3c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003cce:	68db      	ldr	r3, [r3, #12]
 8003cd0:	091b      	lsrs	r3, r3, #4
 8003cd2:	f003 030f 	and.w	r3, r3, #15
 8003cd6:	3301      	adds	r3, #1
 8003cd8:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8003cda:	693b      	ldr	r3, [r7, #16]
 8003cdc:	2b03      	cmp	r3, #3
 8003cde:	d10c      	bne.n	8003cfa <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003ce0:	4a17      	ldr	r2, [pc, #92]	; (8003d40 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ce8:	4a14      	ldr	r2, [pc, #80]	; (8003d3c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003cea:	68d2      	ldr	r2, [r2, #12]
 8003cec:	0a12      	lsrs	r2, r2, #8
 8003cee:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003cf2:	fb02 f303 	mul.w	r3, r2, r3
 8003cf6:	617b      	str	r3, [r7, #20]
    break;
 8003cf8:	e00c      	b.n	8003d14 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003cfa:	4a12      	ldr	r2, [pc, #72]	; (8003d44 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d02:	4a0e      	ldr	r2, [pc, #56]	; (8003d3c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003d04:	68d2      	ldr	r2, [r2, #12]
 8003d06:	0a12      	lsrs	r2, r2, #8
 8003d08:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003d0c:	fb02 f303 	mul.w	r3, r2, r3
 8003d10:	617b      	str	r3, [r7, #20]
    break;
 8003d12:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003d14:	4b09      	ldr	r3, [pc, #36]	; (8003d3c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003d16:	68db      	ldr	r3, [r3, #12]
 8003d18:	0e5b      	lsrs	r3, r3, #25
 8003d1a:	f003 0303 	and.w	r3, r3, #3
 8003d1e:	3301      	adds	r3, #1
 8003d20:	005b      	lsls	r3, r3, #1
 8003d22:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8003d24:	697a      	ldr	r2, [r7, #20]
 8003d26:	68bb      	ldr	r3, [r7, #8]
 8003d28:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d2c:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8003d2e:	687b      	ldr	r3, [r7, #4]
}
 8003d30:	4618      	mov	r0, r3
 8003d32:	371c      	adds	r7, #28
 8003d34:	46bd      	mov	sp, r7
 8003d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d3a:	4770      	bx	lr
 8003d3c:	40021000 	.word	0x40021000
 8003d40:	016e3600 	.word	0x016e3600
 8003d44:	00f42400 	.word	0x00f42400

08003d48 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003d48:	b580      	push	{r7, lr}
 8003d4a:	b086      	sub	sp, #24
 8003d4c:	af00      	add	r7, sp, #0
 8003d4e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003d50:	2300      	movs	r3, #0
 8003d52:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003d54:	2300      	movs	r3, #0
 8003d56:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	f000 8098 	beq.w	8003e96 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003d66:	2300      	movs	r3, #0
 8003d68:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003d6a:	4b43      	ldr	r3, [pc, #268]	; (8003e78 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003d6c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d6e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d10d      	bne.n	8003d92 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003d76:	4b40      	ldr	r3, [pc, #256]	; (8003e78 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003d78:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d7a:	4a3f      	ldr	r2, [pc, #252]	; (8003e78 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003d7c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003d80:	6593      	str	r3, [r2, #88]	; 0x58
 8003d82:	4b3d      	ldr	r3, [pc, #244]	; (8003e78 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003d84:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d86:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003d8a:	60bb      	str	r3, [r7, #8]
 8003d8c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003d8e:	2301      	movs	r3, #1
 8003d90:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003d92:	4b3a      	ldr	r3, [pc, #232]	; (8003e7c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	4a39      	ldr	r2, [pc, #228]	; (8003e7c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003d98:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003d9c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003d9e:	f7fd fb29 	bl	80013f4 <HAL_GetTick>
 8003da2:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003da4:	e009      	b.n	8003dba <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003da6:	f7fd fb25 	bl	80013f4 <HAL_GetTick>
 8003daa:	4602      	mov	r2, r0
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	1ad3      	subs	r3, r2, r3
 8003db0:	2b02      	cmp	r3, #2
 8003db2:	d902      	bls.n	8003dba <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8003db4:	2303      	movs	r3, #3
 8003db6:	74fb      	strb	r3, [r7, #19]
        break;
 8003db8:	e005      	b.n	8003dc6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003dba:	4b30      	ldr	r3, [pc, #192]	; (8003e7c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d0ef      	beq.n	8003da6 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8003dc6:	7cfb      	ldrb	r3, [r7, #19]
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	d159      	bne.n	8003e80 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003dcc:	4b2a      	ldr	r3, [pc, #168]	; (8003e78 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003dce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003dd2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003dd6:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003dd8:	697b      	ldr	r3, [r7, #20]
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d01e      	beq.n	8003e1c <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003de2:	697a      	ldr	r2, [r7, #20]
 8003de4:	429a      	cmp	r2, r3
 8003de6:	d019      	beq.n	8003e1c <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003de8:	4b23      	ldr	r3, [pc, #140]	; (8003e78 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003dea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003dee:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003df2:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003df4:	4b20      	ldr	r3, [pc, #128]	; (8003e78 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003df6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003dfa:	4a1f      	ldr	r2, [pc, #124]	; (8003e78 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003dfc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003e00:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003e04:	4b1c      	ldr	r3, [pc, #112]	; (8003e78 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003e06:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e0a:	4a1b      	ldr	r2, [pc, #108]	; (8003e78 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003e0c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003e10:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003e14:	4a18      	ldr	r2, [pc, #96]	; (8003e78 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003e16:	697b      	ldr	r3, [r7, #20]
 8003e18:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003e1c:	697b      	ldr	r3, [r7, #20]
 8003e1e:	f003 0301 	and.w	r3, r3, #1
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d016      	beq.n	8003e54 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e26:	f7fd fae5 	bl	80013f4 <HAL_GetTick>
 8003e2a:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003e2c:	e00b      	b.n	8003e46 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003e2e:	f7fd fae1 	bl	80013f4 <HAL_GetTick>
 8003e32:	4602      	mov	r2, r0
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	1ad3      	subs	r3, r2, r3
 8003e38:	f241 3288 	movw	r2, #5000	; 0x1388
 8003e3c:	4293      	cmp	r3, r2
 8003e3e:	d902      	bls.n	8003e46 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8003e40:	2303      	movs	r3, #3
 8003e42:	74fb      	strb	r3, [r7, #19]
            break;
 8003e44:	e006      	b.n	8003e54 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003e46:	4b0c      	ldr	r3, [pc, #48]	; (8003e78 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003e48:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e4c:	f003 0302 	and.w	r3, r3, #2
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	d0ec      	beq.n	8003e2e <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8003e54:	7cfb      	ldrb	r3, [r7, #19]
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	d10b      	bne.n	8003e72 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003e5a:	4b07      	ldr	r3, [pc, #28]	; (8003e78 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003e5c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e60:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e68:	4903      	ldr	r1, [pc, #12]	; (8003e78 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003e6a:	4313      	orrs	r3, r2
 8003e6c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8003e70:	e008      	b.n	8003e84 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003e72:	7cfb      	ldrb	r3, [r7, #19]
 8003e74:	74bb      	strb	r3, [r7, #18]
 8003e76:	e005      	b.n	8003e84 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8003e78:	40021000 	.word	0x40021000
 8003e7c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003e80:	7cfb      	ldrb	r3, [r7, #19]
 8003e82:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003e84:	7c7b      	ldrb	r3, [r7, #17]
 8003e86:	2b01      	cmp	r3, #1
 8003e88:	d105      	bne.n	8003e96 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003e8a:	4ba6      	ldr	r3, [pc, #664]	; (8004124 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003e8c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e8e:	4aa5      	ldr	r2, [pc, #660]	; (8004124 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003e90:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003e94:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	f003 0301 	and.w	r3, r3, #1
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d00a      	beq.n	8003eb8 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003ea2:	4ba0      	ldr	r3, [pc, #640]	; (8004124 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003ea4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ea8:	f023 0203 	bic.w	r2, r3, #3
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	685b      	ldr	r3, [r3, #4]
 8003eb0:	499c      	ldr	r1, [pc, #624]	; (8004124 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003eb2:	4313      	orrs	r3, r2
 8003eb4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	f003 0302 	and.w	r3, r3, #2
 8003ec0:	2b00      	cmp	r3, #0
 8003ec2:	d00a      	beq.n	8003eda <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003ec4:	4b97      	ldr	r3, [pc, #604]	; (8004124 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003ec6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003eca:	f023 020c 	bic.w	r2, r3, #12
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	689b      	ldr	r3, [r3, #8]
 8003ed2:	4994      	ldr	r1, [pc, #592]	; (8004124 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003ed4:	4313      	orrs	r3, r2
 8003ed6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	f003 0304 	and.w	r3, r3, #4
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d00a      	beq.n	8003efc <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003ee6:	4b8f      	ldr	r3, [pc, #572]	; (8004124 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003ee8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003eec:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	68db      	ldr	r3, [r3, #12]
 8003ef4:	498b      	ldr	r1, [pc, #556]	; (8004124 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003ef6:	4313      	orrs	r3, r2
 8003ef8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	f003 0308 	and.w	r3, r3, #8
 8003f04:	2b00      	cmp	r3, #0
 8003f06:	d00a      	beq.n	8003f1e <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003f08:	4b86      	ldr	r3, [pc, #536]	; (8004124 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003f0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f0e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	691b      	ldr	r3, [r3, #16]
 8003f16:	4983      	ldr	r1, [pc, #524]	; (8004124 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003f18:	4313      	orrs	r3, r2
 8003f1a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	f003 0320 	and.w	r3, r3, #32
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d00a      	beq.n	8003f40 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003f2a:	4b7e      	ldr	r3, [pc, #504]	; (8004124 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003f2c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f30:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	695b      	ldr	r3, [r3, #20]
 8003f38:	497a      	ldr	r1, [pc, #488]	; (8004124 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003f3a:	4313      	orrs	r3, r2
 8003f3c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f48:	2b00      	cmp	r3, #0
 8003f4a:	d00a      	beq.n	8003f62 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003f4c:	4b75      	ldr	r3, [pc, #468]	; (8004124 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003f4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f52:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	699b      	ldr	r3, [r3, #24]
 8003f5a:	4972      	ldr	r1, [pc, #456]	; (8004124 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003f5c:	4313      	orrs	r3, r2
 8003f5e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d00a      	beq.n	8003f84 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003f6e:	4b6d      	ldr	r3, [pc, #436]	; (8004124 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003f70:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f74:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	69db      	ldr	r3, [r3, #28]
 8003f7c:	4969      	ldr	r1, [pc, #420]	; (8004124 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003f7e:	4313      	orrs	r3, r2
 8003f80:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f8c:	2b00      	cmp	r3, #0
 8003f8e:	d00a      	beq.n	8003fa6 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003f90:	4b64      	ldr	r3, [pc, #400]	; (8004124 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003f92:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f96:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	6a1b      	ldr	r3, [r3, #32]
 8003f9e:	4961      	ldr	r1, [pc, #388]	; (8004124 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003fa0:	4313      	orrs	r3, r2
 8003fa2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	d00a      	beq.n	8003fc8 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003fb2:	4b5c      	ldr	r3, [pc, #368]	; (8004124 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003fb4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003fb8:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fc0:	4958      	ldr	r1, [pc, #352]	; (8004124 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003fc2:	4313      	orrs	r3, r2
 8003fc4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003fd0:	2b00      	cmp	r3, #0
 8003fd2:	d015      	beq.n	8004000 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003fd4:	4b53      	ldr	r3, [pc, #332]	; (8004124 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003fd6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003fda:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003fe2:	4950      	ldr	r1, [pc, #320]	; (8004124 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003fe4:	4313      	orrs	r3, r2
 8003fe6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003fee:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003ff2:	d105      	bne.n	8004000 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003ff4:	4b4b      	ldr	r3, [pc, #300]	; (8004124 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003ff6:	68db      	ldr	r3, [r3, #12]
 8003ff8:	4a4a      	ldr	r2, [pc, #296]	; (8004124 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003ffa:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003ffe:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004008:	2b00      	cmp	r3, #0
 800400a:	d015      	beq.n	8004038 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800400c:	4b45      	ldr	r3, [pc, #276]	; (8004124 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800400e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004012:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800401a:	4942      	ldr	r1, [pc, #264]	; (8004124 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800401c:	4313      	orrs	r3, r2
 800401e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004026:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800402a:	d105      	bne.n	8004038 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800402c:	4b3d      	ldr	r3, [pc, #244]	; (8004124 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800402e:	68db      	ldr	r3, [r3, #12]
 8004030:	4a3c      	ldr	r2, [pc, #240]	; (8004124 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004032:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004036:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004040:	2b00      	cmp	r3, #0
 8004042:	d015      	beq.n	8004070 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8004044:	4b37      	ldr	r3, [pc, #220]	; (8004124 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004046:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800404a:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004052:	4934      	ldr	r1, [pc, #208]	; (8004124 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004054:	4313      	orrs	r3, r2
 8004056:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800405e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004062:	d105      	bne.n	8004070 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004064:	4b2f      	ldr	r3, [pc, #188]	; (8004124 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004066:	68db      	ldr	r3, [r3, #12]
 8004068:	4a2e      	ldr	r2, [pc, #184]	; (8004124 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800406a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800406e:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004078:	2b00      	cmp	r3, #0
 800407a:	d015      	beq.n	80040a8 <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800407c:	4b29      	ldr	r3, [pc, #164]	; (8004124 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800407e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004082:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800408a:	4926      	ldr	r1, [pc, #152]	; (8004124 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800408c:	4313      	orrs	r3, r2
 800408e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004096:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800409a:	d105      	bne.n	80040a8 <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800409c:	4b21      	ldr	r3, [pc, #132]	; (8004124 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800409e:	68db      	ldr	r3, [r3, #12]
 80040a0:	4a20      	ldr	r2, [pc, #128]	; (8004124 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80040a2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80040a6:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80040b0:	2b00      	cmp	r3, #0
 80040b2:	d015      	beq.n	80040e0 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80040b4:	4b1b      	ldr	r3, [pc, #108]	; (8004124 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80040b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80040ba:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040c2:	4918      	ldr	r1, [pc, #96]	; (8004124 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80040c4:	4313      	orrs	r3, r2
 80040c6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040ce:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80040d2:	d105      	bne.n	80040e0 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80040d4:	4b13      	ldr	r3, [pc, #76]	; (8004124 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80040d6:	68db      	ldr	r3, [r3, #12]
 80040d8:	4a12      	ldr	r2, [pc, #72]	; (8004124 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80040da:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80040de:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	d015      	beq.n	8004118 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80040ec:	4b0d      	ldr	r3, [pc, #52]	; (8004124 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80040ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80040f2:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80040fa:	490a      	ldr	r1, [pc, #40]	; (8004124 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80040fc:	4313      	orrs	r3, r2
 80040fe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004106:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800410a:	d105      	bne.n	8004118 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800410c:	4b05      	ldr	r3, [pc, #20]	; (8004124 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800410e:	68db      	ldr	r3, [r3, #12]
 8004110:	4a04      	ldr	r2, [pc, #16]	; (8004124 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004112:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004116:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8004118:	7cbb      	ldrb	r3, [r7, #18]
}
 800411a:	4618      	mov	r0, r3
 800411c:	3718      	adds	r7, #24
 800411e:	46bd      	mov	sp, r7
 8004120:	bd80      	pop	{r7, pc}
 8004122:	bf00      	nop
 8004124:	40021000 	.word	0x40021000

08004128 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004128:	b580      	push	{r7, lr}
 800412a:	b084      	sub	sp, #16
 800412c:	af00      	add	r7, sp, #0
 800412e:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	2b00      	cmp	r3, #0
 8004134:	d101      	bne.n	800413a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004136:	2301      	movs	r3, #1
 8004138:	e09d      	b.n	8004276 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800413e:	2b00      	cmp	r3, #0
 8004140:	d108      	bne.n	8004154 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	685b      	ldr	r3, [r3, #4]
 8004146:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800414a:	d009      	beq.n	8004160 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	2200      	movs	r2, #0
 8004150:	61da      	str	r2, [r3, #28]
 8004152:	e005      	b.n	8004160 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	2200      	movs	r2, #0
 8004158:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	2200      	movs	r2, #0
 800415e:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	2200      	movs	r2, #0
 8004164:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800416c:	b2db      	uxtb	r3, r3
 800416e:	2b00      	cmp	r3, #0
 8004170:	d106      	bne.n	8004180 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	2200      	movs	r2, #0
 8004176:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800417a:	6878      	ldr	r0, [r7, #4]
 800417c:	f7fc ffd4 	bl	8001128 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	2202      	movs	r2, #2
 8004184:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	681a      	ldr	r2, [r3, #0]
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004196:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	68db      	ldr	r3, [r3, #12]
 800419c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80041a0:	d902      	bls.n	80041a8 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80041a2:	2300      	movs	r3, #0
 80041a4:	60fb      	str	r3, [r7, #12]
 80041a6:	e002      	b.n	80041ae <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80041a8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80041ac:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	68db      	ldr	r3, [r3, #12]
 80041b2:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 80041b6:	d007      	beq.n	80041c8 <HAL_SPI_Init+0xa0>
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	68db      	ldr	r3, [r3, #12]
 80041bc:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80041c0:	d002      	beq.n	80041c8 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	2200      	movs	r2, #0
 80041c6:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	685b      	ldr	r3, [r3, #4]
 80041cc:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	689b      	ldr	r3, [r3, #8]
 80041d4:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80041d8:	431a      	orrs	r2, r3
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	691b      	ldr	r3, [r3, #16]
 80041de:	f003 0302 	and.w	r3, r3, #2
 80041e2:	431a      	orrs	r2, r3
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	695b      	ldr	r3, [r3, #20]
 80041e8:	f003 0301 	and.w	r3, r3, #1
 80041ec:	431a      	orrs	r2, r3
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	699b      	ldr	r3, [r3, #24]
 80041f2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80041f6:	431a      	orrs	r2, r3
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	69db      	ldr	r3, [r3, #28]
 80041fc:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004200:	431a      	orrs	r2, r3
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	6a1b      	ldr	r3, [r3, #32]
 8004206:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800420a:	ea42 0103 	orr.w	r1, r2, r3
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004212:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	430a      	orrs	r2, r1
 800421c:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	699b      	ldr	r3, [r3, #24]
 8004222:	0c1b      	lsrs	r3, r3, #16
 8004224:	f003 0204 	and.w	r2, r3, #4
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800422c:	f003 0310 	and.w	r3, r3, #16
 8004230:	431a      	orrs	r2, r3
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004236:	f003 0308 	and.w	r3, r3, #8
 800423a:	431a      	orrs	r2, r3
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	68db      	ldr	r3, [r3, #12]
 8004240:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8004244:	ea42 0103 	orr.w	r1, r2, r3
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	430a      	orrs	r2, r1
 8004254:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	69da      	ldr	r2, [r3, #28]
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004264:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	2200      	movs	r2, #0
 800426a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	2201      	movs	r2, #1
 8004270:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8004274:	2300      	movs	r3, #0
}
 8004276:	4618      	mov	r0, r3
 8004278:	3710      	adds	r7, #16
 800427a:	46bd      	mov	sp, r7
 800427c:	bd80      	pop	{r7, pc}

0800427e <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800427e:	b580      	push	{r7, lr}
 8004280:	b088      	sub	sp, #32
 8004282:	af00      	add	r7, sp, #0
 8004284:	60f8      	str	r0, [r7, #12]
 8004286:	60b9      	str	r1, [r7, #8]
 8004288:	603b      	str	r3, [r7, #0]
 800428a:	4613      	mov	r3, r2
 800428c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800428e:	2300      	movs	r3, #0
 8004290:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8004298:	2b01      	cmp	r3, #1
 800429a:	d101      	bne.n	80042a0 <HAL_SPI_Transmit+0x22>
 800429c:	2302      	movs	r3, #2
 800429e:	e158      	b.n	8004552 <HAL_SPI_Transmit+0x2d4>
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	2201      	movs	r2, #1
 80042a4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80042a8:	f7fd f8a4 	bl	80013f4 <HAL_GetTick>
 80042ac:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80042ae:	88fb      	ldrh	r3, [r7, #6]
 80042b0:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80042b8:	b2db      	uxtb	r3, r3
 80042ba:	2b01      	cmp	r3, #1
 80042bc:	d002      	beq.n	80042c4 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80042be:	2302      	movs	r3, #2
 80042c0:	77fb      	strb	r3, [r7, #31]
    goto error;
 80042c2:	e13d      	b.n	8004540 <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 80042c4:	68bb      	ldr	r3, [r7, #8]
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	d002      	beq.n	80042d0 <HAL_SPI_Transmit+0x52>
 80042ca:	88fb      	ldrh	r3, [r7, #6]
 80042cc:	2b00      	cmp	r3, #0
 80042ce:	d102      	bne.n	80042d6 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80042d0:	2301      	movs	r3, #1
 80042d2:	77fb      	strb	r3, [r7, #31]
    goto error;
 80042d4:	e134      	b.n	8004540 <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	2203      	movs	r2, #3
 80042da:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	2200      	movs	r2, #0
 80042e2:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	68ba      	ldr	r2, [r7, #8]
 80042e8:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	88fa      	ldrh	r2, [r7, #6]
 80042ee:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	88fa      	ldrh	r2, [r7, #6]
 80042f4:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	2200      	movs	r2, #0
 80042fa:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	2200      	movs	r2, #0
 8004300:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	2200      	movs	r2, #0
 8004308:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	2200      	movs	r2, #0
 8004310:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	2200      	movs	r2, #0
 8004316:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	689b      	ldr	r3, [r3, #8]
 800431c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004320:	d10f      	bne.n	8004342 <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	681a      	ldr	r2, [r3, #0]
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004330:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8004332:	68fb      	ldr	r3, [r7, #12]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	681a      	ldr	r2, [r3, #0]
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004340:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004342:	68fb      	ldr	r3, [r7, #12]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800434c:	2b40      	cmp	r3, #64	; 0x40
 800434e:	d007      	beq.n	8004360 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	681a      	ldr	r2, [r3, #0]
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800435e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	68db      	ldr	r3, [r3, #12]
 8004364:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004368:	d94b      	bls.n	8004402 <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	685b      	ldr	r3, [r3, #4]
 800436e:	2b00      	cmp	r3, #0
 8004370:	d002      	beq.n	8004378 <HAL_SPI_Transmit+0xfa>
 8004372:	8afb      	ldrh	r3, [r7, #22]
 8004374:	2b01      	cmp	r3, #1
 8004376:	d13e      	bne.n	80043f6 <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800437c:	881a      	ldrh	r2, [r3, #0]
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004388:	1c9a      	adds	r2, r3, #2
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004392:	b29b      	uxth	r3, r3
 8004394:	3b01      	subs	r3, #1
 8004396:	b29a      	uxth	r2, r3
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800439c:	e02b      	b.n	80043f6 <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	689b      	ldr	r3, [r3, #8]
 80043a4:	f003 0302 	and.w	r3, r3, #2
 80043a8:	2b02      	cmp	r3, #2
 80043aa:	d112      	bne.n	80043d2 <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043b0:	881a      	ldrh	r2, [r3, #0]
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043bc:	1c9a      	adds	r2, r3, #2
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80043c6:	b29b      	uxth	r3, r3
 80043c8:	3b01      	subs	r3, #1
 80043ca:	b29a      	uxth	r2, r3
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	87da      	strh	r2, [r3, #62]	; 0x3e
 80043d0:	e011      	b.n	80043f6 <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80043d2:	f7fd f80f 	bl	80013f4 <HAL_GetTick>
 80043d6:	4602      	mov	r2, r0
 80043d8:	69bb      	ldr	r3, [r7, #24]
 80043da:	1ad3      	subs	r3, r2, r3
 80043dc:	683a      	ldr	r2, [r7, #0]
 80043de:	429a      	cmp	r2, r3
 80043e0:	d803      	bhi.n	80043ea <HAL_SPI_Transmit+0x16c>
 80043e2:	683b      	ldr	r3, [r7, #0]
 80043e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80043e8:	d102      	bne.n	80043f0 <HAL_SPI_Transmit+0x172>
 80043ea:	683b      	ldr	r3, [r7, #0]
 80043ec:	2b00      	cmp	r3, #0
 80043ee:	d102      	bne.n	80043f6 <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 80043f0:	2303      	movs	r3, #3
 80043f2:	77fb      	strb	r3, [r7, #31]
          goto error;
 80043f4:	e0a4      	b.n	8004540 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80043fa:	b29b      	uxth	r3, r3
 80043fc:	2b00      	cmp	r3, #0
 80043fe:	d1ce      	bne.n	800439e <HAL_SPI_Transmit+0x120>
 8004400:	e07c      	b.n	80044fc <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004402:	68fb      	ldr	r3, [r7, #12]
 8004404:	685b      	ldr	r3, [r3, #4]
 8004406:	2b00      	cmp	r3, #0
 8004408:	d002      	beq.n	8004410 <HAL_SPI_Transmit+0x192>
 800440a:	8afb      	ldrh	r3, [r7, #22]
 800440c:	2b01      	cmp	r3, #1
 800440e:	d170      	bne.n	80044f2 <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004414:	b29b      	uxth	r3, r3
 8004416:	2b01      	cmp	r3, #1
 8004418:	d912      	bls.n	8004440 <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800441e:	881a      	ldrh	r2, [r3, #0]
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800442a:	1c9a      	adds	r2, r3, #2
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004434:	b29b      	uxth	r3, r3
 8004436:	3b02      	subs	r3, #2
 8004438:	b29a      	uxth	r2, r3
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	87da      	strh	r2, [r3, #62]	; 0x3e
 800443e:	e058      	b.n	80044f2 <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	330c      	adds	r3, #12
 800444a:	7812      	ldrb	r2, [r2, #0]
 800444c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004452:	1c5a      	adds	r2, r3, #1
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800445c:	b29b      	uxth	r3, r3
 800445e:	3b01      	subs	r3, #1
 8004460:	b29a      	uxth	r2, r3
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8004466:	e044      	b.n	80044f2 <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	689b      	ldr	r3, [r3, #8]
 800446e:	f003 0302 	and.w	r3, r3, #2
 8004472:	2b02      	cmp	r3, #2
 8004474:	d12b      	bne.n	80044ce <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800447a:	b29b      	uxth	r3, r3
 800447c:	2b01      	cmp	r3, #1
 800447e:	d912      	bls.n	80044a6 <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004484:	881a      	ldrh	r2, [r3, #0]
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004490:	1c9a      	adds	r2, r3, #2
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800449a:	b29b      	uxth	r3, r3
 800449c:	3b02      	subs	r3, #2
 800449e:	b29a      	uxth	r2, r3
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	87da      	strh	r2, [r3, #62]	; 0x3e
 80044a4:	e025      	b.n	80044f2 <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80044aa:	68fb      	ldr	r3, [r7, #12]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	330c      	adds	r3, #12
 80044b0:	7812      	ldrb	r2, [r2, #0]
 80044b2:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044b8:	1c5a      	adds	r2, r3, #1
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80044c2:	b29b      	uxth	r3, r3
 80044c4:	3b01      	subs	r3, #1
 80044c6:	b29a      	uxth	r2, r3
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	87da      	strh	r2, [r3, #62]	; 0x3e
 80044cc:	e011      	b.n	80044f2 <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80044ce:	f7fc ff91 	bl	80013f4 <HAL_GetTick>
 80044d2:	4602      	mov	r2, r0
 80044d4:	69bb      	ldr	r3, [r7, #24]
 80044d6:	1ad3      	subs	r3, r2, r3
 80044d8:	683a      	ldr	r2, [r7, #0]
 80044da:	429a      	cmp	r2, r3
 80044dc:	d803      	bhi.n	80044e6 <HAL_SPI_Transmit+0x268>
 80044de:	683b      	ldr	r3, [r7, #0]
 80044e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80044e4:	d102      	bne.n	80044ec <HAL_SPI_Transmit+0x26e>
 80044e6:	683b      	ldr	r3, [r7, #0]
 80044e8:	2b00      	cmp	r3, #0
 80044ea:	d102      	bne.n	80044f2 <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 80044ec:	2303      	movs	r3, #3
 80044ee:	77fb      	strb	r3, [r7, #31]
          goto error;
 80044f0:	e026      	b.n	8004540 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80044f6:	b29b      	uxth	r3, r3
 80044f8:	2b00      	cmp	r3, #0
 80044fa:	d1b5      	bne.n	8004468 <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80044fc:	69ba      	ldr	r2, [r7, #24]
 80044fe:	6839      	ldr	r1, [r7, #0]
 8004500:	68f8      	ldr	r0, [r7, #12]
 8004502:	f000 fce3 	bl	8004ecc <SPI_EndRxTxTransaction>
 8004506:	4603      	mov	r3, r0
 8004508:	2b00      	cmp	r3, #0
 800450a:	d002      	beq.n	8004512 <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	2220      	movs	r2, #32
 8004510:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004512:	68fb      	ldr	r3, [r7, #12]
 8004514:	689b      	ldr	r3, [r3, #8]
 8004516:	2b00      	cmp	r3, #0
 8004518:	d10a      	bne.n	8004530 <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800451a:	2300      	movs	r3, #0
 800451c:	613b      	str	r3, [r7, #16]
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	68db      	ldr	r3, [r3, #12]
 8004524:	613b      	str	r3, [r7, #16]
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	689b      	ldr	r3, [r3, #8]
 800452c:	613b      	str	r3, [r7, #16]
 800452e:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004534:	2b00      	cmp	r3, #0
 8004536:	d002      	beq.n	800453e <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 8004538:	2301      	movs	r3, #1
 800453a:	77fb      	strb	r3, [r7, #31]
 800453c:	e000      	b.n	8004540 <HAL_SPI_Transmit+0x2c2>
  }

error:
 800453e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	2201      	movs	r2, #1
 8004544:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	2200      	movs	r2, #0
 800454c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8004550:	7ffb      	ldrb	r3, [r7, #31]
}
 8004552:	4618      	mov	r0, r3
 8004554:	3720      	adds	r7, #32
 8004556:	46bd      	mov	sp, r7
 8004558:	bd80      	pop	{r7, pc}

0800455a <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800455a:	b580      	push	{r7, lr}
 800455c:	b088      	sub	sp, #32
 800455e:	af02      	add	r7, sp, #8
 8004560:	60f8      	str	r0, [r7, #12]
 8004562:	60b9      	str	r1, [r7, #8]
 8004564:	603b      	str	r3, [r7, #0]
 8004566:	4613      	mov	r3, r2
 8004568:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t tmpreg = 0U;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800456a:	2300      	movs	r3, #0
 800456c:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	685b      	ldr	r3, [r3, #4]
 8004572:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004576:	d112      	bne.n	800459e <HAL_SPI_Receive+0x44>
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	689b      	ldr	r3, [r3, #8]
 800457c:	2b00      	cmp	r3, #0
 800457e:	d10e      	bne.n	800459e <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	2204      	movs	r2, #4
 8004584:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8004588:	88fa      	ldrh	r2, [r7, #6]
 800458a:	683b      	ldr	r3, [r7, #0]
 800458c:	9300      	str	r3, [sp, #0]
 800458e:	4613      	mov	r3, r2
 8004590:	68ba      	ldr	r2, [r7, #8]
 8004592:	68b9      	ldr	r1, [r7, #8]
 8004594:	68f8      	ldr	r0, [r7, #12]
 8004596:	f000 f910 	bl	80047ba <HAL_SPI_TransmitReceive>
 800459a:	4603      	mov	r3, r0
 800459c:	e109      	b.n	80047b2 <HAL_SPI_Receive+0x258>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80045a4:	2b01      	cmp	r3, #1
 80045a6:	d101      	bne.n	80045ac <HAL_SPI_Receive+0x52>
 80045a8:	2302      	movs	r3, #2
 80045aa:	e102      	b.n	80047b2 <HAL_SPI_Receive+0x258>
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	2201      	movs	r2, #1
 80045b0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80045b4:	f7fc ff1e 	bl	80013f4 <HAL_GetTick>
 80045b8:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 80045ba:	68fb      	ldr	r3, [r7, #12]
 80045bc:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80045c0:	b2db      	uxtb	r3, r3
 80045c2:	2b01      	cmp	r3, #1
 80045c4:	d002      	beq.n	80045cc <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 80045c6:	2302      	movs	r3, #2
 80045c8:	75fb      	strb	r3, [r7, #23]
    goto error;
 80045ca:	e0e9      	b.n	80047a0 <HAL_SPI_Receive+0x246>
  }

  if ((pData == NULL) || (Size == 0U))
 80045cc:	68bb      	ldr	r3, [r7, #8]
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	d002      	beq.n	80045d8 <HAL_SPI_Receive+0x7e>
 80045d2:	88fb      	ldrh	r3, [r7, #6]
 80045d4:	2b00      	cmp	r3, #0
 80045d6:	d102      	bne.n	80045de <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 80045d8:	2301      	movs	r3, #1
 80045da:	75fb      	strb	r3, [r7, #23]
    goto error;
 80045dc:	e0e0      	b.n	80047a0 <HAL_SPI_Receive+0x246>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	2204      	movs	r2, #4
 80045e2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	2200      	movs	r2, #0
 80045ea:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	68ba      	ldr	r2, [r7, #8]
 80045f0:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	88fa      	ldrh	r2, [r7, #6]
 80045f6:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	88fa      	ldrh	r2, [r7, #6]
 80045fe:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8004602:	68fb      	ldr	r3, [r7, #12]
 8004604:	2200      	movs	r2, #0
 8004606:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	2200      	movs	r2, #0
 800460c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	2200      	movs	r2, #0
 8004612:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	2200      	movs	r2, #0
 8004618:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	2200      	movs	r2, #0
 800461e:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	68db      	ldr	r3, [r3, #12]
 8004624:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004628:	d908      	bls.n	800463c <HAL_SPI_Receive+0xe2>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	685a      	ldr	r2, [r3, #4]
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004638:	605a      	str	r2, [r3, #4]
 800463a:	e007      	b.n	800464c <HAL_SPI_Receive+0xf2>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	685a      	ldr	r2, [r3, #4]
 8004642:	68fb      	ldr	r3, [r7, #12]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800464a:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	689b      	ldr	r3, [r3, #8]
 8004650:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004654:	d10f      	bne.n	8004676 <HAL_SPI_Receive+0x11c>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	681a      	ldr	r2, [r3, #0]
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004664:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	681a      	ldr	r2, [r3, #0]
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8004674:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004680:	2b40      	cmp	r3, #64	; 0x40
 8004682:	d007      	beq.n	8004694 <HAL_SPI_Receive+0x13a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	681a      	ldr	r2, [r3, #0]
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004692:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	68db      	ldr	r3, [r3, #12]
 8004698:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800469c:	d867      	bhi.n	800476e <HAL_SPI_Receive+0x214>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 800469e:	e030      	b.n	8004702 <HAL_SPI_Receive+0x1a8>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	689b      	ldr	r3, [r3, #8]
 80046a6:	f003 0301 	and.w	r3, r3, #1
 80046aa:	2b01      	cmp	r3, #1
 80046ac:	d117      	bne.n	80046de <HAL_SPI_Receive+0x184>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	f103 020c 	add.w	r2, r3, #12
 80046b6:	68fb      	ldr	r3, [r7, #12]
 80046b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046ba:	7812      	ldrb	r2, [r2, #0]
 80046bc:	b2d2      	uxtb	r2, r2
 80046be:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046c4:	1c5a      	adds	r2, r3, #1
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80046d0:	b29b      	uxth	r3, r3
 80046d2:	3b01      	subs	r3, #1
 80046d4:	b29a      	uxth	r2, r3
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 80046dc:	e011      	b.n	8004702 <HAL_SPI_Receive+0x1a8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80046de:	f7fc fe89 	bl	80013f4 <HAL_GetTick>
 80046e2:	4602      	mov	r2, r0
 80046e4:	693b      	ldr	r3, [r7, #16]
 80046e6:	1ad3      	subs	r3, r2, r3
 80046e8:	683a      	ldr	r2, [r7, #0]
 80046ea:	429a      	cmp	r2, r3
 80046ec:	d803      	bhi.n	80046f6 <HAL_SPI_Receive+0x19c>
 80046ee:	683b      	ldr	r3, [r7, #0]
 80046f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80046f4:	d102      	bne.n	80046fc <HAL_SPI_Receive+0x1a2>
 80046f6:	683b      	ldr	r3, [r7, #0]
 80046f8:	2b00      	cmp	r3, #0
 80046fa:	d102      	bne.n	8004702 <HAL_SPI_Receive+0x1a8>
        {
          errorcode = HAL_TIMEOUT;
 80046fc:	2303      	movs	r3, #3
 80046fe:	75fb      	strb	r3, [r7, #23]
          goto error;
 8004700:	e04e      	b.n	80047a0 <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004708:	b29b      	uxth	r3, r3
 800470a:	2b00      	cmp	r3, #0
 800470c:	d1c8      	bne.n	80046a0 <HAL_SPI_Receive+0x146>
 800470e:	e034      	b.n	800477a <HAL_SPI_Receive+0x220>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	689b      	ldr	r3, [r3, #8]
 8004716:	f003 0301 	and.w	r3, r3, #1
 800471a:	2b01      	cmp	r3, #1
 800471c:	d115      	bne.n	800474a <HAL_SPI_Receive+0x1f0>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800471e:	68fb      	ldr	r3, [r7, #12]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	68da      	ldr	r2, [r3, #12]
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004728:	b292      	uxth	r2, r2
 800472a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004730:	1c9a      	adds	r2, r3, #2
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8004736:	68fb      	ldr	r3, [r7, #12]
 8004738:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800473c:	b29b      	uxth	r3, r3
 800473e:	3b01      	subs	r3, #1
 8004740:	b29a      	uxth	r2, r3
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8004748:	e011      	b.n	800476e <HAL_SPI_Receive+0x214>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800474a:	f7fc fe53 	bl	80013f4 <HAL_GetTick>
 800474e:	4602      	mov	r2, r0
 8004750:	693b      	ldr	r3, [r7, #16]
 8004752:	1ad3      	subs	r3, r2, r3
 8004754:	683a      	ldr	r2, [r7, #0]
 8004756:	429a      	cmp	r2, r3
 8004758:	d803      	bhi.n	8004762 <HAL_SPI_Receive+0x208>
 800475a:	683b      	ldr	r3, [r7, #0]
 800475c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004760:	d102      	bne.n	8004768 <HAL_SPI_Receive+0x20e>
 8004762:	683b      	ldr	r3, [r7, #0]
 8004764:	2b00      	cmp	r3, #0
 8004766:	d102      	bne.n	800476e <HAL_SPI_Receive+0x214>
        {
          errorcode = HAL_TIMEOUT;
 8004768:	2303      	movs	r3, #3
 800476a:	75fb      	strb	r3, [r7, #23]
          goto error;
 800476c:	e018      	b.n	80047a0 <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004774:	b29b      	uxth	r3, r3
 8004776:	2b00      	cmp	r3, #0
 8004778:	d1ca      	bne.n	8004710 <HAL_SPI_Receive+0x1b6>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800477a:	693a      	ldr	r2, [r7, #16]
 800477c:	6839      	ldr	r1, [r7, #0]
 800477e:	68f8      	ldr	r0, [r7, #12]
 8004780:	f000 fb4c 	bl	8004e1c <SPI_EndRxTransaction>
 8004784:	4603      	mov	r3, r0
 8004786:	2b00      	cmp	r3, #0
 8004788:	d002      	beq.n	8004790 <HAL_SPI_Receive+0x236>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800478a:	68fb      	ldr	r3, [r7, #12]
 800478c:	2220      	movs	r2, #32
 800478e:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004794:	2b00      	cmp	r3, #0
 8004796:	d002      	beq.n	800479e <HAL_SPI_Receive+0x244>
  {
    errorcode = HAL_ERROR;
 8004798:	2301      	movs	r3, #1
 800479a:	75fb      	strb	r3, [r7, #23]
 800479c:	e000      	b.n	80047a0 <HAL_SPI_Receive+0x246>
  }

error :
 800479e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	2201      	movs	r2, #1
 80047a4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	2200      	movs	r2, #0
 80047ac:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 80047b0:	7dfb      	ldrb	r3, [r7, #23]
}
 80047b2:	4618      	mov	r0, r3
 80047b4:	3718      	adds	r7, #24
 80047b6:	46bd      	mov	sp, r7
 80047b8:	bd80      	pop	{r7, pc}

080047ba <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80047ba:	b580      	push	{r7, lr}
 80047bc:	b08a      	sub	sp, #40	; 0x28
 80047be:	af00      	add	r7, sp, #0
 80047c0:	60f8      	str	r0, [r7, #12]
 80047c2:	60b9      	str	r1, [r7, #8]
 80047c4:	607a      	str	r2, [r7, #4]
 80047c6:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80047c8:	2301      	movs	r3, #1
 80047ca:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80047cc:	2300      	movs	r3, #0
 80047ce:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80047d8:	2b01      	cmp	r3, #1
 80047da:	d101      	bne.n	80047e0 <HAL_SPI_TransmitReceive+0x26>
 80047dc:	2302      	movs	r3, #2
 80047de:	e1fb      	b.n	8004bd8 <HAL_SPI_TransmitReceive+0x41e>
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	2201      	movs	r2, #1
 80047e4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80047e8:	f7fc fe04 	bl	80013f4 <HAL_GetTick>
 80047ec:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80047ee:	68fb      	ldr	r3, [r7, #12]
 80047f0:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80047f4:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 80047f6:	68fb      	ldr	r3, [r7, #12]
 80047f8:	685b      	ldr	r3, [r3, #4]
 80047fa:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 80047fc:	887b      	ldrh	r3, [r7, #2]
 80047fe:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8004800:	887b      	ldrh	r3, [r7, #2]
 8004802:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8004804:	7efb      	ldrb	r3, [r7, #27]
 8004806:	2b01      	cmp	r3, #1
 8004808:	d00e      	beq.n	8004828 <HAL_SPI_TransmitReceive+0x6e>
 800480a:	697b      	ldr	r3, [r7, #20]
 800480c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004810:	d106      	bne.n	8004820 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	689b      	ldr	r3, [r3, #8]
 8004816:	2b00      	cmp	r3, #0
 8004818:	d102      	bne.n	8004820 <HAL_SPI_TransmitReceive+0x66>
 800481a:	7efb      	ldrb	r3, [r7, #27]
 800481c:	2b04      	cmp	r3, #4
 800481e:	d003      	beq.n	8004828 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8004820:	2302      	movs	r3, #2
 8004822:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8004826:	e1cd      	b.n	8004bc4 <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8004828:	68bb      	ldr	r3, [r7, #8]
 800482a:	2b00      	cmp	r3, #0
 800482c:	d005      	beq.n	800483a <HAL_SPI_TransmitReceive+0x80>
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	2b00      	cmp	r3, #0
 8004832:	d002      	beq.n	800483a <HAL_SPI_TransmitReceive+0x80>
 8004834:	887b      	ldrh	r3, [r7, #2]
 8004836:	2b00      	cmp	r3, #0
 8004838:	d103      	bne.n	8004842 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 800483a:	2301      	movs	r3, #1
 800483c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8004840:	e1c0      	b.n	8004bc4 <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004848:	b2db      	uxtb	r3, r3
 800484a:	2b04      	cmp	r3, #4
 800484c:	d003      	beq.n	8004856 <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800484e:	68fb      	ldr	r3, [r7, #12]
 8004850:	2205      	movs	r2, #5
 8004852:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004856:	68fb      	ldr	r3, [r7, #12]
 8004858:	2200      	movs	r2, #0
 800485a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	687a      	ldr	r2, [r7, #4]
 8004860:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	887a      	ldrh	r2, [r7, #2]
 8004866:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	887a      	ldrh	r2, [r7, #2]
 800486e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	68ba      	ldr	r2, [r7, #8]
 8004876:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	887a      	ldrh	r2, [r7, #2]
 800487c:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 800487e:	68fb      	ldr	r3, [r7, #12]
 8004880:	887a      	ldrh	r2, [r7, #2]
 8004882:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	2200      	movs	r2, #0
 8004888:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 800488a:	68fb      	ldr	r3, [r7, #12]
 800488c:	2200      	movs	r2, #0
 800488e:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	68db      	ldr	r3, [r3, #12]
 8004894:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004898:	d802      	bhi.n	80048a0 <HAL_SPI_TransmitReceive+0xe6>
 800489a:	8a3b      	ldrh	r3, [r7, #16]
 800489c:	2b01      	cmp	r3, #1
 800489e:	d908      	bls.n	80048b2 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	685a      	ldr	r2, [r3, #4]
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80048ae:	605a      	str	r2, [r3, #4]
 80048b0:	e007      	b.n	80048c2 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	685a      	ldr	r2, [r3, #4]
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80048c0:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80048c2:	68fb      	ldr	r3, [r7, #12]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80048cc:	2b40      	cmp	r3, #64	; 0x40
 80048ce:	d007      	beq.n	80048e0 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	681a      	ldr	r2, [r3, #0]
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80048de:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	68db      	ldr	r3, [r3, #12]
 80048e4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80048e8:	d97c      	bls.n	80049e4 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	685b      	ldr	r3, [r3, #4]
 80048ee:	2b00      	cmp	r3, #0
 80048f0:	d002      	beq.n	80048f8 <HAL_SPI_TransmitReceive+0x13e>
 80048f2:	8a7b      	ldrh	r3, [r7, #18]
 80048f4:	2b01      	cmp	r3, #1
 80048f6:	d169      	bne.n	80049cc <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048fc:	881a      	ldrh	r2, [r3, #0]
 80048fe:	68fb      	ldr	r3, [r7, #12]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004908:	1c9a      	adds	r2, r3, #2
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 800490e:	68fb      	ldr	r3, [r7, #12]
 8004910:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004912:	b29b      	uxth	r3, r3
 8004914:	3b01      	subs	r3, #1
 8004916:	b29a      	uxth	r2, r3
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800491c:	e056      	b.n	80049cc <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800491e:	68fb      	ldr	r3, [r7, #12]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	689b      	ldr	r3, [r3, #8]
 8004924:	f003 0302 	and.w	r3, r3, #2
 8004928:	2b02      	cmp	r3, #2
 800492a:	d11b      	bne.n	8004964 <HAL_SPI_TransmitReceive+0x1aa>
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004930:	b29b      	uxth	r3, r3
 8004932:	2b00      	cmp	r3, #0
 8004934:	d016      	beq.n	8004964 <HAL_SPI_TransmitReceive+0x1aa>
 8004936:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004938:	2b01      	cmp	r3, #1
 800493a:	d113      	bne.n	8004964 <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004940:	881a      	ldrh	r2, [r3, #0]
 8004942:	68fb      	ldr	r3, [r7, #12]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800494c:	1c9a      	adds	r2, r3, #2
 800494e:	68fb      	ldr	r3, [r7, #12]
 8004950:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004956:	b29b      	uxth	r3, r3
 8004958:	3b01      	subs	r3, #1
 800495a:	b29a      	uxth	r2, r3
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004960:	2300      	movs	r3, #0
 8004962:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	689b      	ldr	r3, [r3, #8]
 800496a:	f003 0301 	and.w	r3, r3, #1
 800496e:	2b01      	cmp	r3, #1
 8004970:	d11c      	bne.n	80049ac <HAL_SPI_TransmitReceive+0x1f2>
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004978:	b29b      	uxth	r3, r3
 800497a:	2b00      	cmp	r3, #0
 800497c:	d016      	beq.n	80049ac <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800497e:	68fb      	ldr	r3, [r7, #12]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	68da      	ldr	r2, [r3, #12]
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004988:	b292      	uxth	r2, r2
 800498a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004990:	1c9a      	adds	r2, r3, #2
 8004992:	68fb      	ldr	r3, [r7, #12]
 8004994:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8004996:	68fb      	ldr	r3, [r7, #12]
 8004998:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800499c:	b29b      	uxth	r3, r3
 800499e:	3b01      	subs	r3, #1
 80049a0:	b29a      	uxth	r2, r3
 80049a2:	68fb      	ldr	r3, [r7, #12]
 80049a4:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80049a8:	2301      	movs	r3, #1
 80049aa:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80049ac:	f7fc fd22 	bl	80013f4 <HAL_GetTick>
 80049b0:	4602      	mov	r2, r0
 80049b2:	69fb      	ldr	r3, [r7, #28]
 80049b4:	1ad3      	subs	r3, r2, r3
 80049b6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80049b8:	429a      	cmp	r2, r3
 80049ba:	d807      	bhi.n	80049cc <HAL_SPI_TransmitReceive+0x212>
 80049bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80049c2:	d003      	beq.n	80049cc <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 80049c4:	2303      	movs	r3, #3
 80049c6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 80049ca:	e0fb      	b.n	8004bc4 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80049d0:	b29b      	uxth	r3, r3
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	d1a3      	bne.n	800491e <HAL_SPI_TransmitReceive+0x164>
 80049d6:	68fb      	ldr	r3, [r7, #12]
 80049d8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80049dc:	b29b      	uxth	r3, r3
 80049de:	2b00      	cmp	r3, #0
 80049e0:	d19d      	bne.n	800491e <HAL_SPI_TransmitReceive+0x164>
 80049e2:	e0df      	b.n	8004ba4 <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	685b      	ldr	r3, [r3, #4]
 80049e8:	2b00      	cmp	r3, #0
 80049ea:	d003      	beq.n	80049f4 <HAL_SPI_TransmitReceive+0x23a>
 80049ec:	8a7b      	ldrh	r3, [r7, #18]
 80049ee:	2b01      	cmp	r3, #1
 80049f0:	f040 80cb 	bne.w	8004b8a <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80049f8:	b29b      	uxth	r3, r3
 80049fa:	2b01      	cmp	r3, #1
 80049fc:	d912      	bls.n	8004a24 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80049fe:	68fb      	ldr	r3, [r7, #12]
 8004a00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a02:	881a      	ldrh	r2, [r3, #0]
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a0e:	1c9a      	adds	r2, r3, #2
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8004a14:	68fb      	ldr	r3, [r7, #12]
 8004a16:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004a18:	b29b      	uxth	r3, r3
 8004a1a:	3b02      	subs	r3, #2
 8004a1c:	b29a      	uxth	r2, r3
 8004a1e:	68fb      	ldr	r3, [r7, #12]
 8004a20:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004a22:	e0b2      	b.n	8004b8a <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8004a24:	68fb      	ldr	r3, [r7, #12]
 8004a26:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	330c      	adds	r3, #12
 8004a2e:	7812      	ldrb	r2, [r2, #0]
 8004a30:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8004a32:	68fb      	ldr	r3, [r7, #12]
 8004a34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a36:	1c5a      	adds	r2, r3, #1
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004a40:	b29b      	uxth	r3, r3
 8004a42:	3b01      	subs	r3, #1
 8004a44:	b29a      	uxth	r2, r3
 8004a46:	68fb      	ldr	r3, [r7, #12]
 8004a48:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004a4a:	e09e      	b.n	8004b8a <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	689b      	ldr	r3, [r3, #8]
 8004a52:	f003 0302 	and.w	r3, r3, #2
 8004a56:	2b02      	cmp	r3, #2
 8004a58:	d134      	bne.n	8004ac4 <HAL_SPI_TransmitReceive+0x30a>
 8004a5a:	68fb      	ldr	r3, [r7, #12]
 8004a5c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004a5e:	b29b      	uxth	r3, r3
 8004a60:	2b00      	cmp	r3, #0
 8004a62:	d02f      	beq.n	8004ac4 <HAL_SPI_TransmitReceive+0x30a>
 8004a64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a66:	2b01      	cmp	r3, #1
 8004a68:	d12c      	bne.n	8004ac4 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 8004a6a:	68fb      	ldr	r3, [r7, #12]
 8004a6c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004a6e:	b29b      	uxth	r3, r3
 8004a70:	2b01      	cmp	r3, #1
 8004a72:	d912      	bls.n	8004a9a <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a78:	881a      	ldrh	r2, [r3, #0]
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a84:	1c9a      	adds	r2, r3, #2
 8004a86:	68fb      	ldr	r3, [r7, #12]
 8004a88:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004a8e:	b29b      	uxth	r3, r3
 8004a90:	3b02      	subs	r3, #2
 8004a92:	b29a      	uxth	r2, r3
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004a98:	e012      	b.n	8004ac0 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	330c      	adds	r3, #12
 8004aa4:	7812      	ldrb	r2, [r2, #0]
 8004aa6:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004aac:	1c5a      	adds	r2, r3, #1
 8004aae:	68fb      	ldr	r3, [r7, #12]
 8004ab0:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8004ab2:	68fb      	ldr	r3, [r7, #12]
 8004ab4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004ab6:	b29b      	uxth	r3, r3
 8004ab8:	3b01      	subs	r3, #1
 8004aba:	b29a      	uxth	r2, r3
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004ac0:	2300      	movs	r3, #0
 8004ac2:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	689b      	ldr	r3, [r3, #8]
 8004aca:	f003 0301 	and.w	r3, r3, #1
 8004ace:	2b01      	cmp	r3, #1
 8004ad0:	d148      	bne.n	8004b64 <HAL_SPI_TransmitReceive+0x3aa>
 8004ad2:	68fb      	ldr	r3, [r7, #12]
 8004ad4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004ad8:	b29b      	uxth	r3, r3
 8004ada:	2b00      	cmp	r3, #0
 8004adc:	d042      	beq.n	8004b64 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004ae4:	b29b      	uxth	r3, r3
 8004ae6:	2b01      	cmp	r3, #1
 8004ae8:	d923      	bls.n	8004b32 <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004aea:	68fb      	ldr	r3, [r7, #12]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	68da      	ldr	r2, [r3, #12]
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004af4:	b292      	uxth	r2, r2
 8004af6:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004afc:	1c9a      	adds	r2, r3, #2
 8004afe:	68fb      	ldr	r3, [r7, #12]
 8004b00:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 8004b02:	68fb      	ldr	r3, [r7, #12]
 8004b04:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004b08:	b29b      	uxth	r3, r3
 8004b0a:	3b02      	subs	r3, #2
 8004b0c:	b29a      	uxth	r2, r3
 8004b0e:	68fb      	ldr	r3, [r7, #12]
 8004b10:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004b1a:	b29b      	uxth	r3, r3
 8004b1c:	2b01      	cmp	r3, #1
 8004b1e:	d81f      	bhi.n	8004b60 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	685a      	ldr	r2, [r3, #4]
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004b2e:	605a      	str	r2, [r3, #4]
 8004b30:	e016      	b.n	8004b60 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8004b32:	68fb      	ldr	r3, [r7, #12]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	f103 020c 	add.w	r2, r3, #12
 8004b3a:	68fb      	ldr	r3, [r7, #12]
 8004b3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b3e:	7812      	ldrb	r2, [r2, #0]
 8004b40:	b2d2      	uxtb	r2, r2
 8004b42:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b48:	1c5a      	adds	r2, r3, #1
 8004b4a:	68fb      	ldr	r3, [r7, #12]
 8004b4c:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004b54:	b29b      	uxth	r3, r3
 8004b56:	3b01      	subs	r3, #1
 8004b58:	b29a      	uxth	r2, r3
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004b60:	2301      	movs	r3, #1
 8004b62:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8004b64:	f7fc fc46 	bl	80013f4 <HAL_GetTick>
 8004b68:	4602      	mov	r2, r0
 8004b6a:	69fb      	ldr	r3, [r7, #28]
 8004b6c:	1ad3      	subs	r3, r2, r3
 8004b6e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004b70:	429a      	cmp	r2, r3
 8004b72:	d803      	bhi.n	8004b7c <HAL_SPI_TransmitReceive+0x3c2>
 8004b74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b76:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b7a:	d102      	bne.n	8004b82 <HAL_SPI_TransmitReceive+0x3c8>
 8004b7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b7e:	2b00      	cmp	r3, #0
 8004b80:	d103      	bne.n	8004b8a <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 8004b82:	2303      	movs	r3, #3
 8004b84:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8004b88:	e01c      	b.n	8004bc4 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004b8a:	68fb      	ldr	r3, [r7, #12]
 8004b8c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004b8e:	b29b      	uxth	r3, r3
 8004b90:	2b00      	cmp	r3, #0
 8004b92:	f47f af5b 	bne.w	8004a4c <HAL_SPI_TransmitReceive+0x292>
 8004b96:	68fb      	ldr	r3, [r7, #12]
 8004b98:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004b9c:	b29b      	uxth	r3, r3
 8004b9e:	2b00      	cmp	r3, #0
 8004ba0:	f47f af54 	bne.w	8004a4c <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004ba4:	69fa      	ldr	r2, [r7, #28]
 8004ba6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004ba8:	68f8      	ldr	r0, [r7, #12]
 8004baa:	f000 f98f 	bl	8004ecc <SPI_EndRxTxTransaction>
 8004bae:	4603      	mov	r3, r0
 8004bb0:	2b00      	cmp	r3, #0
 8004bb2:	d006      	beq.n	8004bc2 <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 8004bb4:	2301      	movs	r3, #1
 8004bb6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	2220      	movs	r2, #32
 8004bbe:	661a      	str	r2, [r3, #96]	; 0x60
 8004bc0:	e000      	b.n	8004bc4 <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 8004bc2:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004bc4:	68fb      	ldr	r3, [r7, #12]
 8004bc6:	2201      	movs	r2, #1
 8004bc8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	2200      	movs	r2, #0
 8004bd0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8004bd4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 8004bd8:	4618      	mov	r0, r3
 8004bda:	3728      	adds	r7, #40	; 0x28
 8004bdc:	46bd      	mov	sp, r7
 8004bde:	bd80      	pop	{r7, pc}

08004be0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004be0:	b580      	push	{r7, lr}
 8004be2:	b088      	sub	sp, #32
 8004be4:	af00      	add	r7, sp, #0
 8004be6:	60f8      	str	r0, [r7, #12]
 8004be8:	60b9      	str	r1, [r7, #8]
 8004bea:	603b      	str	r3, [r7, #0]
 8004bec:	4613      	mov	r3, r2
 8004bee:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004bf0:	f7fc fc00 	bl	80013f4 <HAL_GetTick>
 8004bf4:	4602      	mov	r2, r0
 8004bf6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004bf8:	1a9b      	subs	r3, r3, r2
 8004bfa:	683a      	ldr	r2, [r7, #0]
 8004bfc:	4413      	add	r3, r2
 8004bfe:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004c00:	f7fc fbf8 	bl	80013f4 <HAL_GetTick>
 8004c04:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004c06:	4b39      	ldr	r3, [pc, #228]	; (8004cec <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	015b      	lsls	r3, r3, #5
 8004c0c:	0d1b      	lsrs	r3, r3, #20
 8004c0e:	69fa      	ldr	r2, [r7, #28]
 8004c10:	fb02 f303 	mul.w	r3, r2, r3
 8004c14:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004c16:	e054      	b.n	8004cc2 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004c18:	683b      	ldr	r3, [r7, #0]
 8004c1a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c1e:	d050      	beq.n	8004cc2 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004c20:	f7fc fbe8 	bl	80013f4 <HAL_GetTick>
 8004c24:	4602      	mov	r2, r0
 8004c26:	69bb      	ldr	r3, [r7, #24]
 8004c28:	1ad3      	subs	r3, r2, r3
 8004c2a:	69fa      	ldr	r2, [r7, #28]
 8004c2c:	429a      	cmp	r2, r3
 8004c2e:	d902      	bls.n	8004c36 <SPI_WaitFlagStateUntilTimeout+0x56>
 8004c30:	69fb      	ldr	r3, [r7, #28]
 8004c32:	2b00      	cmp	r3, #0
 8004c34:	d13d      	bne.n	8004cb2 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004c36:	68fb      	ldr	r3, [r7, #12]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	685a      	ldr	r2, [r3, #4]
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004c44:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004c46:	68fb      	ldr	r3, [r7, #12]
 8004c48:	685b      	ldr	r3, [r3, #4]
 8004c4a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004c4e:	d111      	bne.n	8004c74 <SPI_WaitFlagStateUntilTimeout+0x94>
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	689b      	ldr	r3, [r3, #8]
 8004c54:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004c58:	d004      	beq.n	8004c64 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004c5a:	68fb      	ldr	r3, [r7, #12]
 8004c5c:	689b      	ldr	r3, [r3, #8]
 8004c5e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004c62:	d107      	bne.n	8004c74 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004c64:	68fb      	ldr	r3, [r7, #12]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	681a      	ldr	r2, [r3, #0]
 8004c6a:	68fb      	ldr	r3, [r7, #12]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004c72:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c78:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004c7c:	d10f      	bne.n	8004c9e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8004c7e:	68fb      	ldr	r3, [r7, #12]
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	681a      	ldr	r2, [r3, #0]
 8004c84:	68fb      	ldr	r3, [r7, #12]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004c8c:	601a      	str	r2, [r3, #0]
 8004c8e:	68fb      	ldr	r3, [r7, #12]
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	681a      	ldr	r2, [r3, #0]
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004c9c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004c9e:	68fb      	ldr	r3, [r7, #12]
 8004ca0:	2201      	movs	r2, #1
 8004ca2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004ca6:	68fb      	ldr	r3, [r7, #12]
 8004ca8:	2200      	movs	r2, #0
 8004caa:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8004cae:	2303      	movs	r3, #3
 8004cb0:	e017      	b.n	8004ce2 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004cb2:	697b      	ldr	r3, [r7, #20]
 8004cb4:	2b00      	cmp	r3, #0
 8004cb6:	d101      	bne.n	8004cbc <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8004cb8:	2300      	movs	r3, #0
 8004cba:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004cbc:	697b      	ldr	r3, [r7, #20]
 8004cbe:	3b01      	subs	r3, #1
 8004cc0:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004cc2:	68fb      	ldr	r3, [r7, #12]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	689a      	ldr	r2, [r3, #8]
 8004cc8:	68bb      	ldr	r3, [r7, #8]
 8004cca:	4013      	ands	r3, r2
 8004ccc:	68ba      	ldr	r2, [r7, #8]
 8004cce:	429a      	cmp	r2, r3
 8004cd0:	bf0c      	ite	eq
 8004cd2:	2301      	moveq	r3, #1
 8004cd4:	2300      	movne	r3, #0
 8004cd6:	b2db      	uxtb	r3, r3
 8004cd8:	461a      	mov	r2, r3
 8004cda:	79fb      	ldrb	r3, [r7, #7]
 8004cdc:	429a      	cmp	r2, r3
 8004cde:	d19b      	bne.n	8004c18 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004ce0:	2300      	movs	r3, #0
}
 8004ce2:	4618      	mov	r0, r3
 8004ce4:	3720      	adds	r7, #32
 8004ce6:	46bd      	mov	sp, r7
 8004ce8:	bd80      	pop	{r7, pc}
 8004cea:	bf00      	nop
 8004cec:	20000000 	.word	0x20000000

08004cf0 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004cf0:	b580      	push	{r7, lr}
 8004cf2:	b08a      	sub	sp, #40	; 0x28
 8004cf4:	af00      	add	r7, sp, #0
 8004cf6:	60f8      	str	r0, [r7, #12]
 8004cf8:	60b9      	str	r1, [r7, #8]
 8004cfa:	607a      	str	r2, [r7, #4]
 8004cfc:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8004cfe:	2300      	movs	r3, #0
 8004d00:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8004d02:	f7fc fb77 	bl	80013f4 <HAL_GetTick>
 8004d06:	4602      	mov	r2, r0
 8004d08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d0a:	1a9b      	subs	r3, r3, r2
 8004d0c:	683a      	ldr	r2, [r7, #0]
 8004d0e:	4413      	add	r3, r2
 8004d10:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 8004d12:	f7fc fb6f 	bl	80013f4 <HAL_GetTick>
 8004d16:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	330c      	adds	r3, #12
 8004d1e:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8004d20:	4b3d      	ldr	r3, [pc, #244]	; (8004e18 <SPI_WaitFifoStateUntilTimeout+0x128>)
 8004d22:	681a      	ldr	r2, [r3, #0]
 8004d24:	4613      	mov	r3, r2
 8004d26:	009b      	lsls	r3, r3, #2
 8004d28:	4413      	add	r3, r2
 8004d2a:	00da      	lsls	r2, r3, #3
 8004d2c:	1ad3      	subs	r3, r2, r3
 8004d2e:	0d1b      	lsrs	r3, r3, #20
 8004d30:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004d32:	fb02 f303 	mul.w	r3, r2, r3
 8004d36:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8004d38:	e060      	b.n	8004dfc <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8004d3a:	68bb      	ldr	r3, [r7, #8]
 8004d3c:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8004d40:	d107      	bne.n	8004d52 <SPI_WaitFifoStateUntilTimeout+0x62>
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	2b00      	cmp	r3, #0
 8004d46:	d104      	bne.n	8004d52 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8004d48:	69fb      	ldr	r3, [r7, #28]
 8004d4a:	781b      	ldrb	r3, [r3, #0]
 8004d4c:	b2db      	uxtb	r3, r3
 8004d4e:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8004d50:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8004d52:	683b      	ldr	r3, [r7, #0]
 8004d54:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d58:	d050      	beq.n	8004dfc <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004d5a:	f7fc fb4b 	bl	80013f4 <HAL_GetTick>
 8004d5e:	4602      	mov	r2, r0
 8004d60:	6a3b      	ldr	r3, [r7, #32]
 8004d62:	1ad3      	subs	r3, r2, r3
 8004d64:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004d66:	429a      	cmp	r2, r3
 8004d68:	d902      	bls.n	8004d70 <SPI_WaitFifoStateUntilTimeout+0x80>
 8004d6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d6c:	2b00      	cmp	r3, #0
 8004d6e:	d13d      	bne.n	8004dec <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004d70:	68fb      	ldr	r3, [r7, #12]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	685a      	ldr	r2, [r3, #4]
 8004d76:	68fb      	ldr	r3, [r7, #12]
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004d7e:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	685b      	ldr	r3, [r3, #4]
 8004d84:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004d88:	d111      	bne.n	8004dae <SPI_WaitFifoStateUntilTimeout+0xbe>
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	689b      	ldr	r3, [r3, #8]
 8004d8e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004d92:	d004      	beq.n	8004d9e <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004d94:	68fb      	ldr	r3, [r7, #12]
 8004d96:	689b      	ldr	r3, [r3, #8]
 8004d98:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004d9c:	d107      	bne.n	8004dae <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004d9e:	68fb      	ldr	r3, [r7, #12]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	681a      	ldr	r2, [r3, #0]
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004dac:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004db2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004db6:	d10f      	bne.n	8004dd8 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	681a      	ldr	r2, [r3, #0]
 8004dbe:	68fb      	ldr	r3, [r7, #12]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004dc6:	601a      	str	r2, [r3, #0]
 8004dc8:	68fb      	ldr	r3, [r7, #12]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	681a      	ldr	r2, [r3, #0]
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004dd6:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	2201      	movs	r2, #1
 8004ddc:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	2200      	movs	r2, #0
 8004de4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8004de8:	2303      	movs	r3, #3
 8004dea:	e010      	b.n	8004e0e <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004dec:	69bb      	ldr	r3, [r7, #24]
 8004dee:	2b00      	cmp	r3, #0
 8004df0:	d101      	bne.n	8004df6 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8004df2:	2300      	movs	r3, #0
 8004df4:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 8004df6:	69bb      	ldr	r3, [r7, #24]
 8004df8:	3b01      	subs	r3, #1
 8004dfa:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	689a      	ldr	r2, [r3, #8]
 8004e02:	68bb      	ldr	r3, [r7, #8]
 8004e04:	4013      	ands	r3, r2
 8004e06:	687a      	ldr	r2, [r7, #4]
 8004e08:	429a      	cmp	r2, r3
 8004e0a:	d196      	bne.n	8004d3a <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8004e0c:	2300      	movs	r3, #0
}
 8004e0e:	4618      	mov	r0, r3
 8004e10:	3728      	adds	r7, #40	; 0x28
 8004e12:	46bd      	mov	sp, r7
 8004e14:	bd80      	pop	{r7, pc}
 8004e16:	bf00      	nop
 8004e18:	20000000 	.word	0x20000000

08004e1c <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8004e1c:	b580      	push	{r7, lr}
 8004e1e:	b086      	sub	sp, #24
 8004e20:	af02      	add	r7, sp, #8
 8004e22:	60f8      	str	r0, [r7, #12]
 8004e24:	60b9      	str	r1, [r7, #8]
 8004e26:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004e28:	68fb      	ldr	r3, [r7, #12]
 8004e2a:	685b      	ldr	r3, [r3, #4]
 8004e2c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004e30:	d111      	bne.n	8004e56 <SPI_EndRxTransaction+0x3a>
 8004e32:	68fb      	ldr	r3, [r7, #12]
 8004e34:	689b      	ldr	r3, [r3, #8]
 8004e36:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004e3a:	d004      	beq.n	8004e46 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	689b      	ldr	r3, [r3, #8]
 8004e40:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004e44:	d107      	bne.n	8004e56 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8004e46:	68fb      	ldr	r3, [r7, #12]
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	681a      	ldr	r2, [r3, #0]
 8004e4c:	68fb      	ldr	r3, [r7, #12]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004e54:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	9300      	str	r3, [sp, #0]
 8004e5a:	68bb      	ldr	r3, [r7, #8]
 8004e5c:	2200      	movs	r2, #0
 8004e5e:	2180      	movs	r1, #128	; 0x80
 8004e60:	68f8      	ldr	r0, [r7, #12]
 8004e62:	f7ff febd 	bl	8004be0 <SPI_WaitFlagStateUntilTimeout>
 8004e66:	4603      	mov	r3, r0
 8004e68:	2b00      	cmp	r3, #0
 8004e6a:	d007      	beq.n	8004e7c <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004e6c:	68fb      	ldr	r3, [r7, #12]
 8004e6e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004e70:	f043 0220 	orr.w	r2, r3, #32
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8004e78:	2303      	movs	r3, #3
 8004e7a:	e023      	b.n	8004ec4 <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004e7c:	68fb      	ldr	r3, [r7, #12]
 8004e7e:	685b      	ldr	r3, [r3, #4]
 8004e80:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004e84:	d11d      	bne.n	8004ec2 <SPI_EndRxTransaction+0xa6>
 8004e86:	68fb      	ldr	r3, [r7, #12]
 8004e88:	689b      	ldr	r3, [r3, #8]
 8004e8a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004e8e:	d004      	beq.n	8004e9a <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004e90:	68fb      	ldr	r3, [r7, #12]
 8004e92:	689b      	ldr	r3, [r3, #8]
 8004e94:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004e98:	d113      	bne.n	8004ec2 <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	9300      	str	r3, [sp, #0]
 8004e9e:	68bb      	ldr	r3, [r7, #8]
 8004ea0:	2200      	movs	r2, #0
 8004ea2:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8004ea6:	68f8      	ldr	r0, [r7, #12]
 8004ea8:	f7ff ff22 	bl	8004cf0 <SPI_WaitFifoStateUntilTimeout>
 8004eac:	4603      	mov	r3, r0
 8004eae:	2b00      	cmp	r3, #0
 8004eb0:	d007      	beq.n	8004ec2 <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004eb2:	68fb      	ldr	r3, [r7, #12]
 8004eb4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004eb6:	f043 0220 	orr.w	r2, r3, #32
 8004eba:	68fb      	ldr	r3, [r7, #12]
 8004ebc:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 8004ebe:	2303      	movs	r3, #3
 8004ec0:	e000      	b.n	8004ec4 <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 8004ec2:	2300      	movs	r3, #0
}
 8004ec4:	4618      	mov	r0, r3
 8004ec6:	3710      	adds	r7, #16
 8004ec8:	46bd      	mov	sp, r7
 8004eca:	bd80      	pop	{r7, pc}

08004ecc <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004ecc:	b580      	push	{r7, lr}
 8004ece:	b086      	sub	sp, #24
 8004ed0:	af02      	add	r7, sp, #8
 8004ed2:	60f8      	str	r0, [r7, #12]
 8004ed4:	60b9      	str	r1, [r7, #8]
 8004ed6:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	9300      	str	r3, [sp, #0]
 8004edc:	68bb      	ldr	r3, [r7, #8]
 8004ede:	2200      	movs	r2, #0
 8004ee0:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8004ee4:	68f8      	ldr	r0, [r7, #12]
 8004ee6:	f7ff ff03 	bl	8004cf0 <SPI_WaitFifoStateUntilTimeout>
 8004eea:	4603      	mov	r3, r0
 8004eec:	2b00      	cmp	r3, #0
 8004eee:	d007      	beq.n	8004f00 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004ef0:	68fb      	ldr	r3, [r7, #12]
 8004ef2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004ef4:	f043 0220 	orr.w	r2, r3, #32
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8004efc:	2303      	movs	r3, #3
 8004efe:	e027      	b.n	8004f50 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	9300      	str	r3, [sp, #0]
 8004f04:	68bb      	ldr	r3, [r7, #8]
 8004f06:	2200      	movs	r2, #0
 8004f08:	2180      	movs	r1, #128	; 0x80
 8004f0a:	68f8      	ldr	r0, [r7, #12]
 8004f0c:	f7ff fe68 	bl	8004be0 <SPI_WaitFlagStateUntilTimeout>
 8004f10:	4603      	mov	r3, r0
 8004f12:	2b00      	cmp	r3, #0
 8004f14:	d007      	beq.n	8004f26 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004f16:	68fb      	ldr	r3, [r7, #12]
 8004f18:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004f1a:	f043 0220 	orr.w	r2, r3, #32
 8004f1e:	68fb      	ldr	r3, [r7, #12]
 8004f20:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8004f22:	2303      	movs	r3, #3
 8004f24:	e014      	b.n	8004f50 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	9300      	str	r3, [sp, #0]
 8004f2a:	68bb      	ldr	r3, [r7, #8]
 8004f2c:	2200      	movs	r2, #0
 8004f2e:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8004f32:	68f8      	ldr	r0, [r7, #12]
 8004f34:	f7ff fedc 	bl	8004cf0 <SPI_WaitFifoStateUntilTimeout>
 8004f38:	4603      	mov	r3, r0
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	d007      	beq.n	8004f4e <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004f3e:	68fb      	ldr	r3, [r7, #12]
 8004f40:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004f42:	f043 0220 	orr.w	r2, r3, #32
 8004f46:	68fb      	ldr	r3, [r7, #12]
 8004f48:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8004f4a:	2303      	movs	r3, #3
 8004f4c:	e000      	b.n	8004f50 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8004f4e:	2300      	movs	r3, #0
}
 8004f50:	4618      	mov	r0, r3
 8004f52:	3710      	adds	r7, #16
 8004f54:	46bd      	mov	sp, r7
 8004f56:	bd80      	pop	{r7, pc}

08004f58 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004f58:	b580      	push	{r7, lr}
 8004f5a:	b082      	sub	sp, #8
 8004f5c:	af00      	add	r7, sp, #0
 8004f5e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	2b00      	cmp	r3, #0
 8004f64:	d101      	bne.n	8004f6a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004f66:	2301      	movs	r3, #1
 8004f68:	e049      	b.n	8004ffe <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004f70:	b2db      	uxtb	r3, r3
 8004f72:	2b00      	cmp	r3, #0
 8004f74:	d106      	bne.n	8004f84 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	2200      	movs	r2, #0
 8004f7a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004f7e:	6878      	ldr	r0, [r7, #4]
 8004f80:	f7fc f916 	bl	80011b0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	2202      	movs	r2, #2
 8004f88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	681a      	ldr	r2, [r3, #0]
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	3304      	adds	r3, #4
 8004f94:	4619      	mov	r1, r3
 8004f96:	4610      	mov	r0, r2
 8004f98:	f000 fc3a 	bl	8005810 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	2201      	movs	r2, #1
 8004fa0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	2201      	movs	r2, #1
 8004fa8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	2201      	movs	r2, #1
 8004fb0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	2201      	movs	r2, #1
 8004fb8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	2201      	movs	r2, #1
 8004fc0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	2201      	movs	r2, #1
 8004fc8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	2201      	movs	r2, #1
 8004fd0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	2201      	movs	r2, #1
 8004fd8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	2201      	movs	r2, #1
 8004fe0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	2201      	movs	r2, #1
 8004fe8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	2201      	movs	r2, #1
 8004ff0:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	2201      	movs	r2, #1
 8004ff8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004ffc:	2300      	movs	r3, #0
}
 8004ffe:	4618      	mov	r0, r3
 8005000:	3708      	adds	r7, #8
 8005002:	46bd      	mov	sp, r7
 8005004:	bd80      	pop	{r7, pc}

08005006 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005006:	b580      	push	{r7, lr}
 8005008:	b082      	sub	sp, #8
 800500a:	af00      	add	r7, sp, #0
 800500c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	2b00      	cmp	r3, #0
 8005012:	d101      	bne.n	8005018 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005014:	2301      	movs	r3, #1
 8005016:	e049      	b.n	80050ac <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800501e:	b2db      	uxtb	r3, r3
 8005020:	2b00      	cmp	r3, #0
 8005022:	d106      	bne.n	8005032 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	2200      	movs	r2, #0
 8005028:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800502c:	6878      	ldr	r0, [r7, #4]
 800502e:	f000 f841 	bl	80050b4 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	2202      	movs	r2, #2
 8005036:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	681a      	ldr	r2, [r3, #0]
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	3304      	adds	r3, #4
 8005042:	4619      	mov	r1, r3
 8005044:	4610      	mov	r0, r2
 8005046:	f000 fbe3 	bl	8005810 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	2201      	movs	r2, #1
 800504e:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	2201      	movs	r2, #1
 8005056:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	2201      	movs	r2, #1
 800505e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	2201      	movs	r2, #1
 8005066:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	2201      	movs	r2, #1
 800506e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	2201      	movs	r2, #1
 8005076:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	2201      	movs	r2, #1
 800507e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	2201      	movs	r2, #1
 8005086:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	2201      	movs	r2, #1
 800508e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	2201      	movs	r2, #1
 8005096:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	2201      	movs	r2, #1
 800509e:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	2201      	movs	r2, #1
 80050a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80050aa:	2300      	movs	r3, #0
}
 80050ac:	4618      	mov	r0, r3
 80050ae:	3708      	adds	r7, #8
 80050b0:	46bd      	mov	sp, r7
 80050b2:	bd80      	pop	{r7, pc}

080050b4 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80050b4:	b480      	push	{r7}
 80050b6:	b083      	sub	sp, #12
 80050b8:	af00      	add	r7, sp, #0
 80050ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80050bc:	bf00      	nop
 80050be:	370c      	adds	r7, #12
 80050c0:	46bd      	mov	sp, r7
 80050c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050c6:	4770      	bx	lr

080050c8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80050c8:	b580      	push	{r7, lr}
 80050ca:	b084      	sub	sp, #16
 80050cc:	af00      	add	r7, sp, #0
 80050ce:	6078      	str	r0, [r7, #4]
 80050d0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80050d2:	683b      	ldr	r3, [r7, #0]
 80050d4:	2b00      	cmp	r3, #0
 80050d6:	d109      	bne.n	80050ec <HAL_TIM_PWM_Start+0x24>
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80050de:	b2db      	uxtb	r3, r3
 80050e0:	2b01      	cmp	r3, #1
 80050e2:	bf14      	ite	ne
 80050e4:	2301      	movne	r3, #1
 80050e6:	2300      	moveq	r3, #0
 80050e8:	b2db      	uxtb	r3, r3
 80050ea:	e03c      	b.n	8005166 <HAL_TIM_PWM_Start+0x9e>
 80050ec:	683b      	ldr	r3, [r7, #0]
 80050ee:	2b04      	cmp	r3, #4
 80050f0:	d109      	bne.n	8005106 <HAL_TIM_PWM_Start+0x3e>
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80050f8:	b2db      	uxtb	r3, r3
 80050fa:	2b01      	cmp	r3, #1
 80050fc:	bf14      	ite	ne
 80050fe:	2301      	movne	r3, #1
 8005100:	2300      	moveq	r3, #0
 8005102:	b2db      	uxtb	r3, r3
 8005104:	e02f      	b.n	8005166 <HAL_TIM_PWM_Start+0x9e>
 8005106:	683b      	ldr	r3, [r7, #0]
 8005108:	2b08      	cmp	r3, #8
 800510a:	d109      	bne.n	8005120 <HAL_TIM_PWM_Start+0x58>
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005112:	b2db      	uxtb	r3, r3
 8005114:	2b01      	cmp	r3, #1
 8005116:	bf14      	ite	ne
 8005118:	2301      	movne	r3, #1
 800511a:	2300      	moveq	r3, #0
 800511c:	b2db      	uxtb	r3, r3
 800511e:	e022      	b.n	8005166 <HAL_TIM_PWM_Start+0x9e>
 8005120:	683b      	ldr	r3, [r7, #0]
 8005122:	2b0c      	cmp	r3, #12
 8005124:	d109      	bne.n	800513a <HAL_TIM_PWM_Start+0x72>
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800512c:	b2db      	uxtb	r3, r3
 800512e:	2b01      	cmp	r3, #1
 8005130:	bf14      	ite	ne
 8005132:	2301      	movne	r3, #1
 8005134:	2300      	moveq	r3, #0
 8005136:	b2db      	uxtb	r3, r3
 8005138:	e015      	b.n	8005166 <HAL_TIM_PWM_Start+0x9e>
 800513a:	683b      	ldr	r3, [r7, #0]
 800513c:	2b10      	cmp	r3, #16
 800513e:	d109      	bne.n	8005154 <HAL_TIM_PWM_Start+0x8c>
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8005146:	b2db      	uxtb	r3, r3
 8005148:	2b01      	cmp	r3, #1
 800514a:	bf14      	ite	ne
 800514c:	2301      	movne	r3, #1
 800514e:	2300      	moveq	r3, #0
 8005150:	b2db      	uxtb	r3, r3
 8005152:	e008      	b.n	8005166 <HAL_TIM_PWM_Start+0x9e>
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800515a:	b2db      	uxtb	r3, r3
 800515c:	2b01      	cmp	r3, #1
 800515e:	bf14      	ite	ne
 8005160:	2301      	movne	r3, #1
 8005162:	2300      	moveq	r3, #0
 8005164:	b2db      	uxtb	r3, r3
 8005166:	2b00      	cmp	r3, #0
 8005168:	d001      	beq.n	800516e <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800516a:	2301      	movs	r3, #1
 800516c:	e097      	b.n	800529e <HAL_TIM_PWM_Start+0x1d6>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800516e:	683b      	ldr	r3, [r7, #0]
 8005170:	2b00      	cmp	r3, #0
 8005172:	d104      	bne.n	800517e <HAL_TIM_PWM_Start+0xb6>
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	2202      	movs	r2, #2
 8005178:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800517c:	e023      	b.n	80051c6 <HAL_TIM_PWM_Start+0xfe>
 800517e:	683b      	ldr	r3, [r7, #0]
 8005180:	2b04      	cmp	r3, #4
 8005182:	d104      	bne.n	800518e <HAL_TIM_PWM_Start+0xc6>
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	2202      	movs	r2, #2
 8005188:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800518c:	e01b      	b.n	80051c6 <HAL_TIM_PWM_Start+0xfe>
 800518e:	683b      	ldr	r3, [r7, #0]
 8005190:	2b08      	cmp	r3, #8
 8005192:	d104      	bne.n	800519e <HAL_TIM_PWM_Start+0xd6>
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	2202      	movs	r2, #2
 8005198:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800519c:	e013      	b.n	80051c6 <HAL_TIM_PWM_Start+0xfe>
 800519e:	683b      	ldr	r3, [r7, #0]
 80051a0:	2b0c      	cmp	r3, #12
 80051a2:	d104      	bne.n	80051ae <HAL_TIM_PWM_Start+0xe6>
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	2202      	movs	r2, #2
 80051a8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80051ac:	e00b      	b.n	80051c6 <HAL_TIM_PWM_Start+0xfe>
 80051ae:	683b      	ldr	r3, [r7, #0]
 80051b0:	2b10      	cmp	r3, #16
 80051b2:	d104      	bne.n	80051be <HAL_TIM_PWM_Start+0xf6>
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	2202      	movs	r2, #2
 80051b8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80051bc:	e003      	b.n	80051c6 <HAL_TIM_PWM_Start+0xfe>
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	2202      	movs	r2, #2
 80051c2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	2201      	movs	r2, #1
 80051cc:	6839      	ldr	r1, [r7, #0]
 80051ce:	4618      	mov	r0, r3
 80051d0:	f000 ff40 	bl	8006054 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	4a33      	ldr	r2, [pc, #204]	; (80052a8 <HAL_TIM_PWM_Start+0x1e0>)
 80051da:	4293      	cmp	r3, r2
 80051dc:	d013      	beq.n	8005206 <HAL_TIM_PWM_Start+0x13e>
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	4a32      	ldr	r2, [pc, #200]	; (80052ac <HAL_TIM_PWM_Start+0x1e4>)
 80051e4:	4293      	cmp	r3, r2
 80051e6:	d00e      	beq.n	8005206 <HAL_TIM_PWM_Start+0x13e>
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	4a30      	ldr	r2, [pc, #192]	; (80052b0 <HAL_TIM_PWM_Start+0x1e8>)
 80051ee:	4293      	cmp	r3, r2
 80051f0:	d009      	beq.n	8005206 <HAL_TIM_PWM_Start+0x13e>
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	4a2f      	ldr	r2, [pc, #188]	; (80052b4 <HAL_TIM_PWM_Start+0x1ec>)
 80051f8:	4293      	cmp	r3, r2
 80051fa:	d004      	beq.n	8005206 <HAL_TIM_PWM_Start+0x13e>
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	4a2d      	ldr	r2, [pc, #180]	; (80052b8 <HAL_TIM_PWM_Start+0x1f0>)
 8005202:	4293      	cmp	r3, r2
 8005204:	d101      	bne.n	800520a <HAL_TIM_PWM_Start+0x142>
 8005206:	2301      	movs	r3, #1
 8005208:	e000      	b.n	800520c <HAL_TIM_PWM_Start+0x144>
 800520a:	2300      	movs	r3, #0
 800520c:	2b00      	cmp	r3, #0
 800520e:	d007      	beq.n	8005220 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800521e:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	4a20      	ldr	r2, [pc, #128]	; (80052a8 <HAL_TIM_PWM_Start+0x1e0>)
 8005226:	4293      	cmp	r3, r2
 8005228:	d018      	beq.n	800525c <HAL_TIM_PWM_Start+0x194>
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005232:	d013      	beq.n	800525c <HAL_TIM_PWM_Start+0x194>
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	4a20      	ldr	r2, [pc, #128]	; (80052bc <HAL_TIM_PWM_Start+0x1f4>)
 800523a:	4293      	cmp	r3, r2
 800523c:	d00e      	beq.n	800525c <HAL_TIM_PWM_Start+0x194>
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	4a1f      	ldr	r2, [pc, #124]	; (80052c0 <HAL_TIM_PWM_Start+0x1f8>)
 8005244:	4293      	cmp	r3, r2
 8005246:	d009      	beq.n	800525c <HAL_TIM_PWM_Start+0x194>
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	4a17      	ldr	r2, [pc, #92]	; (80052ac <HAL_TIM_PWM_Start+0x1e4>)
 800524e:	4293      	cmp	r3, r2
 8005250:	d004      	beq.n	800525c <HAL_TIM_PWM_Start+0x194>
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	4a16      	ldr	r2, [pc, #88]	; (80052b0 <HAL_TIM_PWM_Start+0x1e8>)
 8005258:	4293      	cmp	r3, r2
 800525a:	d115      	bne.n	8005288 <HAL_TIM_PWM_Start+0x1c0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	689a      	ldr	r2, [r3, #8]
 8005262:	4b18      	ldr	r3, [pc, #96]	; (80052c4 <HAL_TIM_PWM_Start+0x1fc>)
 8005264:	4013      	ands	r3, r2
 8005266:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005268:	68fb      	ldr	r3, [r7, #12]
 800526a:	2b06      	cmp	r3, #6
 800526c:	d015      	beq.n	800529a <HAL_TIM_PWM_Start+0x1d2>
 800526e:	68fb      	ldr	r3, [r7, #12]
 8005270:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005274:	d011      	beq.n	800529a <HAL_TIM_PWM_Start+0x1d2>
    {
      __HAL_TIM_ENABLE(htim);
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	681a      	ldr	r2, [r3, #0]
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	f042 0201 	orr.w	r2, r2, #1
 8005284:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005286:	e008      	b.n	800529a <HAL_TIM_PWM_Start+0x1d2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	681a      	ldr	r2, [r3, #0]
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	f042 0201 	orr.w	r2, r2, #1
 8005296:	601a      	str	r2, [r3, #0]
 8005298:	e000      	b.n	800529c <HAL_TIM_PWM_Start+0x1d4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800529a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800529c:	2300      	movs	r3, #0
}
 800529e:	4618      	mov	r0, r3
 80052a0:	3710      	adds	r7, #16
 80052a2:	46bd      	mov	sp, r7
 80052a4:	bd80      	pop	{r7, pc}
 80052a6:	bf00      	nop
 80052a8:	40012c00 	.word	0x40012c00
 80052ac:	40013400 	.word	0x40013400
 80052b0:	40014000 	.word	0x40014000
 80052b4:	40014400 	.word	0x40014400
 80052b8:	40014800 	.word	0x40014800
 80052bc:	40000400 	.word	0x40000400
 80052c0:	40000800 	.word	0x40000800
 80052c4:	00010007 	.word	0x00010007

080052c8 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80052c8:	b580      	push	{r7, lr}
 80052ca:	b082      	sub	sp, #8
 80052cc:	af00      	add	r7, sp, #0
 80052ce:	6078      	str	r0, [r7, #4]
 80052d0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	2200      	movs	r2, #0
 80052d8:	6839      	ldr	r1, [r7, #0]
 80052da:	4618      	mov	r0, r3
 80052dc:	f000 feba 	bl	8006054 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	4a3e      	ldr	r2, [pc, #248]	; (80053e0 <HAL_TIM_PWM_Stop+0x118>)
 80052e6:	4293      	cmp	r3, r2
 80052e8:	d013      	beq.n	8005312 <HAL_TIM_PWM_Stop+0x4a>
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	4a3d      	ldr	r2, [pc, #244]	; (80053e4 <HAL_TIM_PWM_Stop+0x11c>)
 80052f0:	4293      	cmp	r3, r2
 80052f2:	d00e      	beq.n	8005312 <HAL_TIM_PWM_Stop+0x4a>
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	4a3b      	ldr	r2, [pc, #236]	; (80053e8 <HAL_TIM_PWM_Stop+0x120>)
 80052fa:	4293      	cmp	r3, r2
 80052fc:	d009      	beq.n	8005312 <HAL_TIM_PWM_Stop+0x4a>
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	4a3a      	ldr	r2, [pc, #232]	; (80053ec <HAL_TIM_PWM_Stop+0x124>)
 8005304:	4293      	cmp	r3, r2
 8005306:	d004      	beq.n	8005312 <HAL_TIM_PWM_Stop+0x4a>
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	4a38      	ldr	r2, [pc, #224]	; (80053f0 <HAL_TIM_PWM_Stop+0x128>)
 800530e:	4293      	cmp	r3, r2
 8005310:	d101      	bne.n	8005316 <HAL_TIM_PWM_Stop+0x4e>
 8005312:	2301      	movs	r3, #1
 8005314:	e000      	b.n	8005318 <HAL_TIM_PWM_Stop+0x50>
 8005316:	2300      	movs	r3, #0
 8005318:	2b00      	cmp	r3, #0
 800531a:	d017      	beq.n	800534c <HAL_TIM_PWM_Stop+0x84>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	6a1a      	ldr	r2, [r3, #32]
 8005322:	f241 1311 	movw	r3, #4369	; 0x1111
 8005326:	4013      	ands	r3, r2
 8005328:	2b00      	cmp	r3, #0
 800532a:	d10f      	bne.n	800534c <HAL_TIM_PWM_Stop+0x84>
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	6a1a      	ldr	r2, [r3, #32]
 8005332:	f244 4344 	movw	r3, #17476	; 0x4444
 8005336:	4013      	ands	r3, r2
 8005338:	2b00      	cmp	r3, #0
 800533a:	d107      	bne.n	800534c <HAL_TIM_PWM_Stop+0x84>
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800534a:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	6a1a      	ldr	r2, [r3, #32]
 8005352:	f241 1311 	movw	r3, #4369	; 0x1111
 8005356:	4013      	ands	r3, r2
 8005358:	2b00      	cmp	r3, #0
 800535a:	d10f      	bne.n	800537c <HAL_TIM_PWM_Stop+0xb4>
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	6a1a      	ldr	r2, [r3, #32]
 8005362:	f244 4344 	movw	r3, #17476	; 0x4444
 8005366:	4013      	ands	r3, r2
 8005368:	2b00      	cmp	r3, #0
 800536a:	d107      	bne.n	800537c <HAL_TIM_PWM_Stop+0xb4>
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	681a      	ldr	r2, [r3, #0]
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	f022 0201 	bic.w	r2, r2, #1
 800537a:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800537c:	683b      	ldr	r3, [r7, #0]
 800537e:	2b00      	cmp	r3, #0
 8005380:	d104      	bne.n	800538c <HAL_TIM_PWM_Stop+0xc4>
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	2201      	movs	r2, #1
 8005386:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800538a:	e023      	b.n	80053d4 <HAL_TIM_PWM_Stop+0x10c>
 800538c:	683b      	ldr	r3, [r7, #0]
 800538e:	2b04      	cmp	r3, #4
 8005390:	d104      	bne.n	800539c <HAL_TIM_PWM_Stop+0xd4>
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	2201      	movs	r2, #1
 8005396:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800539a:	e01b      	b.n	80053d4 <HAL_TIM_PWM_Stop+0x10c>
 800539c:	683b      	ldr	r3, [r7, #0]
 800539e:	2b08      	cmp	r3, #8
 80053a0:	d104      	bne.n	80053ac <HAL_TIM_PWM_Stop+0xe4>
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	2201      	movs	r2, #1
 80053a6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80053aa:	e013      	b.n	80053d4 <HAL_TIM_PWM_Stop+0x10c>
 80053ac:	683b      	ldr	r3, [r7, #0]
 80053ae:	2b0c      	cmp	r3, #12
 80053b0:	d104      	bne.n	80053bc <HAL_TIM_PWM_Stop+0xf4>
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	2201      	movs	r2, #1
 80053b6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80053ba:	e00b      	b.n	80053d4 <HAL_TIM_PWM_Stop+0x10c>
 80053bc:	683b      	ldr	r3, [r7, #0]
 80053be:	2b10      	cmp	r3, #16
 80053c0:	d104      	bne.n	80053cc <HAL_TIM_PWM_Stop+0x104>
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	2201      	movs	r2, #1
 80053c6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80053ca:	e003      	b.n	80053d4 <HAL_TIM_PWM_Stop+0x10c>
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	2201      	movs	r2, #1
 80053d0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Return function status */
  return HAL_OK;
 80053d4:	2300      	movs	r3, #0
}
 80053d6:	4618      	mov	r0, r3
 80053d8:	3708      	adds	r7, #8
 80053da:	46bd      	mov	sp, r7
 80053dc:	bd80      	pop	{r7, pc}
 80053de:	bf00      	nop
 80053e0:	40012c00 	.word	0x40012c00
 80053e4:	40013400 	.word	0x40013400
 80053e8:	40014000 	.word	0x40014000
 80053ec:	40014400 	.word	0x40014400
 80053f0:	40014800 	.word	0x40014800

080053f4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80053f4:	b580      	push	{r7, lr}
 80053f6:	b086      	sub	sp, #24
 80053f8:	af00      	add	r7, sp, #0
 80053fa:	60f8      	str	r0, [r7, #12]
 80053fc:	60b9      	str	r1, [r7, #8]
 80053fe:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005400:	2300      	movs	r3, #0
 8005402:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005404:	68fb      	ldr	r3, [r7, #12]
 8005406:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800540a:	2b01      	cmp	r3, #1
 800540c:	d101      	bne.n	8005412 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800540e:	2302      	movs	r3, #2
 8005410:	e0ff      	b.n	8005612 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8005412:	68fb      	ldr	r3, [r7, #12]
 8005414:	2201      	movs	r2, #1
 8005416:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	2b14      	cmp	r3, #20
 800541e:	f200 80f0 	bhi.w	8005602 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8005422:	a201      	add	r2, pc, #4	; (adr r2, 8005428 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005424:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005428:	0800547d 	.word	0x0800547d
 800542c:	08005603 	.word	0x08005603
 8005430:	08005603 	.word	0x08005603
 8005434:	08005603 	.word	0x08005603
 8005438:	080054bd 	.word	0x080054bd
 800543c:	08005603 	.word	0x08005603
 8005440:	08005603 	.word	0x08005603
 8005444:	08005603 	.word	0x08005603
 8005448:	080054ff 	.word	0x080054ff
 800544c:	08005603 	.word	0x08005603
 8005450:	08005603 	.word	0x08005603
 8005454:	08005603 	.word	0x08005603
 8005458:	0800553f 	.word	0x0800553f
 800545c:	08005603 	.word	0x08005603
 8005460:	08005603 	.word	0x08005603
 8005464:	08005603 	.word	0x08005603
 8005468:	08005581 	.word	0x08005581
 800546c:	08005603 	.word	0x08005603
 8005470:	08005603 	.word	0x08005603
 8005474:	08005603 	.word	0x08005603
 8005478:	080055c1 	.word	0x080055c1
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800547c:	68fb      	ldr	r3, [r7, #12]
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	68b9      	ldr	r1, [r7, #8]
 8005482:	4618      	mov	r0, r3
 8005484:	f000 fa54 	bl	8005930 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005488:	68fb      	ldr	r3, [r7, #12]
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	699a      	ldr	r2, [r3, #24]
 800548e:	68fb      	ldr	r3, [r7, #12]
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	f042 0208 	orr.w	r2, r2, #8
 8005496:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005498:	68fb      	ldr	r3, [r7, #12]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	699a      	ldr	r2, [r3, #24]
 800549e:	68fb      	ldr	r3, [r7, #12]
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	f022 0204 	bic.w	r2, r2, #4
 80054a6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80054a8:	68fb      	ldr	r3, [r7, #12]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	6999      	ldr	r1, [r3, #24]
 80054ae:	68bb      	ldr	r3, [r7, #8]
 80054b0:	691a      	ldr	r2, [r3, #16]
 80054b2:	68fb      	ldr	r3, [r7, #12]
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	430a      	orrs	r2, r1
 80054b8:	619a      	str	r2, [r3, #24]
      break;
 80054ba:	e0a5      	b.n	8005608 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80054bc:	68fb      	ldr	r3, [r7, #12]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	68b9      	ldr	r1, [r7, #8]
 80054c2:	4618      	mov	r0, r3
 80054c4:	f000 fac4 	bl	8005a50 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80054c8:	68fb      	ldr	r3, [r7, #12]
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	699a      	ldr	r2, [r3, #24]
 80054ce:	68fb      	ldr	r3, [r7, #12]
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80054d6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80054d8:	68fb      	ldr	r3, [r7, #12]
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	699a      	ldr	r2, [r3, #24]
 80054de:	68fb      	ldr	r3, [r7, #12]
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80054e6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80054e8:	68fb      	ldr	r3, [r7, #12]
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	6999      	ldr	r1, [r3, #24]
 80054ee:	68bb      	ldr	r3, [r7, #8]
 80054f0:	691b      	ldr	r3, [r3, #16]
 80054f2:	021a      	lsls	r2, r3, #8
 80054f4:	68fb      	ldr	r3, [r7, #12]
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	430a      	orrs	r2, r1
 80054fa:	619a      	str	r2, [r3, #24]
      break;
 80054fc:	e084      	b.n	8005608 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80054fe:	68fb      	ldr	r3, [r7, #12]
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	68b9      	ldr	r1, [r7, #8]
 8005504:	4618      	mov	r0, r3
 8005506:	f000 fb2d 	bl	8005b64 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800550a:	68fb      	ldr	r3, [r7, #12]
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	69da      	ldr	r2, [r3, #28]
 8005510:	68fb      	ldr	r3, [r7, #12]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	f042 0208 	orr.w	r2, r2, #8
 8005518:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800551a:	68fb      	ldr	r3, [r7, #12]
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	69da      	ldr	r2, [r3, #28]
 8005520:	68fb      	ldr	r3, [r7, #12]
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	f022 0204 	bic.w	r2, r2, #4
 8005528:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800552a:	68fb      	ldr	r3, [r7, #12]
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	69d9      	ldr	r1, [r3, #28]
 8005530:	68bb      	ldr	r3, [r7, #8]
 8005532:	691a      	ldr	r2, [r3, #16]
 8005534:	68fb      	ldr	r3, [r7, #12]
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	430a      	orrs	r2, r1
 800553a:	61da      	str	r2, [r3, #28]
      break;
 800553c:	e064      	b.n	8005608 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800553e:	68fb      	ldr	r3, [r7, #12]
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	68b9      	ldr	r1, [r7, #8]
 8005544:	4618      	mov	r0, r3
 8005546:	f000 fb95 	bl	8005c74 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800554a:	68fb      	ldr	r3, [r7, #12]
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	69da      	ldr	r2, [r3, #28]
 8005550:	68fb      	ldr	r3, [r7, #12]
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005558:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800555a:	68fb      	ldr	r3, [r7, #12]
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	69da      	ldr	r2, [r3, #28]
 8005560:	68fb      	ldr	r3, [r7, #12]
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005568:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800556a:	68fb      	ldr	r3, [r7, #12]
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	69d9      	ldr	r1, [r3, #28]
 8005570:	68bb      	ldr	r3, [r7, #8]
 8005572:	691b      	ldr	r3, [r3, #16]
 8005574:	021a      	lsls	r2, r3, #8
 8005576:	68fb      	ldr	r3, [r7, #12]
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	430a      	orrs	r2, r1
 800557c:	61da      	str	r2, [r3, #28]
      break;
 800557e:	e043      	b.n	8005608 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8005580:	68fb      	ldr	r3, [r7, #12]
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	68b9      	ldr	r1, [r7, #8]
 8005586:	4618      	mov	r0, r3
 8005588:	f000 fbfe 	bl	8005d88 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800558c:	68fb      	ldr	r3, [r7, #12]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005592:	68fb      	ldr	r3, [r7, #12]
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	f042 0208 	orr.w	r2, r2, #8
 800559a:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800559c:	68fb      	ldr	r3, [r7, #12]
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80055a2:	68fb      	ldr	r3, [r7, #12]
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	f022 0204 	bic.w	r2, r2, #4
 80055aa:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80055ac:	68fb      	ldr	r3, [r7, #12]
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	6d19      	ldr	r1, [r3, #80]	; 0x50
 80055b2:	68bb      	ldr	r3, [r7, #8]
 80055b4:	691a      	ldr	r2, [r3, #16]
 80055b6:	68fb      	ldr	r3, [r7, #12]
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	430a      	orrs	r2, r1
 80055bc:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 80055be:	e023      	b.n	8005608 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80055c0:	68fb      	ldr	r3, [r7, #12]
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	68b9      	ldr	r1, [r7, #8]
 80055c6:	4618      	mov	r0, r3
 80055c8:	f000 fc42 	bl	8005e50 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80055cc:	68fb      	ldr	r3, [r7, #12]
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80055d2:	68fb      	ldr	r3, [r7, #12]
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80055da:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80055dc:	68fb      	ldr	r3, [r7, #12]
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80055e2:	68fb      	ldr	r3, [r7, #12]
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80055ea:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80055ec:	68fb      	ldr	r3, [r7, #12]
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	6d19      	ldr	r1, [r3, #80]	; 0x50
 80055f2:	68bb      	ldr	r3, [r7, #8]
 80055f4:	691b      	ldr	r3, [r3, #16]
 80055f6:	021a      	lsls	r2, r3, #8
 80055f8:	68fb      	ldr	r3, [r7, #12]
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	430a      	orrs	r2, r1
 80055fe:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 8005600:	e002      	b.n	8005608 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8005602:	2301      	movs	r3, #1
 8005604:	75fb      	strb	r3, [r7, #23]
      break;
 8005606:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005608:	68fb      	ldr	r3, [r7, #12]
 800560a:	2200      	movs	r2, #0
 800560c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005610:	7dfb      	ldrb	r3, [r7, #23]
}
 8005612:	4618      	mov	r0, r3
 8005614:	3718      	adds	r7, #24
 8005616:	46bd      	mov	sp, r7
 8005618:	bd80      	pop	{r7, pc}
 800561a:	bf00      	nop

0800561c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800561c:	b580      	push	{r7, lr}
 800561e:	b084      	sub	sp, #16
 8005620:	af00      	add	r7, sp, #0
 8005622:	6078      	str	r0, [r7, #4]
 8005624:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005626:	2300      	movs	r3, #0
 8005628:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005630:	2b01      	cmp	r3, #1
 8005632:	d101      	bne.n	8005638 <HAL_TIM_ConfigClockSource+0x1c>
 8005634:	2302      	movs	r3, #2
 8005636:	e0de      	b.n	80057f6 <HAL_TIM_ConfigClockSource+0x1da>
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	2201      	movs	r2, #1
 800563c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	2202      	movs	r2, #2
 8005644:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	689b      	ldr	r3, [r3, #8]
 800564e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005650:	68bb      	ldr	r3, [r7, #8]
 8005652:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 8005656:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800565a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800565c:	68bb      	ldr	r3, [r7, #8]
 800565e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005662:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	68ba      	ldr	r2, [r7, #8]
 800566a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800566c:	683b      	ldr	r3, [r7, #0]
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	4a63      	ldr	r2, [pc, #396]	; (8005800 <HAL_TIM_ConfigClockSource+0x1e4>)
 8005672:	4293      	cmp	r3, r2
 8005674:	f000 80a9 	beq.w	80057ca <HAL_TIM_ConfigClockSource+0x1ae>
 8005678:	4a61      	ldr	r2, [pc, #388]	; (8005800 <HAL_TIM_ConfigClockSource+0x1e4>)
 800567a:	4293      	cmp	r3, r2
 800567c:	f200 80ae 	bhi.w	80057dc <HAL_TIM_ConfigClockSource+0x1c0>
 8005680:	4a60      	ldr	r2, [pc, #384]	; (8005804 <HAL_TIM_ConfigClockSource+0x1e8>)
 8005682:	4293      	cmp	r3, r2
 8005684:	f000 80a1 	beq.w	80057ca <HAL_TIM_ConfigClockSource+0x1ae>
 8005688:	4a5e      	ldr	r2, [pc, #376]	; (8005804 <HAL_TIM_ConfigClockSource+0x1e8>)
 800568a:	4293      	cmp	r3, r2
 800568c:	f200 80a6 	bhi.w	80057dc <HAL_TIM_ConfigClockSource+0x1c0>
 8005690:	4a5d      	ldr	r2, [pc, #372]	; (8005808 <HAL_TIM_ConfigClockSource+0x1ec>)
 8005692:	4293      	cmp	r3, r2
 8005694:	f000 8099 	beq.w	80057ca <HAL_TIM_ConfigClockSource+0x1ae>
 8005698:	4a5b      	ldr	r2, [pc, #364]	; (8005808 <HAL_TIM_ConfigClockSource+0x1ec>)
 800569a:	4293      	cmp	r3, r2
 800569c:	f200 809e 	bhi.w	80057dc <HAL_TIM_ConfigClockSource+0x1c0>
 80056a0:	4a5a      	ldr	r2, [pc, #360]	; (800580c <HAL_TIM_ConfigClockSource+0x1f0>)
 80056a2:	4293      	cmp	r3, r2
 80056a4:	f000 8091 	beq.w	80057ca <HAL_TIM_ConfigClockSource+0x1ae>
 80056a8:	4a58      	ldr	r2, [pc, #352]	; (800580c <HAL_TIM_ConfigClockSource+0x1f0>)
 80056aa:	4293      	cmp	r3, r2
 80056ac:	f200 8096 	bhi.w	80057dc <HAL_TIM_ConfigClockSource+0x1c0>
 80056b0:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 80056b4:	f000 8089 	beq.w	80057ca <HAL_TIM_ConfigClockSource+0x1ae>
 80056b8:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 80056bc:	f200 808e 	bhi.w	80057dc <HAL_TIM_ConfigClockSource+0x1c0>
 80056c0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80056c4:	d03e      	beq.n	8005744 <HAL_TIM_ConfigClockSource+0x128>
 80056c6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80056ca:	f200 8087 	bhi.w	80057dc <HAL_TIM_ConfigClockSource+0x1c0>
 80056ce:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80056d2:	f000 8086 	beq.w	80057e2 <HAL_TIM_ConfigClockSource+0x1c6>
 80056d6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80056da:	d87f      	bhi.n	80057dc <HAL_TIM_ConfigClockSource+0x1c0>
 80056dc:	2b70      	cmp	r3, #112	; 0x70
 80056de:	d01a      	beq.n	8005716 <HAL_TIM_ConfigClockSource+0xfa>
 80056e0:	2b70      	cmp	r3, #112	; 0x70
 80056e2:	d87b      	bhi.n	80057dc <HAL_TIM_ConfigClockSource+0x1c0>
 80056e4:	2b60      	cmp	r3, #96	; 0x60
 80056e6:	d050      	beq.n	800578a <HAL_TIM_ConfigClockSource+0x16e>
 80056e8:	2b60      	cmp	r3, #96	; 0x60
 80056ea:	d877      	bhi.n	80057dc <HAL_TIM_ConfigClockSource+0x1c0>
 80056ec:	2b50      	cmp	r3, #80	; 0x50
 80056ee:	d03c      	beq.n	800576a <HAL_TIM_ConfigClockSource+0x14e>
 80056f0:	2b50      	cmp	r3, #80	; 0x50
 80056f2:	d873      	bhi.n	80057dc <HAL_TIM_ConfigClockSource+0x1c0>
 80056f4:	2b40      	cmp	r3, #64	; 0x40
 80056f6:	d058      	beq.n	80057aa <HAL_TIM_ConfigClockSource+0x18e>
 80056f8:	2b40      	cmp	r3, #64	; 0x40
 80056fa:	d86f      	bhi.n	80057dc <HAL_TIM_ConfigClockSource+0x1c0>
 80056fc:	2b30      	cmp	r3, #48	; 0x30
 80056fe:	d064      	beq.n	80057ca <HAL_TIM_ConfigClockSource+0x1ae>
 8005700:	2b30      	cmp	r3, #48	; 0x30
 8005702:	d86b      	bhi.n	80057dc <HAL_TIM_ConfigClockSource+0x1c0>
 8005704:	2b20      	cmp	r3, #32
 8005706:	d060      	beq.n	80057ca <HAL_TIM_ConfigClockSource+0x1ae>
 8005708:	2b20      	cmp	r3, #32
 800570a:	d867      	bhi.n	80057dc <HAL_TIM_ConfigClockSource+0x1c0>
 800570c:	2b00      	cmp	r3, #0
 800570e:	d05c      	beq.n	80057ca <HAL_TIM_ConfigClockSource+0x1ae>
 8005710:	2b10      	cmp	r3, #16
 8005712:	d05a      	beq.n	80057ca <HAL_TIM_ConfigClockSource+0x1ae>
 8005714:	e062      	b.n	80057dc <HAL_TIM_ConfigClockSource+0x1c0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	6818      	ldr	r0, [r3, #0]
 800571a:	683b      	ldr	r3, [r7, #0]
 800571c:	6899      	ldr	r1, [r3, #8]
 800571e:	683b      	ldr	r3, [r7, #0]
 8005720:	685a      	ldr	r2, [r3, #4]
 8005722:	683b      	ldr	r3, [r7, #0]
 8005724:	68db      	ldr	r3, [r3, #12]
 8005726:	f000 fc75 	bl	8006014 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	689b      	ldr	r3, [r3, #8]
 8005730:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005732:	68bb      	ldr	r3, [r7, #8]
 8005734:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005738:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	68ba      	ldr	r2, [r7, #8]
 8005740:	609a      	str	r2, [r3, #8]
      break;
 8005742:	e04f      	b.n	80057e4 <HAL_TIM_ConfigClockSource+0x1c8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	6818      	ldr	r0, [r3, #0]
 8005748:	683b      	ldr	r3, [r7, #0]
 800574a:	6899      	ldr	r1, [r3, #8]
 800574c:	683b      	ldr	r3, [r7, #0]
 800574e:	685a      	ldr	r2, [r3, #4]
 8005750:	683b      	ldr	r3, [r7, #0]
 8005752:	68db      	ldr	r3, [r3, #12]
 8005754:	f000 fc5e 	bl	8006014 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	689a      	ldr	r2, [r3, #8]
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005766:	609a      	str	r2, [r3, #8]
      break;
 8005768:	e03c      	b.n	80057e4 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	6818      	ldr	r0, [r3, #0]
 800576e:	683b      	ldr	r3, [r7, #0]
 8005770:	6859      	ldr	r1, [r3, #4]
 8005772:	683b      	ldr	r3, [r7, #0]
 8005774:	68db      	ldr	r3, [r3, #12]
 8005776:	461a      	mov	r2, r3
 8005778:	f000 fbd0 	bl	8005f1c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	2150      	movs	r1, #80	; 0x50
 8005782:	4618      	mov	r0, r3
 8005784:	f000 fc29 	bl	8005fda <TIM_ITRx_SetConfig>
      break;
 8005788:	e02c      	b.n	80057e4 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	6818      	ldr	r0, [r3, #0]
 800578e:	683b      	ldr	r3, [r7, #0]
 8005790:	6859      	ldr	r1, [r3, #4]
 8005792:	683b      	ldr	r3, [r7, #0]
 8005794:	68db      	ldr	r3, [r3, #12]
 8005796:	461a      	mov	r2, r3
 8005798:	f000 fbef 	bl	8005f7a <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	2160      	movs	r1, #96	; 0x60
 80057a2:	4618      	mov	r0, r3
 80057a4:	f000 fc19 	bl	8005fda <TIM_ITRx_SetConfig>
      break;
 80057a8:	e01c      	b.n	80057e4 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	6818      	ldr	r0, [r3, #0]
 80057ae:	683b      	ldr	r3, [r7, #0]
 80057b0:	6859      	ldr	r1, [r3, #4]
 80057b2:	683b      	ldr	r3, [r7, #0]
 80057b4:	68db      	ldr	r3, [r3, #12]
 80057b6:	461a      	mov	r2, r3
 80057b8:	f000 fbb0 	bl	8005f1c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	2140      	movs	r1, #64	; 0x40
 80057c2:	4618      	mov	r0, r3
 80057c4:	f000 fc09 	bl	8005fda <TIM_ITRx_SetConfig>
      break;
 80057c8:	e00c      	b.n	80057e4 <HAL_TIM_ConfigClockSource+0x1c8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	681a      	ldr	r2, [r3, #0]
 80057ce:	683b      	ldr	r3, [r7, #0]
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	4619      	mov	r1, r3
 80057d4:	4610      	mov	r0, r2
 80057d6:	f000 fc00 	bl	8005fda <TIM_ITRx_SetConfig>
      break;
 80057da:	e003      	b.n	80057e4 <HAL_TIM_ConfigClockSource+0x1c8>
    }

    default:
      status = HAL_ERROR;
 80057dc:	2301      	movs	r3, #1
 80057de:	73fb      	strb	r3, [r7, #15]
      break;
 80057e0:	e000      	b.n	80057e4 <HAL_TIM_ConfigClockSource+0x1c8>
      break;
 80057e2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	2201      	movs	r2, #1
 80057e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	2200      	movs	r2, #0
 80057f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80057f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80057f6:	4618      	mov	r0, r3
 80057f8:	3710      	adds	r7, #16
 80057fa:	46bd      	mov	sp, r7
 80057fc:	bd80      	pop	{r7, pc}
 80057fe:	bf00      	nop
 8005800:	00100070 	.word	0x00100070
 8005804:	00100040 	.word	0x00100040
 8005808:	00100030 	.word	0x00100030
 800580c:	00100020 	.word	0x00100020

08005810 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005810:	b480      	push	{r7}
 8005812:	b085      	sub	sp, #20
 8005814:	af00      	add	r7, sp, #0
 8005816:	6078      	str	r0, [r7, #4]
 8005818:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	4a3c      	ldr	r2, [pc, #240]	; (8005914 <TIM_Base_SetConfig+0x104>)
 8005824:	4293      	cmp	r3, r2
 8005826:	d00f      	beq.n	8005848 <TIM_Base_SetConfig+0x38>
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800582e:	d00b      	beq.n	8005848 <TIM_Base_SetConfig+0x38>
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	4a39      	ldr	r2, [pc, #228]	; (8005918 <TIM_Base_SetConfig+0x108>)
 8005834:	4293      	cmp	r3, r2
 8005836:	d007      	beq.n	8005848 <TIM_Base_SetConfig+0x38>
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	4a38      	ldr	r2, [pc, #224]	; (800591c <TIM_Base_SetConfig+0x10c>)
 800583c:	4293      	cmp	r3, r2
 800583e:	d003      	beq.n	8005848 <TIM_Base_SetConfig+0x38>
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	4a37      	ldr	r2, [pc, #220]	; (8005920 <TIM_Base_SetConfig+0x110>)
 8005844:	4293      	cmp	r3, r2
 8005846:	d108      	bne.n	800585a <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005848:	68fb      	ldr	r3, [r7, #12]
 800584a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800584e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005850:	683b      	ldr	r3, [r7, #0]
 8005852:	685b      	ldr	r3, [r3, #4]
 8005854:	68fa      	ldr	r2, [r7, #12]
 8005856:	4313      	orrs	r3, r2
 8005858:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	4a2d      	ldr	r2, [pc, #180]	; (8005914 <TIM_Base_SetConfig+0x104>)
 800585e:	4293      	cmp	r3, r2
 8005860:	d01b      	beq.n	800589a <TIM_Base_SetConfig+0x8a>
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005868:	d017      	beq.n	800589a <TIM_Base_SetConfig+0x8a>
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	4a2a      	ldr	r2, [pc, #168]	; (8005918 <TIM_Base_SetConfig+0x108>)
 800586e:	4293      	cmp	r3, r2
 8005870:	d013      	beq.n	800589a <TIM_Base_SetConfig+0x8a>
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	4a29      	ldr	r2, [pc, #164]	; (800591c <TIM_Base_SetConfig+0x10c>)
 8005876:	4293      	cmp	r3, r2
 8005878:	d00f      	beq.n	800589a <TIM_Base_SetConfig+0x8a>
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	4a28      	ldr	r2, [pc, #160]	; (8005920 <TIM_Base_SetConfig+0x110>)
 800587e:	4293      	cmp	r3, r2
 8005880:	d00b      	beq.n	800589a <TIM_Base_SetConfig+0x8a>
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	4a27      	ldr	r2, [pc, #156]	; (8005924 <TIM_Base_SetConfig+0x114>)
 8005886:	4293      	cmp	r3, r2
 8005888:	d007      	beq.n	800589a <TIM_Base_SetConfig+0x8a>
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	4a26      	ldr	r2, [pc, #152]	; (8005928 <TIM_Base_SetConfig+0x118>)
 800588e:	4293      	cmp	r3, r2
 8005890:	d003      	beq.n	800589a <TIM_Base_SetConfig+0x8a>
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	4a25      	ldr	r2, [pc, #148]	; (800592c <TIM_Base_SetConfig+0x11c>)
 8005896:	4293      	cmp	r3, r2
 8005898:	d108      	bne.n	80058ac <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800589a:	68fb      	ldr	r3, [r7, #12]
 800589c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80058a0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80058a2:	683b      	ldr	r3, [r7, #0]
 80058a4:	68db      	ldr	r3, [r3, #12]
 80058a6:	68fa      	ldr	r2, [r7, #12]
 80058a8:	4313      	orrs	r3, r2
 80058aa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80058ac:	68fb      	ldr	r3, [r7, #12]
 80058ae:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80058b2:	683b      	ldr	r3, [r7, #0]
 80058b4:	695b      	ldr	r3, [r3, #20]
 80058b6:	4313      	orrs	r3, r2
 80058b8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	68fa      	ldr	r2, [r7, #12]
 80058be:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80058c0:	683b      	ldr	r3, [r7, #0]
 80058c2:	689a      	ldr	r2, [r3, #8]
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80058c8:	683b      	ldr	r3, [r7, #0]
 80058ca:	681a      	ldr	r2, [r3, #0]
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	4a10      	ldr	r2, [pc, #64]	; (8005914 <TIM_Base_SetConfig+0x104>)
 80058d4:	4293      	cmp	r3, r2
 80058d6:	d00f      	beq.n	80058f8 <TIM_Base_SetConfig+0xe8>
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	4a11      	ldr	r2, [pc, #68]	; (8005920 <TIM_Base_SetConfig+0x110>)
 80058dc:	4293      	cmp	r3, r2
 80058de:	d00b      	beq.n	80058f8 <TIM_Base_SetConfig+0xe8>
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	4a10      	ldr	r2, [pc, #64]	; (8005924 <TIM_Base_SetConfig+0x114>)
 80058e4:	4293      	cmp	r3, r2
 80058e6:	d007      	beq.n	80058f8 <TIM_Base_SetConfig+0xe8>
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	4a0f      	ldr	r2, [pc, #60]	; (8005928 <TIM_Base_SetConfig+0x118>)
 80058ec:	4293      	cmp	r3, r2
 80058ee:	d003      	beq.n	80058f8 <TIM_Base_SetConfig+0xe8>
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	4a0e      	ldr	r2, [pc, #56]	; (800592c <TIM_Base_SetConfig+0x11c>)
 80058f4:	4293      	cmp	r3, r2
 80058f6:	d103      	bne.n	8005900 <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80058f8:	683b      	ldr	r3, [r7, #0]
 80058fa:	691a      	ldr	r2, [r3, #16]
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	2201      	movs	r2, #1
 8005904:	615a      	str	r2, [r3, #20]
}
 8005906:	bf00      	nop
 8005908:	3714      	adds	r7, #20
 800590a:	46bd      	mov	sp, r7
 800590c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005910:	4770      	bx	lr
 8005912:	bf00      	nop
 8005914:	40012c00 	.word	0x40012c00
 8005918:	40000400 	.word	0x40000400
 800591c:	40000800 	.word	0x40000800
 8005920:	40013400 	.word	0x40013400
 8005924:	40014000 	.word	0x40014000
 8005928:	40014400 	.word	0x40014400
 800592c:	40014800 	.word	0x40014800

08005930 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005930:	b480      	push	{r7}
 8005932:	b087      	sub	sp, #28
 8005934:	af00      	add	r7, sp, #0
 8005936:	6078      	str	r0, [r7, #4]
 8005938:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	6a1b      	ldr	r3, [r3, #32]
 800593e:	f023 0201 	bic.w	r2, r3, #1
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	6a1b      	ldr	r3, [r3, #32]
 800594a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	685b      	ldr	r3, [r3, #4]
 8005950:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	699b      	ldr	r3, [r3, #24]
 8005956:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005958:	68fb      	ldr	r3, [r7, #12]
 800595a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800595e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005962:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005964:	68fb      	ldr	r3, [r7, #12]
 8005966:	f023 0303 	bic.w	r3, r3, #3
 800596a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800596c:	683b      	ldr	r3, [r7, #0]
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	68fa      	ldr	r2, [r7, #12]
 8005972:	4313      	orrs	r3, r2
 8005974:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005976:	697b      	ldr	r3, [r7, #20]
 8005978:	f023 0302 	bic.w	r3, r3, #2
 800597c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800597e:	683b      	ldr	r3, [r7, #0]
 8005980:	689b      	ldr	r3, [r3, #8]
 8005982:	697a      	ldr	r2, [r7, #20]
 8005984:	4313      	orrs	r3, r2
 8005986:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	4a2c      	ldr	r2, [pc, #176]	; (8005a3c <TIM_OC1_SetConfig+0x10c>)
 800598c:	4293      	cmp	r3, r2
 800598e:	d00f      	beq.n	80059b0 <TIM_OC1_SetConfig+0x80>
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	4a2b      	ldr	r2, [pc, #172]	; (8005a40 <TIM_OC1_SetConfig+0x110>)
 8005994:	4293      	cmp	r3, r2
 8005996:	d00b      	beq.n	80059b0 <TIM_OC1_SetConfig+0x80>
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	4a2a      	ldr	r2, [pc, #168]	; (8005a44 <TIM_OC1_SetConfig+0x114>)
 800599c:	4293      	cmp	r3, r2
 800599e:	d007      	beq.n	80059b0 <TIM_OC1_SetConfig+0x80>
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	4a29      	ldr	r2, [pc, #164]	; (8005a48 <TIM_OC1_SetConfig+0x118>)
 80059a4:	4293      	cmp	r3, r2
 80059a6:	d003      	beq.n	80059b0 <TIM_OC1_SetConfig+0x80>
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	4a28      	ldr	r2, [pc, #160]	; (8005a4c <TIM_OC1_SetConfig+0x11c>)
 80059ac:	4293      	cmp	r3, r2
 80059ae:	d10c      	bne.n	80059ca <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80059b0:	697b      	ldr	r3, [r7, #20]
 80059b2:	f023 0308 	bic.w	r3, r3, #8
 80059b6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80059b8:	683b      	ldr	r3, [r7, #0]
 80059ba:	68db      	ldr	r3, [r3, #12]
 80059bc:	697a      	ldr	r2, [r7, #20]
 80059be:	4313      	orrs	r3, r2
 80059c0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80059c2:	697b      	ldr	r3, [r7, #20]
 80059c4:	f023 0304 	bic.w	r3, r3, #4
 80059c8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	4a1b      	ldr	r2, [pc, #108]	; (8005a3c <TIM_OC1_SetConfig+0x10c>)
 80059ce:	4293      	cmp	r3, r2
 80059d0:	d00f      	beq.n	80059f2 <TIM_OC1_SetConfig+0xc2>
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	4a1a      	ldr	r2, [pc, #104]	; (8005a40 <TIM_OC1_SetConfig+0x110>)
 80059d6:	4293      	cmp	r3, r2
 80059d8:	d00b      	beq.n	80059f2 <TIM_OC1_SetConfig+0xc2>
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	4a19      	ldr	r2, [pc, #100]	; (8005a44 <TIM_OC1_SetConfig+0x114>)
 80059de:	4293      	cmp	r3, r2
 80059e0:	d007      	beq.n	80059f2 <TIM_OC1_SetConfig+0xc2>
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	4a18      	ldr	r2, [pc, #96]	; (8005a48 <TIM_OC1_SetConfig+0x118>)
 80059e6:	4293      	cmp	r3, r2
 80059e8:	d003      	beq.n	80059f2 <TIM_OC1_SetConfig+0xc2>
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	4a17      	ldr	r2, [pc, #92]	; (8005a4c <TIM_OC1_SetConfig+0x11c>)
 80059ee:	4293      	cmp	r3, r2
 80059f0:	d111      	bne.n	8005a16 <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80059f2:	693b      	ldr	r3, [r7, #16]
 80059f4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80059f8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80059fa:	693b      	ldr	r3, [r7, #16]
 80059fc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005a00:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005a02:	683b      	ldr	r3, [r7, #0]
 8005a04:	695b      	ldr	r3, [r3, #20]
 8005a06:	693a      	ldr	r2, [r7, #16]
 8005a08:	4313      	orrs	r3, r2
 8005a0a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005a0c:	683b      	ldr	r3, [r7, #0]
 8005a0e:	699b      	ldr	r3, [r3, #24]
 8005a10:	693a      	ldr	r2, [r7, #16]
 8005a12:	4313      	orrs	r3, r2
 8005a14:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	693a      	ldr	r2, [r7, #16]
 8005a1a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	68fa      	ldr	r2, [r7, #12]
 8005a20:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005a22:	683b      	ldr	r3, [r7, #0]
 8005a24:	685a      	ldr	r2, [r3, #4]
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	697a      	ldr	r2, [r7, #20]
 8005a2e:	621a      	str	r2, [r3, #32]
}
 8005a30:	bf00      	nop
 8005a32:	371c      	adds	r7, #28
 8005a34:	46bd      	mov	sp, r7
 8005a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a3a:	4770      	bx	lr
 8005a3c:	40012c00 	.word	0x40012c00
 8005a40:	40013400 	.word	0x40013400
 8005a44:	40014000 	.word	0x40014000
 8005a48:	40014400 	.word	0x40014400
 8005a4c:	40014800 	.word	0x40014800

08005a50 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005a50:	b480      	push	{r7}
 8005a52:	b087      	sub	sp, #28
 8005a54:	af00      	add	r7, sp, #0
 8005a56:	6078      	str	r0, [r7, #4]
 8005a58:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	6a1b      	ldr	r3, [r3, #32]
 8005a5e:	f023 0210 	bic.w	r2, r3, #16
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	6a1b      	ldr	r3, [r3, #32]
 8005a6a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	685b      	ldr	r3, [r3, #4]
 8005a70:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	699b      	ldr	r3, [r3, #24]
 8005a76:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005a78:	68fb      	ldr	r3, [r7, #12]
 8005a7a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005a7e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005a82:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005a84:	68fb      	ldr	r3, [r7, #12]
 8005a86:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005a8a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005a8c:	683b      	ldr	r3, [r7, #0]
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	021b      	lsls	r3, r3, #8
 8005a92:	68fa      	ldr	r2, [r7, #12]
 8005a94:	4313      	orrs	r3, r2
 8005a96:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005a98:	697b      	ldr	r3, [r7, #20]
 8005a9a:	f023 0320 	bic.w	r3, r3, #32
 8005a9e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005aa0:	683b      	ldr	r3, [r7, #0]
 8005aa2:	689b      	ldr	r3, [r3, #8]
 8005aa4:	011b      	lsls	r3, r3, #4
 8005aa6:	697a      	ldr	r2, [r7, #20]
 8005aa8:	4313      	orrs	r3, r2
 8005aaa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	4a28      	ldr	r2, [pc, #160]	; (8005b50 <TIM_OC2_SetConfig+0x100>)
 8005ab0:	4293      	cmp	r3, r2
 8005ab2:	d003      	beq.n	8005abc <TIM_OC2_SetConfig+0x6c>
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	4a27      	ldr	r2, [pc, #156]	; (8005b54 <TIM_OC2_SetConfig+0x104>)
 8005ab8:	4293      	cmp	r3, r2
 8005aba:	d10d      	bne.n	8005ad8 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005abc:	697b      	ldr	r3, [r7, #20]
 8005abe:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005ac2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005ac4:	683b      	ldr	r3, [r7, #0]
 8005ac6:	68db      	ldr	r3, [r3, #12]
 8005ac8:	011b      	lsls	r3, r3, #4
 8005aca:	697a      	ldr	r2, [r7, #20]
 8005acc:	4313      	orrs	r3, r2
 8005ace:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005ad0:	697b      	ldr	r3, [r7, #20]
 8005ad2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005ad6:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	4a1d      	ldr	r2, [pc, #116]	; (8005b50 <TIM_OC2_SetConfig+0x100>)
 8005adc:	4293      	cmp	r3, r2
 8005ade:	d00f      	beq.n	8005b00 <TIM_OC2_SetConfig+0xb0>
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	4a1c      	ldr	r2, [pc, #112]	; (8005b54 <TIM_OC2_SetConfig+0x104>)
 8005ae4:	4293      	cmp	r3, r2
 8005ae6:	d00b      	beq.n	8005b00 <TIM_OC2_SetConfig+0xb0>
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	4a1b      	ldr	r2, [pc, #108]	; (8005b58 <TIM_OC2_SetConfig+0x108>)
 8005aec:	4293      	cmp	r3, r2
 8005aee:	d007      	beq.n	8005b00 <TIM_OC2_SetConfig+0xb0>
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	4a1a      	ldr	r2, [pc, #104]	; (8005b5c <TIM_OC2_SetConfig+0x10c>)
 8005af4:	4293      	cmp	r3, r2
 8005af6:	d003      	beq.n	8005b00 <TIM_OC2_SetConfig+0xb0>
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	4a19      	ldr	r2, [pc, #100]	; (8005b60 <TIM_OC2_SetConfig+0x110>)
 8005afc:	4293      	cmp	r3, r2
 8005afe:	d113      	bne.n	8005b28 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005b00:	693b      	ldr	r3, [r7, #16]
 8005b02:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005b06:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005b08:	693b      	ldr	r3, [r7, #16]
 8005b0a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005b0e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005b10:	683b      	ldr	r3, [r7, #0]
 8005b12:	695b      	ldr	r3, [r3, #20]
 8005b14:	009b      	lsls	r3, r3, #2
 8005b16:	693a      	ldr	r2, [r7, #16]
 8005b18:	4313      	orrs	r3, r2
 8005b1a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005b1c:	683b      	ldr	r3, [r7, #0]
 8005b1e:	699b      	ldr	r3, [r3, #24]
 8005b20:	009b      	lsls	r3, r3, #2
 8005b22:	693a      	ldr	r2, [r7, #16]
 8005b24:	4313      	orrs	r3, r2
 8005b26:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	693a      	ldr	r2, [r7, #16]
 8005b2c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	68fa      	ldr	r2, [r7, #12]
 8005b32:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005b34:	683b      	ldr	r3, [r7, #0]
 8005b36:	685a      	ldr	r2, [r3, #4]
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	697a      	ldr	r2, [r7, #20]
 8005b40:	621a      	str	r2, [r3, #32]
}
 8005b42:	bf00      	nop
 8005b44:	371c      	adds	r7, #28
 8005b46:	46bd      	mov	sp, r7
 8005b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b4c:	4770      	bx	lr
 8005b4e:	bf00      	nop
 8005b50:	40012c00 	.word	0x40012c00
 8005b54:	40013400 	.word	0x40013400
 8005b58:	40014000 	.word	0x40014000
 8005b5c:	40014400 	.word	0x40014400
 8005b60:	40014800 	.word	0x40014800

08005b64 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005b64:	b480      	push	{r7}
 8005b66:	b087      	sub	sp, #28
 8005b68:	af00      	add	r7, sp, #0
 8005b6a:	6078      	str	r0, [r7, #4]
 8005b6c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	6a1b      	ldr	r3, [r3, #32]
 8005b72:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	6a1b      	ldr	r3, [r3, #32]
 8005b7e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	685b      	ldr	r3, [r3, #4]
 8005b84:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	69db      	ldr	r3, [r3, #28]
 8005b8a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005b8c:	68fb      	ldr	r3, [r7, #12]
 8005b8e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005b92:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005b96:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005b98:	68fb      	ldr	r3, [r7, #12]
 8005b9a:	f023 0303 	bic.w	r3, r3, #3
 8005b9e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005ba0:	683b      	ldr	r3, [r7, #0]
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	68fa      	ldr	r2, [r7, #12]
 8005ba6:	4313      	orrs	r3, r2
 8005ba8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005baa:	697b      	ldr	r3, [r7, #20]
 8005bac:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005bb0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005bb2:	683b      	ldr	r3, [r7, #0]
 8005bb4:	689b      	ldr	r3, [r3, #8]
 8005bb6:	021b      	lsls	r3, r3, #8
 8005bb8:	697a      	ldr	r2, [r7, #20]
 8005bba:	4313      	orrs	r3, r2
 8005bbc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	4a27      	ldr	r2, [pc, #156]	; (8005c60 <TIM_OC3_SetConfig+0xfc>)
 8005bc2:	4293      	cmp	r3, r2
 8005bc4:	d003      	beq.n	8005bce <TIM_OC3_SetConfig+0x6a>
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	4a26      	ldr	r2, [pc, #152]	; (8005c64 <TIM_OC3_SetConfig+0x100>)
 8005bca:	4293      	cmp	r3, r2
 8005bcc:	d10d      	bne.n	8005bea <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005bce:	697b      	ldr	r3, [r7, #20]
 8005bd0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005bd4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005bd6:	683b      	ldr	r3, [r7, #0]
 8005bd8:	68db      	ldr	r3, [r3, #12]
 8005bda:	021b      	lsls	r3, r3, #8
 8005bdc:	697a      	ldr	r2, [r7, #20]
 8005bde:	4313      	orrs	r3, r2
 8005be0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005be2:	697b      	ldr	r3, [r7, #20]
 8005be4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005be8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	4a1c      	ldr	r2, [pc, #112]	; (8005c60 <TIM_OC3_SetConfig+0xfc>)
 8005bee:	4293      	cmp	r3, r2
 8005bf0:	d00f      	beq.n	8005c12 <TIM_OC3_SetConfig+0xae>
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	4a1b      	ldr	r2, [pc, #108]	; (8005c64 <TIM_OC3_SetConfig+0x100>)
 8005bf6:	4293      	cmp	r3, r2
 8005bf8:	d00b      	beq.n	8005c12 <TIM_OC3_SetConfig+0xae>
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	4a1a      	ldr	r2, [pc, #104]	; (8005c68 <TIM_OC3_SetConfig+0x104>)
 8005bfe:	4293      	cmp	r3, r2
 8005c00:	d007      	beq.n	8005c12 <TIM_OC3_SetConfig+0xae>
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	4a19      	ldr	r2, [pc, #100]	; (8005c6c <TIM_OC3_SetConfig+0x108>)
 8005c06:	4293      	cmp	r3, r2
 8005c08:	d003      	beq.n	8005c12 <TIM_OC3_SetConfig+0xae>
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	4a18      	ldr	r2, [pc, #96]	; (8005c70 <TIM_OC3_SetConfig+0x10c>)
 8005c0e:	4293      	cmp	r3, r2
 8005c10:	d113      	bne.n	8005c3a <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005c12:	693b      	ldr	r3, [r7, #16]
 8005c14:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005c18:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005c1a:	693b      	ldr	r3, [r7, #16]
 8005c1c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005c20:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005c22:	683b      	ldr	r3, [r7, #0]
 8005c24:	695b      	ldr	r3, [r3, #20]
 8005c26:	011b      	lsls	r3, r3, #4
 8005c28:	693a      	ldr	r2, [r7, #16]
 8005c2a:	4313      	orrs	r3, r2
 8005c2c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005c2e:	683b      	ldr	r3, [r7, #0]
 8005c30:	699b      	ldr	r3, [r3, #24]
 8005c32:	011b      	lsls	r3, r3, #4
 8005c34:	693a      	ldr	r2, [r7, #16]
 8005c36:	4313      	orrs	r3, r2
 8005c38:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	693a      	ldr	r2, [r7, #16]
 8005c3e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	68fa      	ldr	r2, [r7, #12]
 8005c44:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005c46:	683b      	ldr	r3, [r7, #0]
 8005c48:	685a      	ldr	r2, [r3, #4]
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	697a      	ldr	r2, [r7, #20]
 8005c52:	621a      	str	r2, [r3, #32]
}
 8005c54:	bf00      	nop
 8005c56:	371c      	adds	r7, #28
 8005c58:	46bd      	mov	sp, r7
 8005c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c5e:	4770      	bx	lr
 8005c60:	40012c00 	.word	0x40012c00
 8005c64:	40013400 	.word	0x40013400
 8005c68:	40014000 	.word	0x40014000
 8005c6c:	40014400 	.word	0x40014400
 8005c70:	40014800 	.word	0x40014800

08005c74 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005c74:	b480      	push	{r7}
 8005c76:	b087      	sub	sp, #28
 8005c78:	af00      	add	r7, sp, #0
 8005c7a:	6078      	str	r0, [r7, #4]
 8005c7c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	6a1b      	ldr	r3, [r3, #32]
 8005c82:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	6a1b      	ldr	r3, [r3, #32]
 8005c8e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	685b      	ldr	r3, [r3, #4]
 8005c94:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	69db      	ldr	r3, [r3, #28]
 8005c9a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005c9c:	68fb      	ldr	r3, [r7, #12]
 8005c9e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005ca2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005ca6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005ca8:	68fb      	ldr	r3, [r7, #12]
 8005caa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005cae:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005cb0:	683b      	ldr	r3, [r7, #0]
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	021b      	lsls	r3, r3, #8
 8005cb6:	68fa      	ldr	r2, [r7, #12]
 8005cb8:	4313      	orrs	r3, r2
 8005cba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005cbc:	697b      	ldr	r3, [r7, #20]
 8005cbe:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005cc2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005cc4:	683b      	ldr	r3, [r7, #0]
 8005cc6:	689b      	ldr	r3, [r3, #8]
 8005cc8:	031b      	lsls	r3, r3, #12
 8005cca:	697a      	ldr	r2, [r7, #20]
 8005ccc:	4313      	orrs	r3, r2
 8005cce:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	4a28      	ldr	r2, [pc, #160]	; (8005d74 <TIM_OC4_SetConfig+0x100>)
 8005cd4:	4293      	cmp	r3, r2
 8005cd6:	d003      	beq.n	8005ce0 <TIM_OC4_SetConfig+0x6c>
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	4a27      	ldr	r2, [pc, #156]	; (8005d78 <TIM_OC4_SetConfig+0x104>)
 8005cdc:	4293      	cmp	r3, r2
 8005cde:	d10d      	bne.n	8005cfc <TIM_OC4_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 8005ce0:	697b      	ldr	r3, [r7, #20]
 8005ce2:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005ce6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8005ce8:	683b      	ldr	r3, [r7, #0]
 8005cea:	68db      	ldr	r3, [r3, #12]
 8005cec:	031b      	lsls	r3, r3, #12
 8005cee:	697a      	ldr	r2, [r7, #20]
 8005cf0:	4313      	orrs	r3, r2
 8005cf2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 8005cf4:	697b      	ldr	r3, [r7, #20]
 8005cf6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005cfa:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	4a1d      	ldr	r2, [pc, #116]	; (8005d74 <TIM_OC4_SetConfig+0x100>)
 8005d00:	4293      	cmp	r3, r2
 8005d02:	d00f      	beq.n	8005d24 <TIM_OC4_SetConfig+0xb0>
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	4a1c      	ldr	r2, [pc, #112]	; (8005d78 <TIM_OC4_SetConfig+0x104>)
 8005d08:	4293      	cmp	r3, r2
 8005d0a:	d00b      	beq.n	8005d24 <TIM_OC4_SetConfig+0xb0>
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	4a1b      	ldr	r2, [pc, #108]	; (8005d7c <TIM_OC4_SetConfig+0x108>)
 8005d10:	4293      	cmp	r3, r2
 8005d12:	d007      	beq.n	8005d24 <TIM_OC4_SetConfig+0xb0>
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	4a1a      	ldr	r2, [pc, #104]	; (8005d80 <TIM_OC4_SetConfig+0x10c>)
 8005d18:	4293      	cmp	r3, r2
 8005d1a:	d003      	beq.n	8005d24 <TIM_OC4_SetConfig+0xb0>
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	4a19      	ldr	r2, [pc, #100]	; (8005d84 <TIM_OC4_SetConfig+0x110>)
 8005d20:	4293      	cmp	r3, r2
 8005d22:	d113      	bne.n	8005d4c <TIM_OC4_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005d24:	693b      	ldr	r3, [r7, #16]
 8005d26:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005d2a:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8005d2c:	693b      	ldr	r3, [r7, #16]
 8005d2e:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005d32:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005d34:	683b      	ldr	r3, [r7, #0]
 8005d36:	695b      	ldr	r3, [r3, #20]
 8005d38:	019b      	lsls	r3, r3, #6
 8005d3a:	693a      	ldr	r2, [r7, #16]
 8005d3c:	4313      	orrs	r3, r2
 8005d3e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8005d40:	683b      	ldr	r3, [r7, #0]
 8005d42:	699b      	ldr	r3, [r3, #24]
 8005d44:	019b      	lsls	r3, r3, #6
 8005d46:	693a      	ldr	r2, [r7, #16]
 8005d48:	4313      	orrs	r3, r2
 8005d4a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	693a      	ldr	r2, [r7, #16]
 8005d50:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	68fa      	ldr	r2, [r7, #12]
 8005d56:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005d58:	683b      	ldr	r3, [r7, #0]
 8005d5a:	685a      	ldr	r2, [r3, #4]
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	697a      	ldr	r2, [r7, #20]
 8005d64:	621a      	str	r2, [r3, #32]
}
 8005d66:	bf00      	nop
 8005d68:	371c      	adds	r7, #28
 8005d6a:	46bd      	mov	sp, r7
 8005d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d70:	4770      	bx	lr
 8005d72:	bf00      	nop
 8005d74:	40012c00 	.word	0x40012c00
 8005d78:	40013400 	.word	0x40013400
 8005d7c:	40014000 	.word	0x40014000
 8005d80:	40014400 	.word	0x40014400
 8005d84:	40014800 	.word	0x40014800

08005d88 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8005d88:	b480      	push	{r7}
 8005d8a:	b087      	sub	sp, #28
 8005d8c:	af00      	add	r7, sp, #0
 8005d8e:	6078      	str	r0, [r7, #4]
 8005d90:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	6a1b      	ldr	r3, [r3, #32]
 8005d96:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	6a1b      	ldr	r3, [r3, #32]
 8005da2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	685b      	ldr	r3, [r3, #4]
 8005da8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005dae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8005db0:	68fb      	ldr	r3, [r7, #12]
 8005db2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005db6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005dba:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005dbc:	683b      	ldr	r3, [r7, #0]
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	68fa      	ldr	r2, [r7, #12]
 8005dc2:	4313      	orrs	r3, r2
 8005dc4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8005dc6:	693b      	ldr	r3, [r7, #16]
 8005dc8:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8005dcc:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8005dce:	683b      	ldr	r3, [r7, #0]
 8005dd0:	689b      	ldr	r3, [r3, #8]
 8005dd2:	041b      	lsls	r3, r3, #16
 8005dd4:	693a      	ldr	r2, [r7, #16]
 8005dd6:	4313      	orrs	r3, r2
 8005dd8:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	4a17      	ldr	r2, [pc, #92]	; (8005e3c <TIM_OC5_SetConfig+0xb4>)
 8005dde:	4293      	cmp	r3, r2
 8005de0:	d00f      	beq.n	8005e02 <TIM_OC5_SetConfig+0x7a>
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	4a16      	ldr	r2, [pc, #88]	; (8005e40 <TIM_OC5_SetConfig+0xb8>)
 8005de6:	4293      	cmp	r3, r2
 8005de8:	d00b      	beq.n	8005e02 <TIM_OC5_SetConfig+0x7a>
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	4a15      	ldr	r2, [pc, #84]	; (8005e44 <TIM_OC5_SetConfig+0xbc>)
 8005dee:	4293      	cmp	r3, r2
 8005df0:	d007      	beq.n	8005e02 <TIM_OC5_SetConfig+0x7a>
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	4a14      	ldr	r2, [pc, #80]	; (8005e48 <TIM_OC5_SetConfig+0xc0>)
 8005df6:	4293      	cmp	r3, r2
 8005df8:	d003      	beq.n	8005e02 <TIM_OC5_SetConfig+0x7a>
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	4a13      	ldr	r2, [pc, #76]	; (8005e4c <TIM_OC5_SetConfig+0xc4>)
 8005dfe:	4293      	cmp	r3, r2
 8005e00:	d109      	bne.n	8005e16 <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8005e02:	697b      	ldr	r3, [r7, #20]
 8005e04:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005e08:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8005e0a:	683b      	ldr	r3, [r7, #0]
 8005e0c:	695b      	ldr	r3, [r3, #20]
 8005e0e:	021b      	lsls	r3, r3, #8
 8005e10:	697a      	ldr	r2, [r7, #20]
 8005e12:	4313      	orrs	r3, r2
 8005e14:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	697a      	ldr	r2, [r7, #20]
 8005e1a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	68fa      	ldr	r2, [r7, #12]
 8005e20:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8005e22:	683b      	ldr	r3, [r7, #0]
 8005e24:	685a      	ldr	r2, [r3, #4]
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	649a      	str	r2, [r3, #72]	; 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	693a      	ldr	r2, [r7, #16]
 8005e2e:	621a      	str	r2, [r3, #32]
}
 8005e30:	bf00      	nop
 8005e32:	371c      	adds	r7, #28
 8005e34:	46bd      	mov	sp, r7
 8005e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e3a:	4770      	bx	lr
 8005e3c:	40012c00 	.word	0x40012c00
 8005e40:	40013400 	.word	0x40013400
 8005e44:	40014000 	.word	0x40014000
 8005e48:	40014400 	.word	0x40014400
 8005e4c:	40014800 	.word	0x40014800

08005e50 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8005e50:	b480      	push	{r7}
 8005e52:	b087      	sub	sp, #28
 8005e54:	af00      	add	r7, sp, #0
 8005e56:	6078      	str	r0, [r7, #4]
 8005e58:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	6a1b      	ldr	r3, [r3, #32]
 8005e5e:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	6a1b      	ldr	r3, [r3, #32]
 8005e6a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	685b      	ldr	r3, [r3, #4]
 8005e70:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005e76:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8005e78:	68fb      	ldr	r3, [r7, #12]
 8005e7a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005e7e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005e82:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005e84:	683b      	ldr	r3, [r7, #0]
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	021b      	lsls	r3, r3, #8
 8005e8a:	68fa      	ldr	r2, [r7, #12]
 8005e8c:	4313      	orrs	r3, r2
 8005e8e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8005e90:	693b      	ldr	r3, [r7, #16]
 8005e92:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005e96:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8005e98:	683b      	ldr	r3, [r7, #0]
 8005e9a:	689b      	ldr	r3, [r3, #8]
 8005e9c:	051b      	lsls	r3, r3, #20
 8005e9e:	693a      	ldr	r2, [r7, #16]
 8005ea0:	4313      	orrs	r3, r2
 8005ea2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	4a18      	ldr	r2, [pc, #96]	; (8005f08 <TIM_OC6_SetConfig+0xb8>)
 8005ea8:	4293      	cmp	r3, r2
 8005eaa:	d00f      	beq.n	8005ecc <TIM_OC6_SetConfig+0x7c>
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	4a17      	ldr	r2, [pc, #92]	; (8005f0c <TIM_OC6_SetConfig+0xbc>)
 8005eb0:	4293      	cmp	r3, r2
 8005eb2:	d00b      	beq.n	8005ecc <TIM_OC6_SetConfig+0x7c>
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	4a16      	ldr	r2, [pc, #88]	; (8005f10 <TIM_OC6_SetConfig+0xc0>)
 8005eb8:	4293      	cmp	r3, r2
 8005eba:	d007      	beq.n	8005ecc <TIM_OC6_SetConfig+0x7c>
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	4a15      	ldr	r2, [pc, #84]	; (8005f14 <TIM_OC6_SetConfig+0xc4>)
 8005ec0:	4293      	cmp	r3, r2
 8005ec2:	d003      	beq.n	8005ecc <TIM_OC6_SetConfig+0x7c>
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	4a14      	ldr	r2, [pc, #80]	; (8005f18 <TIM_OC6_SetConfig+0xc8>)
 8005ec8:	4293      	cmp	r3, r2
 8005eca:	d109      	bne.n	8005ee0 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8005ecc:	697b      	ldr	r3, [r7, #20]
 8005ece:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005ed2:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8005ed4:	683b      	ldr	r3, [r7, #0]
 8005ed6:	695b      	ldr	r3, [r3, #20]
 8005ed8:	029b      	lsls	r3, r3, #10
 8005eda:	697a      	ldr	r2, [r7, #20]
 8005edc:	4313      	orrs	r3, r2
 8005ede:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	697a      	ldr	r2, [r7, #20]
 8005ee4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	68fa      	ldr	r2, [r7, #12]
 8005eea:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8005eec:	683b      	ldr	r3, [r7, #0]
 8005eee:	685a      	ldr	r2, [r3, #4]
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	693a      	ldr	r2, [r7, #16]
 8005ef8:	621a      	str	r2, [r3, #32]
}
 8005efa:	bf00      	nop
 8005efc:	371c      	adds	r7, #28
 8005efe:	46bd      	mov	sp, r7
 8005f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f04:	4770      	bx	lr
 8005f06:	bf00      	nop
 8005f08:	40012c00 	.word	0x40012c00
 8005f0c:	40013400 	.word	0x40013400
 8005f10:	40014000 	.word	0x40014000
 8005f14:	40014400 	.word	0x40014400
 8005f18:	40014800 	.word	0x40014800

08005f1c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005f1c:	b480      	push	{r7}
 8005f1e:	b087      	sub	sp, #28
 8005f20:	af00      	add	r7, sp, #0
 8005f22:	60f8      	str	r0, [r7, #12]
 8005f24:	60b9      	str	r1, [r7, #8]
 8005f26:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005f28:	68fb      	ldr	r3, [r7, #12]
 8005f2a:	6a1b      	ldr	r3, [r3, #32]
 8005f2c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005f2e:	68fb      	ldr	r3, [r7, #12]
 8005f30:	6a1b      	ldr	r3, [r3, #32]
 8005f32:	f023 0201 	bic.w	r2, r3, #1
 8005f36:	68fb      	ldr	r3, [r7, #12]
 8005f38:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005f3a:	68fb      	ldr	r3, [r7, #12]
 8005f3c:	699b      	ldr	r3, [r3, #24]
 8005f3e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005f40:	693b      	ldr	r3, [r7, #16]
 8005f42:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005f46:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	011b      	lsls	r3, r3, #4
 8005f4c:	693a      	ldr	r2, [r7, #16]
 8005f4e:	4313      	orrs	r3, r2
 8005f50:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005f52:	697b      	ldr	r3, [r7, #20]
 8005f54:	f023 030a 	bic.w	r3, r3, #10
 8005f58:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005f5a:	697a      	ldr	r2, [r7, #20]
 8005f5c:	68bb      	ldr	r3, [r7, #8]
 8005f5e:	4313      	orrs	r3, r2
 8005f60:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005f62:	68fb      	ldr	r3, [r7, #12]
 8005f64:	693a      	ldr	r2, [r7, #16]
 8005f66:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005f68:	68fb      	ldr	r3, [r7, #12]
 8005f6a:	697a      	ldr	r2, [r7, #20]
 8005f6c:	621a      	str	r2, [r3, #32]
}
 8005f6e:	bf00      	nop
 8005f70:	371c      	adds	r7, #28
 8005f72:	46bd      	mov	sp, r7
 8005f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f78:	4770      	bx	lr

08005f7a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005f7a:	b480      	push	{r7}
 8005f7c:	b087      	sub	sp, #28
 8005f7e:	af00      	add	r7, sp, #0
 8005f80:	60f8      	str	r0, [r7, #12]
 8005f82:	60b9      	str	r1, [r7, #8]
 8005f84:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005f86:	68fb      	ldr	r3, [r7, #12]
 8005f88:	6a1b      	ldr	r3, [r3, #32]
 8005f8a:	f023 0210 	bic.w	r2, r3, #16
 8005f8e:	68fb      	ldr	r3, [r7, #12]
 8005f90:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005f92:	68fb      	ldr	r3, [r7, #12]
 8005f94:	699b      	ldr	r3, [r3, #24]
 8005f96:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005f98:	68fb      	ldr	r3, [r7, #12]
 8005f9a:	6a1b      	ldr	r3, [r3, #32]
 8005f9c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005f9e:	697b      	ldr	r3, [r7, #20]
 8005fa0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005fa4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	031b      	lsls	r3, r3, #12
 8005faa:	697a      	ldr	r2, [r7, #20]
 8005fac:	4313      	orrs	r3, r2
 8005fae:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005fb0:	693b      	ldr	r3, [r7, #16]
 8005fb2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005fb6:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005fb8:	68bb      	ldr	r3, [r7, #8]
 8005fba:	011b      	lsls	r3, r3, #4
 8005fbc:	693a      	ldr	r2, [r7, #16]
 8005fbe:	4313      	orrs	r3, r2
 8005fc0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005fc2:	68fb      	ldr	r3, [r7, #12]
 8005fc4:	697a      	ldr	r2, [r7, #20]
 8005fc6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005fc8:	68fb      	ldr	r3, [r7, #12]
 8005fca:	693a      	ldr	r2, [r7, #16]
 8005fcc:	621a      	str	r2, [r3, #32]
}
 8005fce:	bf00      	nop
 8005fd0:	371c      	adds	r7, #28
 8005fd2:	46bd      	mov	sp, r7
 8005fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fd8:	4770      	bx	lr

08005fda <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005fda:	b480      	push	{r7}
 8005fdc:	b085      	sub	sp, #20
 8005fde:	af00      	add	r7, sp, #0
 8005fe0:	6078      	str	r0, [r7, #4]
 8005fe2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	689b      	ldr	r3, [r3, #8]
 8005fe8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005fea:	68fb      	ldr	r3, [r7, #12]
 8005fec:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8005ff0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005ff4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005ff6:	683a      	ldr	r2, [r7, #0]
 8005ff8:	68fb      	ldr	r3, [r7, #12]
 8005ffa:	4313      	orrs	r3, r2
 8005ffc:	f043 0307 	orr.w	r3, r3, #7
 8006000:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	68fa      	ldr	r2, [r7, #12]
 8006006:	609a      	str	r2, [r3, #8]
}
 8006008:	bf00      	nop
 800600a:	3714      	adds	r7, #20
 800600c:	46bd      	mov	sp, r7
 800600e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006012:	4770      	bx	lr

08006014 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006014:	b480      	push	{r7}
 8006016:	b087      	sub	sp, #28
 8006018:	af00      	add	r7, sp, #0
 800601a:	60f8      	str	r0, [r7, #12]
 800601c:	60b9      	str	r1, [r7, #8]
 800601e:	607a      	str	r2, [r7, #4]
 8006020:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006022:	68fb      	ldr	r3, [r7, #12]
 8006024:	689b      	ldr	r3, [r3, #8]
 8006026:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006028:	697b      	ldr	r3, [r7, #20]
 800602a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800602e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006030:	683b      	ldr	r3, [r7, #0]
 8006032:	021a      	lsls	r2, r3, #8
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	431a      	orrs	r2, r3
 8006038:	68bb      	ldr	r3, [r7, #8]
 800603a:	4313      	orrs	r3, r2
 800603c:	697a      	ldr	r2, [r7, #20]
 800603e:	4313      	orrs	r3, r2
 8006040:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006042:	68fb      	ldr	r3, [r7, #12]
 8006044:	697a      	ldr	r2, [r7, #20]
 8006046:	609a      	str	r2, [r3, #8]
}
 8006048:	bf00      	nop
 800604a:	371c      	adds	r7, #28
 800604c:	46bd      	mov	sp, r7
 800604e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006052:	4770      	bx	lr

08006054 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006054:	b480      	push	{r7}
 8006056:	b087      	sub	sp, #28
 8006058:	af00      	add	r7, sp, #0
 800605a:	60f8      	str	r0, [r7, #12]
 800605c:	60b9      	str	r1, [r7, #8]
 800605e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006060:	68bb      	ldr	r3, [r7, #8]
 8006062:	f003 031f 	and.w	r3, r3, #31
 8006066:	2201      	movs	r2, #1
 8006068:	fa02 f303 	lsl.w	r3, r2, r3
 800606c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800606e:	68fb      	ldr	r3, [r7, #12]
 8006070:	6a1a      	ldr	r2, [r3, #32]
 8006072:	697b      	ldr	r3, [r7, #20]
 8006074:	43db      	mvns	r3, r3
 8006076:	401a      	ands	r2, r3
 8006078:	68fb      	ldr	r3, [r7, #12]
 800607a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800607c:	68fb      	ldr	r3, [r7, #12]
 800607e:	6a1a      	ldr	r2, [r3, #32]
 8006080:	68bb      	ldr	r3, [r7, #8]
 8006082:	f003 031f 	and.w	r3, r3, #31
 8006086:	6879      	ldr	r1, [r7, #4]
 8006088:	fa01 f303 	lsl.w	r3, r1, r3
 800608c:	431a      	orrs	r2, r3
 800608e:	68fb      	ldr	r3, [r7, #12]
 8006090:	621a      	str	r2, [r3, #32]
}
 8006092:	bf00      	nop
 8006094:	371c      	adds	r7, #28
 8006096:	46bd      	mov	sp, r7
 8006098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800609c:	4770      	bx	lr
	...

080060a0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80060a0:	b480      	push	{r7}
 80060a2:	b085      	sub	sp, #20
 80060a4:	af00      	add	r7, sp, #0
 80060a6:	6078      	str	r0, [r7, #4]
 80060a8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80060b0:	2b01      	cmp	r3, #1
 80060b2:	d101      	bne.n	80060b8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80060b4:	2302      	movs	r3, #2
 80060b6:	e065      	b.n	8006184 <HAL_TIMEx_MasterConfigSynchronization+0xe4>
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	2201      	movs	r2, #1
 80060bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	2202      	movs	r2, #2
 80060c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	685b      	ldr	r3, [r3, #4]
 80060ce:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	689b      	ldr	r3, [r3, #8]
 80060d6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	4a2c      	ldr	r2, [pc, #176]	; (8006190 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80060de:	4293      	cmp	r3, r2
 80060e0:	d004      	beq.n	80060ec <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	4a2b      	ldr	r2, [pc, #172]	; (8006194 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80060e8:	4293      	cmp	r3, r2
 80060ea:	d108      	bne.n	80060fe <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80060ec:	68fb      	ldr	r3, [r7, #12]
 80060ee:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80060f2:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80060f4:	683b      	ldr	r3, [r7, #0]
 80060f6:	685b      	ldr	r3, [r3, #4]
 80060f8:	68fa      	ldr	r2, [r7, #12]
 80060fa:	4313      	orrs	r3, r2
 80060fc:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80060fe:	68fb      	ldr	r3, [r7, #12]
 8006100:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8006104:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006108:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800610a:	683b      	ldr	r3, [r7, #0]
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	68fa      	ldr	r2, [r7, #12]
 8006110:	4313      	orrs	r3, r2
 8006112:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	68fa      	ldr	r2, [r7, #12]
 800611a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	4a1b      	ldr	r2, [pc, #108]	; (8006190 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8006122:	4293      	cmp	r3, r2
 8006124:	d018      	beq.n	8006158 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	681b      	ldr	r3, [r3, #0]
 800612a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800612e:	d013      	beq.n	8006158 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	4a18      	ldr	r2, [pc, #96]	; (8006198 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8006136:	4293      	cmp	r3, r2
 8006138:	d00e      	beq.n	8006158 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	4a17      	ldr	r2, [pc, #92]	; (800619c <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8006140:	4293      	cmp	r3, r2
 8006142:	d009      	beq.n	8006158 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	4a12      	ldr	r2, [pc, #72]	; (8006194 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800614a:	4293      	cmp	r3, r2
 800614c:	d004      	beq.n	8006158 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	4a13      	ldr	r2, [pc, #76]	; (80061a0 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8006154:	4293      	cmp	r3, r2
 8006156:	d10c      	bne.n	8006172 <HAL_TIMEx_MasterConfigSynchronization+0xd2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006158:	68bb      	ldr	r3, [r7, #8]
 800615a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800615e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006160:	683b      	ldr	r3, [r7, #0]
 8006162:	689b      	ldr	r3, [r3, #8]
 8006164:	68ba      	ldr	r2, [r7, #8]
 8006166:	4313      	orrs	r3, r2
 8006168:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	681b      	ldr	r3, [r3, #0]
 800616e:	68ba      	ldr	r2, [r7, #8]
 8006170:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	2201      	movs	r2, #1
 8006176:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	2200      	movs	r2, #0
 800617e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006182:	2300      	movs	r3, #0
}
 8006184:	4618      	mov	r0, r3
 8006186:	3714      	adds	r7, #20
 8006188:	46bd      	mov	sp, r7
 800618a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800618e:	4770      	bx	lr
 8006190:	40012c00 	.word	0x40012c00
 8006194:	40013400 	.word	0x40013400
 8006198:	40000400 	.word	0x40000400
 800619c:	40000800 	.word	0x40000800
 80061a0:	40014000 	.word	0x40014000

080061a4 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80061a4:	b480      	push	{r7}
 80061a6:	b085      	sub	sp, #20
 80061a8:	af00      	add	r7, sp, #0
 80061aa:	6078      	str	r0, [r7, #4]
 80061ac:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80061ae:	2300      	movs	r3, #0
 80061b0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80061b8:	2b01      	cmp	r3, #1
 80061ba:	d101      	bne.n	80061c0 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80061bc:	2302      	movs	r3, #2
 80061be:	e087      	b.n	80062d0 <HAL_TIMEx_ConfigBreakDeadTime+0x12c>
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	2201      	movs	r2, #1
 80061c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80061c8:	68fb      	ldr	r3, [r7, #12]
 80061ca:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80061ce:	683b      	ldr	r3, [r7, #0]
 80061d0:	68db      	ldr	r3, [r3, #12]
 80061d2:	4313      	orrs	r3, r2
 80061d4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80061d6:	68fb      	ldr	r3, [r7, #12]
 80061d8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80061dc:	683b      	ldr	r3, [r7, #0]
 80061de:	689b      	ldr	r3, [r3, #8]
 80061e0:	4313      	orrs	r3, r2
 80061e2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80061e4:	68fb      	ldr	r3, [r7, #12]
 80061e6:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80061ea:	683b      	ldr	r3, [r7, #0]
 80061ec:	685b      	ldr	r3, [r3, #4]
 80061ee:	4313      	orrs	r3, r2
 80061f0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80061f2:	68fb      	ldr	r3, [r7, #12]
 80061f4:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80061f8:	683b      	ldr	r3, [r7, #0]
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	4313      	orrs	r3, r2
 80061fe:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8006200:	68fb      	ldr	r3, [r7, #12]
 8006202:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006206:	683b      	ldr	r3, [r7, #0]
 8006208:	691b      	ldr	r3, [r3, #16]
 800620a:	4313      	orrs	r3, r2
 800620c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800620e:	68fb      	ldr	r3, [r7, #12]
 8006210:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8006214:	683b      	ldr	r3, [r7, #0]
 8006216:	695b      	ldr	r3, [r3, #20]
 8006218:	4313      	orrs	r3, r2
 800621a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800621c:	68fb      	ldr	r3, [r7, #12]
 800621e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8006222:	683b      	ldr	r3, [r7, #0]
 8006224:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006226:	4313      	orrs	r3, r2
 8006228:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800622a:	68fb      	ldr	r3, [r7, #12]
 800622c:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8006230:	683b      	ldr	r3, [r7, #0]
 8006232:	699b      	ldr	r3, [r3, #24]
 8006234:	041b      	lsls	r3, r3, #16
 8006236:	4313      	orrs	r3, r2
 8006238:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	4a27      	ldr	r2, [pc, #156]	; (80062dc <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 8006240:	4293      	cmp	r3, r2
 8006242:	d004      	beq.n	800624e <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	4a25      	ldr	r2, [pc, #148]	; (80062e0 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 800624a:	4293      	cmp	r3, r2
 800624c:	d106      	bne.n	800625c <HAL_TIMEx_ConfigBreakDeadTime+0xb8>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 800624e:	68fb      	ldr	r3, [r7, #12]
 8006250:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8006254:	683b      	ldr	r3, [r7, #0]
 8006256:	69db      	ldr	r3, [r3, #28]
 8006258:	4313      	orrs	r3, r2
 800625a:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	4a1e      	ldr	r2, [pc, #120]	; (80062dc <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 8006262:	4293      	cmp	r3, r2
 8006264:	d004      	beq.n	8006270 <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	681b      	ldr	r3, [r3, #0]
 800626a:	4a1d      	ldr	r2, [pc, #116]	; (80062e0 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 800626c:	4293      	cmp	r3, r2
 800626e:	d126      	bne.n	80062be <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8006270:	68fb      	ldr	r3, [r7, #12]
 8006272:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8006276:	683b      	ldr	r3, [r7, #0]
 8006278:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800627a:	051b      	lsls	r3, r3, #20
 800627c:	4313      	orrs	r3, r2
 800627e:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8006280:	68fb      	ldr	r3, [r7, #12]
 8006282:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8006286:	683b      	ldr	r3, [r7, #0]
 8006288:	6a1b      	ldr	r3, [r3, #32]
 800628a:	4313      	orrs	r3, r2
 800628c:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800628e:	68fb      	ldr	r3, [r7, #12]
 8006290:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8006294:	683b      	ldr	r3, [r7, #0]
 8006296:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006298:	4313      	orrs	r3, r2
 800629a:	60fb      	str	r3, [r7, #12]

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	4a0e      	ldr	r2, [pc, #56]	; (80062dc <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 80062a2:	4293      	cmp	r3, r2
 80062a4:	d004      	beq.n	80062b0 <HAL_TIMEx_ConfigBreakDeadTime+0x10c>
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	4a0d      	ldr	r2, [pc, #52]	; (80062e0 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 80062ac:	4293      	cmp	r3, r2
 80062ae:	d106      	bne.n	80062be <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 80062b0:	68fb      	ldr	r3, [r7, #12]
 80062b2:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 80062b6:	683b      	ldr	r3, [r7, #0]
 80062b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80062ba:	4313      	orrs	r3, r2
 80062bc:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	681b      	ldr	r3, [r3, #0]
 80062c2:	68fa      	ldr	r2, [r7, #12]
 80062c4:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	2200      	movs	r2, #0
 80062ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80062ce:	2300      	movs	r3, #0
}
 80062d0:	4618      	mov	r0, r3
 80062d2:	3714      	adds	r7, #20
 80062d4:	46bd      	mov	sp, r7
 80062d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062da:	4770      	bx	lr
 80062dc:	40012c00 	.word	0x40012c00
 80062e0:	40013400 	.word	0x40013400

080062e4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80062e4:	b580      	push	{r7, lr}
 80062e6:	b082      	sub	sp, #8
 80062e8:	af00      	add	r7, sp, #0
 80062ea:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	2b00      	cmp	r3, #0
 80062f0:	d101      	bne.n	80062f6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80062f2:	2301      	movs	r3, #1
 80062f4:	e042      	b.n	800637c <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80062fc:	2b00      	cmp	r3, #0
 80062fe:	d106      	bne.n	800630e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	2200      	movs	r2, #0
 8006304:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006308:	6878      	ldr	r0, [r7, #4]
 800630a:	f7fa fe57 	bl	8000fbc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	2224      	movs	r2, #36	; 0x24
 8006312:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	681a      	ldr	r2, [r3, #0]
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	f022 0201 	bic.w	r2, r2, #1
 8006324:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006326:	6878      	ldr	r0, [r7, #4]
 8006328:	f000 f82c 	bl	8006384 <UART_SetConfig>
 800632c:	4603      	mov	r3, r0
 800632e:	2b01      	cmp	r3, #1
 8006330:	d101      	bne.n	8006336 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8006332:	2301      	movs	r3, #1
 8006334:	e022      	b.n	800637c <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800633a:	2b00      	cmp	r3, #0
 800633c:	d002      	beq.n	8006344 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800633e:	6878      	ldr	r0, [r7, #4]
 8006340:	f000 faec 	bl	800691c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	685a      	ldr	r2, [r3, #4]
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	681b      	ldr	r3, [r3, #0]
 800634e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006352:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	681b      	ldr	r3, [r3, #0]
 8006358:	689a      	ldr	r2, [r3, #8]
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	681b      	ldr	r3, [r3, #0]
 800635e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006362:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	681b      	ldr	r3, [r3, #0]
 8006368:	681a      	ldr	r2, [r3, #0]
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	681b      	ldr	r3, [r3, #0]
 800636e:	f042 0201 	orr.w	r2, r2, #1
 8006372:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006374:	6878      	ldr	r0, [r7, #4]
 8006376:	f000 fb73 	bl	8006a60 <UART_CheckIdleState>
 800637a:	4603      	mov	r3, r0
}
 800637c:	4618      	mov	r0, r3
 800637e:	3708      	adds	r7, #8
 8006380:	46bd      	mov	sp, r7
 8006382:	bd80      	pop	{r7, pc}

08006384 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006384:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006388:	b08c      	sub	sp, #48	; 0x30
 800638a:	af00      	add	r7, sp, #0
 800638c:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800638e:	2300      	movs	r3, #0
 8006390:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006394:	697b      	ldr	r3, [r7, #20]
 8006396:	689a      	ldr	r2, [r3, #8]
 8006398:	697b      	ldr	r3, [r7, #20]
 800639a:	691b      	ldr	r3, [r3, #16]
 800639c:	431a      	orrs	r2, r3
 800639e:	697b      	ldr	r3, [r7, #20]
 80063a0:	695b      	ldr	r3, [r3, #20]
 80063a2:	431a      	orrs	r2, r3
 80063a4:	697b      	ldr	r3, [r7, #20]
 80063a6:	69db      	ldr	r3, [r3, #28]
 80063a8:	4313      	orrs	r3, r2
 80063aa:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80063ac:	697b      	ldr	r3, [r7, #20]
 80063ae:	681b      	ldr	r3, [r3, #0]
 80063b0:	681a      	ldr	r2, [r3, #0]
 80063b2:	4bab      	ldr	r3, [pc, #684]	; (8006660 <UART_SetConfig+0x2dc>)
 80063b4:	4013      	ands	r3, r2
 80063b6:	697a      	ldr	r2, [r7, #20]
 80063b8:	6812      	ldr	r2, [r2, #0]
 80063ba:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80063bc:	430b      	orrs	r3, r1
 80063be:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80063c0:	697b      	ldr	r3, [r7, #20]
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	685b      	ldr	r3, [r3, #4]
 80063c6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80063ca:	697b      	ldr	r3, [r7, #20]
 80063cc:	68da      	ldr	r2, [r3, #12]
 80063ce:	697b      	ldr	r3, [r7, #20]
 80063d0:	681b      	ldr	r3, [r3, #0]
 80063d2:	430a      	orrs	r2, r1
 80063d4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80063d6:	697b      	ldr	r3, [r7, #20]
 80063d8:	699b      	ldr	r3, [r3, #24]
 80063da:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80063dc:	697b      	ldr	r3, [r7, #20]
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	4aa0      	ldr	r2, [pc, #640]	; (8006664 <UART_SetConfig+0x2e0>)
 80063e2:	4293      	cmp	r3, r2
 80063e4:	d004      	beq.n	80063f0 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80063e6:	697b      	ldr	r3, [r7, #20]
 80063e8:	6a1b      	ldr	r3, [r3, #32]
 80063ea:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80063ec:	4313      	orrs	r3, r2
 80063ee:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80063f0:	697b      	ldr	r3, [r7, #20]
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	689b      	ldr	r3, [r3, #8]
 80063f6:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 80063fa:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 80063fe:	697a      	ldr	r2, [r7, #20]
 8006400:	6812      	ldr	r2, [r2, #0]
 8006402:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006404:	430b      	orrs	r3, r1
 8006406:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8006408:	697b      	ldr	r3, [r7, #20]
 800640a:	681b      	ldr	r3, [r3, #0]
 800640c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800640e:	f023 010f 	bic.w	r1, r3, #15
 8006412:	697b      	ldr	r3, [r7, #20]
 8006414:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006416:	697b      	ldr	r3, [r7, #20]
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	430a      	orrs	r2, r1
 800641c:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800641e:	697b      	ldr	r3, [r7, #20]
 8006420:	681b      	ldr	r3, [r3, #0]
 8006422:	4a91      	ldr	r2, [pc, #580]	; (8006668 <UART_SetConfig+0x2e4>)
 8006424:	4293      	cmp	r3, r2
 8006426:	d125      	bne.n	8006474 <UART_SetConfig+0xf0>
 8006428:	4b90      	ldr	r3, [pc, #576]	; (800666c <UART_SetConfig+0x2e8>)
 800642a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800642e:	f003 0303 	and.w	r3, r3, #3
 8006432:	2b03      	cmp	r3, #3
 8006434:	d81a      	bhi.n	800646c <UART_SetConfig+0xe8>
 8006436:	a201      	add	r2, pc, #4	; (adr r2, 800643c <UART_SetConfig+0xb8>)
 8006438:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800643c:	0800644d 	.word	0x0800644d
 8006440:	0800645d 	.word	0x0800645d
 8006444:	08006455 	.word	0x08006455
 8006448:	08006465 	.word	0x08006465
 800644c:	2301      	movs	r3, #1
 800644e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006452:	e0d6      	b.n	8006602 <UART_SetConfig+0x27e>
 8006454:	2302      	movs	r3, #2
 8006456:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800645a:	e0d2      	b.n	8006602 <UART_SetConfig+0x27e>
 800645c:	2304      	movs	r3, #4
 800645e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006462:	e0ce      	b.n	8006602 <UART_SetConfig+0x27e>
 8006464:	2308      	movs	r3, #8
 8006466:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800646a:	e0ca      	b.n	8006602 <UART_SetConfig+0x27e>
 800646c:	2310      	movs	r3, #16
 800646e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006472:	e0c6      	b.n	8006602 <UART_SetConfig+0x27e>
 8006474:	697b      	ldr	r3, [r7, #20]
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	4a7d      	ldr	r2, [pc, #500]	; (8006670 <UART_SetConfig+0x2ec>)
 800647a:	4293      	cmp	r3, r2
 800647c:	d138      	bne.n	80064f0 <UART_SetConfig+0x16c>
 800647e:	4b7b      	ldr	r3, [pc, #492]	; (800666c <UART_SetConfig+0x2e8>)
 8006480:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006484:	f003 030c 	and.w	r3, r3, #12
 8006488:	2b0c      	cmp	r3, #12
 800648a:	d82d      	bhi.n	80064e8 <UART_SetConfig+0x164>
 800648c:	a201      	add	r2, pc, #4	; (adr r2, 8006494 <UART_SetConfig+0x110>)
 800648e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006492:	bf00      	nop
 8006494:	080064c9 	.word	0x080064c9
 8006498:	080064e9 	.word	0x080064e9
 800649c:	080064e9 	.word	0x080064e9
 80064a0:	080064e9 	.word	0x080064e9
 80064a4:	080064d9 	.word	0x080064d9
 80064a8:	080064e9 	.word	0x080064e9
 80064ac:	080064e9 	.word	0x080064e9
 80064b0:	080064e9 	.word	0x080064e9
 80064b4:	080064d1 	.word	0x080064d1
 80064b8:	080064e9 	.word	0x080064e9
 80064bc:	080064e9 	.word	0x080064e9
 80064c0:	080064e9 	.word	0x080064e9
 80064c4:	080064e1 	.word	0x080064e1
 80064c8:	2300      	movs	r3, #0
 80064ca:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80064ce:	e098      	b.n	8006602 <UART_SetConfig+0x27e>
 80064d0:	2302      	movs	r3, #2
 80064d2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80064d6:	e094      	b.n	8006602 <UART_SetConfig+0x27e>
 80064d8:	2304      	movs	r3, #4
 80064da:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80064de:	e090      	b.n	8006602 <UART_SetConfig+0x27e>
 80064e0:	2308      	movs	r3, #8
 80064e2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80064e6:	e08c      	b.n	8006602 <UART_SetConfig+0x27e>
 80064e8:	2310      	movs	r3, #16
 80064ea:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80064ee:	e088      	b.n	8006602 <UART_SetConfig+0x27e>
 80064f0:	697b      	ldr	r3, [r7, #20]
 80064f2:	681b      	ldr	r3, [r3, #0]
 80064f4:	4a5f      	ldr	r2, [pc, #380]	; (8006674 <UART_SetConfig+0x2f0>)
 80064f6:	4293      	cmp	r3, r2
 80064f8:	d125      	bne.n	8006546 <UART_SetConfig+0x1c2>
 80064fa:	4b5c      	ldr	r3, [pc, #368]	; (800666c <UART_SetConfig+0x2e8>)
 80064fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006500:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8006504:	2b30      	cmp	r3, #48	; 0x30
 8006506:	d016      	beq.n	8006536 <UART_SetConfig+0x1b2>
 8006508:	2b30      	cmp	r3, #48	; 0x30
 800650a:	d818      	bhi.n	800653e <UART_SetConfig+0x1ba>
 800650c:	2b20      	cmp	r3, #32
 800650e:	d00a      	beq.n	8006526 <UART_SetConfig+0x1a2>
 8006510:	2b20      	cmp	r3, #32
 8006512:	d814      	bhi.n	800653e <UART_SetConfig+0x1ba>
 8006514:	2b00      	cmp	r3, #0
 8006516:	d002      	beq.n	800651e <UART_SetConfig+0x19a>
 8006518:	2b10      	cmp	r3, #16
 800651a:	d008      	beq.n	800652e <UART_SetConfig+0x1aa>
 800651c:	e00f      	b.n	800653e <UART_SetConfig+0x1ba>
 800651e:	2300      	movs	r3, #0
 8006520:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006524:	e06d      	b.n	8006602 <UART_SetConfig+0x27e>
 8006526:	2302      	movs	r3, #2
 8006528:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800652c:	e069      	b.n	8006602 <UART_SetConfig+0x27e>
 800652e:	2304      	movs	r3, #4
 8006530:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006534:	e065      	b.n	8006602 <UART_SetConfig+0x27e>
 8006536:	2308      	movs	r3, #8
 8006538:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800653c:	e061      	b.n	8006602 <UART_SetConfig+0x27e>
 800653e:	2310      	movs	r3, #16
 8006540:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006544:	e05d      	b.n	8006602 <UART_SetConfig+0x27e>
 8006546:	697b      	ldr	r3, [r7, #20]
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	4a4b      	ldr	r2, [pc, #300]	; (8006678 <UART_SetConfig+0x2f4>)
 800654c:	4293      	cmp	r3, r2
 800654e:	d125      	bne.n	800659c <UART_SetConfig+0x218>
 8006550:	4b46      	ldr	r3, [pc, #280]	; (800666c <UART_SetConfig+0x2e8>)
 8006552:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006556:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800655a:	2bc0      	cmp	r3, #192	; 0xc0
 800655c:	d016      	beq.n	800658c <UART_SetConfig+0x208>
 800655e:	2bc0      	cmp	r3, #192	; 0xc0
 8006560:	d818      	bhi.n	8006594 <UART_SetConfig+0x210>
 8006562:	2b80      	cmp	r3, #128	; 0x80
 8006564:	d00a      	beq.n	800657c <UART_SetConfig+0x1f8>
 8006566:	2b80      	cmp	r3, #128	; 0x80
 8006568:	d814      	bhi.n	8006594 <UART_SetConfig+0x210>
 800656a:	2b00      	cmp	r3, #0
 800656c:	d002      	beq.n	8006574 <UART_SetConfig+0x1f0>
 800656e:	2b40      	cmp	r3, #64	; 0x40
 8006570:	d008      	beq.n	8006584 <UART_SetConfig+0x200>
 8006572:	e00f      	b.n	8006594 <UART_SetConfig+0x210>
 8006574:	2300      	movs	r3, #0
 8006576:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800657a:	e042      	b.n	8006602 <UART_SetConfig+0x27e>
 800657c:	2302      	movs	r3, #2
 800657e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006582:	e03e      	b.n	8006602 <UART_SetConfig+0x27e>
 8006584:	2304      	movs	r3, #4
 8006586:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800658a:	e03a      	b.n	8006602 <UART_SetConfig+0x27e>
 800658c:	2308      	movs	r3, #8
 800658e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006592:	e036      	b.n	8006602 <UART_SetConfig+0x27e>
 8006594:	2310      	movs	r3, #16
 8006596:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800659a:	e032      	b.n	8006602 <UART_SetConfig+0x27e>
 800659c:	697b      	ldr	r3, [r7, #20]
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	4a30      	ldr	r2, [pc, #192]	; (8006664 <UART_SetConfig+0x2e0>)
 80065a2:	4293      	cmp	r3, r2
 80065a4:	d12a      	bne.n	80065fc <UART_SetConfig+0x278>
 80065a6:	4b31      	ldr	r3, [pc, #196]	; (800666c <UART_SetConfig+0x2e8>)
 80065a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80065ac:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80065b0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80065b4:	d01a      	beq.n	80065ec <UART_SetConfig+0x268>
 80065b6:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80065ba:	d81b      	bhi.n	80065f4 <UART_SetConfig+0x270>
 80065bc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80065c0:	d00c      	beq.n	80065dc <UART_SetConfig+0x258>
 80065c2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80065c6:	d815      	bhi.n	80065f4 <UART_SetConfig+0x270>
 80065c8:	2b00      	cmp	r3, #0
 80065ca:	d003      	beq.n	80065d4 <UART_SetConfig+0x250>
 80065cc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80065d0:	d008      	beq.n	80065e4 <UART_SetConfig+0x260>
 80065d2:	e00f      	b.n	80065f4 <UART_SetConfig+0x270>
 80065d4:	2300      	movs	r3, #0
 80065d6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80065da:	e012      	b.n	8006602 <UART_SetConfig+0x27e>
 80065dc:	2302      	movs	r3, #2
 80065de:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80065e2:	e00e      	b.n	8006602 <UART_SetConfig+0x27e>
 80065e4:	2304      	movs	r3, #4
 80065e6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80065ea:	e00a      	b.n	8006602 <UART_SetConfig+0x27e>
 80065ec:	2308      	movs	r3, #8
 80065ee:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80065f2:	e006      	b.n	8006602 <UART_SetConfig+0x27e>
 80065f4:	2310      	movs	r3, #16
 80065f6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80065fa:	e002      	b.n	8006602 <UART_SetConfig+0x27e>
 80065fc:	2310      	movs	r3, #16
 80065fe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8006602:	697b      	ldr	r3, [r7, #20]
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	4a17      	ldr	r2, [pc, #92]	; (8006664 <UART_SetConfig+0x2e0>)
 8006608:	4293      	cmp	r3, r2
 800660a:	f040 80a8 	bne.w	800675e <UART_SetConfig+0x3da>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800660e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8006612:	2b08      	cmp	r3, #8
 8006614:	d834      	bhi.n	8006680 <UART_SetConfig+0x2fc>
 8006616:	a201      	add	r2, pc, #4	; (adr r2, 800661c <UART_SetConfig+0x298>)
 8006618:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800661c:	08006641 	.word	0x08006641
 8006620:	08006681 	.word	0x08006681
 8006624:	08006649 	.word	0x08006649
 8006628:	08006681 	.word	0x08006681
 800662c:	0800664f 	.word	0x0800664f
 8006630:	08006681 	.word	0x08006681
 8006634:	08006681 	.word	0x08006681
 8006638:	08006681 	.word	0x08006681
 800663c:	08006657 	.word	0x08006657
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006640:	f7fd fb10 	bl	8003c64 <HAL_RCC_GetPCLK1Freq>
 8006644:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8006646:	e021      	b.n	800668c <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006648:	4b0c      	ldr	r3, [pc, #48]	; (800667c <UART_SetConfig+0x2f8>)
 800664a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800664c:	e01e      	b.n	800668c <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800664e:	f7fd fa9b 	bl	8003b88 <HAL_RCC_GetSysClockFreq>
 8006652:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8006654:	e01a      	b.n	800668c <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006656:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800665a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800665c:	e016      	b.n	800668c <UART_SetConfig+0x308>
 800665e:	bf00      	nop
 8006660:	cfff69f3 	.word	0xcfff69f3
 8006664:	40008000 	.word	0x40008000
 8006668:	40013800 	.word	0x40013800
 800666c:	40021000 	.word	0x40021000
 8006670:	40004400 	.word	0x40004400
 8006674:	40004800 	.word	0x40004800
 8006678:	40004c00 	.word	0x40004c00
 800667c:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8006680:	2300      	movs	r3, #0
 8006682:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8006684:	2301      	movs	r3, #1
 8006686:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800668a:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800668c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800668e:	2b00      	cmp	r3, #0
 8006690:	f000 812a 	beq.w	80068e8 <UART_SetConfig+0x564>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8006694:	697b      	ldr	r3, [r7, #20]
 8006696:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006698:	4a9e      	ldr	r2, [pc, #632]	; (8006914 <UART_SetConfig+0x590>)
 800669a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800669e:	461a      	mov	r2, r3
 80066a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066a2:	fbb3 f3f2 	udiv	r3, r3, r2
 80066a6:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80066a8:	697b      	ldr	r3, [r7, #20]
 80066aa:	685a      	ldr	r2, [r3, #4]
 80066ac:	4613      	mov	r3, r2
 80066ae:	005b      	lsls	r3, r3, #1
 80066b0:	4413      	add	r3, r2
 80066b2:	69ba      	ldr	r2, [r7, #24]
 80066b4:	429a      	cmp	r2, r3
 80066b6:	d305      	bcc.n	80066c4 <UART_SetConfig+0x340>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80066b8:	697b      	ldr	r3, [r7, #20]
 80066ba:	685b      	ldr	r3, [r3, #4]
 80066bc:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80066be:	69ba      	ldr	r2, [r7, #24]
 80066c0:	429a      	cmp	r2, r3
 80066c2:	d903      	bls.n	80066cc <UART_SetConfig+0x348>
      {
        ret = HAL_ERROR;
 80066c4:	2301      	movs	r3, #1
 80066c6:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80066ca:	e10d      	b.n	80068e8 <UART_SetConfig+0x564>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80066cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066ce:	2200      	movs	r2, #0
 80066d0:	60bb      	str	r3, [r7, #8]
 80066d2:	60fa      	str	r2, [r7, #12]
 80066d4:	697b      	ldr	r3, [r7, #20]
 80066d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066d8:	4a8e      	ldr	r2, [pc, #568]	; (8006914 <UART_SetConfig+0x590>)
 80066da:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80066de:	b29b      	uxth	r3, r3
 80066e0:	2200      	movs	r2, #0
 80066e2:	603b      	str	r3, [r7, #0]
 80066e4:	607a      	str	r2, [r7, #4]
 80066e6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80066ea:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80066ee:	f7f9 fd93 	bl	8000218 <__aeabi_uldivmod>
 80066f2:	4602      	mov	r2, r0
 80066f4:	460b      	mov	r3, r1
 80066f6:	4610      	mov	r0, r2
 80066f8:	4619      	mov	r1, r3
 80066fa:	f04f 0200 	mov.w	r2, #0
 80066fe:	f04f 0300 	mov.w	r3, #0
 8006702:	020b      	lsls	r3, r1, #8
 8006704:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8006708:	0202      	lsls	r2, r0, #8
 800670a:	6979      	ldr	r1, [r7, #20]
 800670c:	6849      	ldr	r1, [r1, #4]
 800670e:	0849      	lsrs	r1, r1, #1
 8006710:	2000      	movs	r0, #0
 8006712:	460c      	mov	r4, r1
 8006714:	4605      	mov	r5, r0
 8006716:	eb12 0804 	adds.w	r8, r2, r4
 800671a:	eb43 0905 	adc.w	r9, r3, r5
 800671e:	697b      	ldr	r3, [r7, #20]
 8006720:	685b      	ldr	r3, [r3, #4]
 8006722:	2200      	movs	r2, #0
 8006724:	469a      	mov	sl, r3
 8006726:	4693      	mov	fp, r2
 8006728:	4652      	mov	r2, sl
 800672a:	465b      	mov	r3, fp
 800672c:	4640      	mov	r0, r8
 800672e:	4649      	mov	r1, r9
 8006730:	f7f9 fd72 	bl	8000218 <__aeabi_uldivmod>
 8006734:	4602      	mov	r2, r0
 8006736:	460b      	mov	r3, r1
 8006738:	4613      	mov	r3, r2
 800673a:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800673c:	6a3b      	ldr	r3, [r7, #32]
 800673e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006742:	d308      	bcc.n	8006756 <UART_SetConfig+0x3d2>
 8006744:	6a3b      	ldr	r3, [r7, #32]
 8006746:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800674a:	d204      	bcs.n	8006756 <UART_SetConfig+0x3d2>
        {
          huart->Instance->BRR = usartdiv;
 800674c:	697b      	ldr	r3, [r7, #20]
 800674e:	681b      	ldr	r3, [r3, #0]
 8006750:	6a3a      	ldr	r2, [r7, #32]
 8006752:	60da      	str	r2, [r3, #12]
 8006754:	e0c8      	b.n	80068e8 <UART_SetConfig+0x564>
        }
        else
        {
          ret = HAL_ERROR;
 8006756:	2301      	movs	r3, #1
 8006758:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800675c:	e0c4      	b.n	80068e8 <UART_SetConfig+0x564>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800675e:	697b      	ldr	r3, [r7, #20]
 8006760:	69db      	ldr	r3, [r3, #28]
 8006762:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006766:	d167      	bne.n	8006838 <UART_SetConfig+0x4b4>
  {
    switch (clocksource)
 8006768:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800676c:	2b08      	cmp	r3, #8
 800676e:	d828      	bhi.n	80067c2 <UART_SetConfig+0x43e>
 8006770:	a201      	add	r2, pc, #4	; (adr r2, 8006778 <UART_SetConfig+0x3f4>)
 8006772:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006776:	bf00      	nop
 8006778:	0800679d 	.word	0x0800679d
 800677c:	080067a5 	.word	0x080067a5
 8006780:	080067ad 	.word	0x080067ad
 8006784:	080067c3 	.word	0x080067c3
 8006788:	080067b3 	.word	0x080067b3
 800678c:	080067c3 	.word	0x080067c3
 8006790:	080067c3 	.word	0x080067c3
 8006794:	080067c3 	.word	0x080067c3
 8006798:	080067bb 	.word	0x080067bb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800679c:	f7fd fa62 	bl	8003c64 <HAL_RCC_GetPCLK1Freq>
 80067a0:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80067a2:	e014      	b.n	80067ce <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80067a4:	f7fd fa74 	bl	8003c90 <HAL_RCC_GetPCLK2Freq>
 80067a8:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80067aa:	e010      	b.n	80067ce <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80067ac:	4b5a      	ldr	r3, [pc, #360]	; (8006918 <UART_SetConfig+0x594>)
 80067ae:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80067b0:	e00d      	b.n	80067ce <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80067b2:	f7fd f9e9 	bl	8003b88 <HAL_RCC_GetSysClockFreq>
 80067b6:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80067b8:	e009      	b.n	80067ce <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80067ba:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80067be:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80067c0:	e005      	b.n	80067ce <UART_SetConfig+0x44a>
      default:
        pclk = 0U;
 80067c2:	2300      	movs	r3, #0
 80067c4:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 80067c6:	2301      	movs	r3, #1
 80067c8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 80067cc:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80067ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067d0:	2b00      	cmp	r3, #0
 80067d2:	f000 8089 	beq.w	80068e8 <UART_SetConfig+0x564>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80067d6:	697b      	ldr	r3, [r7, #20]
 80067d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067da:	4a4e      	ldr	r2, [pc, #312]	; (8006914 <UART_SetConfig+0x590>)
 80067dc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80067e0:	461a      	mov	r2, r3
 80067e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067e4:	fbb3 f3f2 	udiv	r3, r3, r2
 80067e8:	005a      	lsls	r2, r3, #1
 80067ea:	697b      	ldr	r3, [r7, #20]
 80067ec:	685b      	ldr	r3, [r3, #4]
 80067ee:	085b      	lsrs	r3, r3, #1
 80067f0:	441a      	add	r2, r3
 80067f2:	697b      	ldr	r3, [r7, #20]
 80067f4:	685b      	ldr	r3, [r3, #4]
 80067f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80067fa:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80067fc:	6a3b      	ldr	r3, [r7, #32]
 80067fe:	2b0f      	cmp	r3, #15
 8006800:	d916      	bls.n	8006830 <UART_SetConfig+0x4ac>
 8006802:	6a3b      	ldr	r3, [r7, #32]
 8006804:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006808:	d212      	bcs.n	8006830 <UART_SetConfig+0x4ac>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800680a:	6a3b      	ldr	r3, [r7, #32]
 800680c:	b29b      	uxth	r3, r3
 800680e:	f023 030f 	bic.w	r3, r3, #15
 8006812:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006814:	6a3b      	ldr	r3, [r7, #32]
 8006816:	085b      	lsrs	r3, r3, #1
 8006818:	b29b      	uxth	r3, r3
 800681a:	f003 0307 	and.w	r3, r3, #7
 800681e:	b29a      	uxth	r2, r3
 8006820:	8bfb      	ldrh	r3, [r7, #30]
 8006822:	4313      	orrs	r3, r2
 8006824:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8006826:	697b      	ldr	r3, [r7, #20]
 8006828:	681b      	ldr	r3, [r3, #0]
 800682a:	8bfa      	ldrh	r2, [r7, #30]
 800682c:	60da      	str	r2, [r3, #12]
 800682e:	e05b      	b.n	80068e8 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 8006830:	2301      	movs	r3, #1
 8006832:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8006836:	e057      	b.n	80068e8 <UART_SetConfig+0x564>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006838:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800683c:	2b08      	cmp	r3, #8
 800683e:	d828      	bhi.n	8006892 <UART_SetConfig+0x50e>
 8006840:	a201      	add	r2, pc, #4	; (adr r2, 8006848 <UART_SetConfig+0x4c4>)
 8006842:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006846:	bf00      	nop
 8006848:	0800686d 	.word	0x0800686d
 800684c:	08006875 	.word	0x08006875
 8006850:	0800687d 	.word	0x0800687d
 8006854:	08006893 	.word	0x08006893
 8006858:	08006883 	.word	0x08006883
 800685c:	08006893 	.word	0x08006893
 8006860:	08006893 	.word	0x08006893
 8006864:	08006893 	.word	0x08006893
 8006868:	0800688b 	.word	0x0800688b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800686c:	f7fd f9fa 	bl	8003c64 <HAL_RCC_GetPCLK1Freq>
 8006870:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8006872:	e014      	b.n	800689e <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006874:	f7fd fa0c 	bl	8003c90 <HAL_RCC_GetPCLK2Freq>
 8006878:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800687a:	e010      	b.n	800689e <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800687c:	4b26      	ldr	r3, [pc, #152]	; (8006918 <UART_SetConfig+0x594>)
 800687e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8006880:	e00d      	b.n	800689e <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006882:	f7fd f981 	bl	8003b88 <HAL_RCC_GetSysClockFreq>
 8006886:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8006888:	e009      	b.n	800689e <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800688a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800688e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8006890:	e005      	b.n	800689e <UART_SetConfig+0x51a>
      default:
        pclk = 0U;
 8006892:	2300      	movs	r3, #0
 8006894:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8006896:	2301      	movs	r3, #1
 8006898:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800689c:	bf00      	nop
    }

    if (pclk != 0U)
 800689e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068a0:	2b00      	cmp	r3, #0
 80068a2:	d021      	beq.n	80068e8 <UART_SetConfig+0x564>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80068a4:	697b      	ldr	r3, [r7, #20]
 80068a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068a8:	4a1a      	ldr	r2, [pc, #104]	; (8006914 <UART_SetConfig+0x590>)
 80068aa:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80068ae:	461a      	mov	r2, r3
 80068b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068b2:	fbb3 f2f2 	udiv	r2, r3, r2
 80068b6:	697b      	ldr	r3, [r7, #20]
 80068b8:	685b      	ldr	r3, [r3, #4]
 80068ba:	085b      	lsrs	r3, r3, #1
 80068bc:	441a      	add	r2, r3
 80068be:	697b      	ldr	r3, [r7, #20]
 80068c0:	685b      	ldr	r3, [r3, #4]
 80068c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80068c6:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80068c8:	6a3b      	ldr	r3, [r7, #32]
 80068ca:	2b0f      	cmp	r3, #15
 80068cc:	d909      	bls.n	80068e2 <UART_SetConfig+0x55e>
 80068ce:	6a3b      	ldr	r3, [r7, #32]
 80068d0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80068d4:	d205      	bcs.n	80068e2 <UART_SetConfig+0x55e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80068d6:	6a3b      	ldr	r3, [r7, #32]
 80068d8:	b29a      	uxth	r2, r3
 80068da:	697b      	ldr	r3, [r7, #20]
 80068dc:	681b      	ldr	r3, [r3, #0]
 80068de:	60da      	str	r2, [r3, #12]
 80068e0:	e002      	b.n	80068e8 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 80068e2:	2301      	movs	r3, #1
 80068e4:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80068e8:	697b      	ldr	r3, [r7, #20]
 80068ea:	2201      	movs	r2, #1
 80068ec:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 80068f0:	697b      	ldr	r3, [r7, #20]
 80068f2:	2201      	movs	r2, #1
 80068f4:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80068f8:	697b      	ldr	r3, [r7, #20]
 80068fa:	2200      	movs	r2, #0
 80068fc:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 80068fe:	697b      	ldr	r3, [r7, #20]
 8006900:	2200      	movs	r2, #0
 8006902:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8006904:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 8006908:	4618      	mov	r0, r3
 800690a:	3730      	adds	r7, #48	; 0x30
 800690c:	46bd      	mov	sp, r7
 800690e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006912:	bf00      	nop
 8006914:	08006f14 	.word	0x08006f14
 8006918:	00f42400 	.word	0x00f42400

0800691c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800691c:	b480      	push	{r7}
 800691e:	b083      	sub	sp, #12
 8006920:	af00      	add	r7, sp, #0
 8006922:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006928:	f003 0301 	and.w	r3, r3, #1
 800692c:	2b00      	cmp	r3, #0
 800692e:	d00a      	beq.n	8006946 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	681b      	ldr	r3, [r3, #0]
 8006934:	685b      	ldr	r3, [r3, #4]
 8006936:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	681b      	ldr	r3, [r3, #0]
 8006942:	430a      	orrs	r2, r1
 8006944:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800694a:	f003 0302 	and.w	r3, r3, #2
 800694e:	2b00      	cmp	r3, #0
 8006950:	d00a      	beq.n	8006968 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	681b      	ldr	r3, [r3, #0]
 8006956:	685b      	ldr	r3, [r3, #4]
 8006958:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	681b      	ldr	r3, [r3, #0]
 8006964:	430a      	orrs	r2, r1
 8006966:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800696c:	f003 0304 	and.w	r3, r3, #4
 8006970:	2b00      	cmp	r3, #0
 8006972:	d00a      	beq.n	800698a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	681b      	ldr	r3, [r3, #0]
 8006978:	685b      	ldr	r3, [r3, #4]
 800697a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	681b      	ldr	r3, [r3, #0]
 8006986:	430a      	orrs	r2, r1
 8006988:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800698e:	f003 0308 	and.w	r3, r3, #8
 8006992:	2b00      	cmp	r3, #0
 8006994:	d00a      	beq.n	80069ac <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	681b      	ldr	r3, [r3, #0]
 800699a:	685b      	ldr	r3, [r3, #4]
 800699c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	681b      	ldr	r3, [r3, #0]
 80069a8:	430a      	orrs	r2, r1
 80069aa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80069b0:	f003 0310 	and.w	r3, r3, #16
 80069b4:	2b00      	cmp	r3, #0
 80069b6:	d00a      	beq.n	80069ce <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	681b      	ldr	r3, [r3, #0]
 80069bc:	689b      	ldr	r3, [r3, #8]
 80069be:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	681b      	ldr	r3, [r3, #0]
 80069ca:	430a      	orrs	r2, r1
 80069cc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80069d2:	f003 0320 	and.w	r3, r3, #32
 80069d6:	2b00      	cmp	r3, #0
 80069d8:	d00a      	beq.n	80069f0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	681b      	ldr	r3, [r3, #0]
 80069de:	689b      	ldr	r3, [r3, #8]
 80069e0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	681b      	ldr	r3, [r3, #0]
 80069ec:	430a      	orrs	r2, r1
 80069ee:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80069f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80069f8:	2b00      	cmp	r3, #0
 80069fa:	d01a      	beq.n	8006a32 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	681b      	ldr	r3, [r3, #0]
 8006a00:	685b      	ldr	r3, [r3, #4]
 8006a02:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	681b      	ldr	r3, [r3, #0]
 8006a0e:	430a      	orrs	r2, r1
 8006a10:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006a16:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006a1a:	d10a      	bne.n	8006a32 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	681b      	ldr	r3, [r3, #0]
 8006a20:	685b      	ldr	r3, [r3, #4]
 8006a22:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	681b      	ldr	r3, [r3, #0]
 8006a2e:	430a      	orrs	r2, r1
 8006a30:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a36:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006a3a:	2b00      	cmp	r3, #0
 8006a3c:	d00a      	beq.n	8006a54 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	681b      	ldr	r3, [r3, #0]
 8006a42:	685b      	ldr	r3, [r3, #4]
 8006a44:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	681b      	ldr	r3, [r3, #0]
 8006a50:	430a      	orrs	r2, r1
 8006a52:	605a      	str	r2, [r3, #4]
  }
}
 8006a54:	bf00      	nop
 8006a56:	370c      	adds	r7, #12
 8006a58:	46bd      	mov	sp, r7
 8006a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a5e:	4770      	bx	lr

08006a60 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006a60:	b580      	push	{r7, lr}
 8006a62:	b086      	sub	sp, #24
 8006a64:	af02      	add	r7, sp, #8
 8006a66:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	2200      	movs	r2, #0
 8006a6c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006a70:	f7fa fcc0 	bl	80013f4 <HAL_GetTick>
 8006a74:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	681b      	ldr	r3, [r3, #0]
 8006a7a:	681b      	ldr	r3, [r3, #0]
 8006a7c:	f003 0308 	and.w	r3, r3, #8
 8006a80:	2b08      	cmp	r3, #8
 8006a82:	d10e      	bne.n	8006aa2 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006a84:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006a88:	9300      	str	r3, [sp, #0]
 8006a8a:	68fb      	ldr	r3, [r7, #12]
 8006a8c:	2200      	movs	r2, #0
 8006a8e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8006a92:	6878      	ldr	r0, [r7, #4]
 8006a94:	f000 f82f 	bl	8006af6 <UART_WaitOnFlagUntilTimeout>
 8006a98:	4603      	mov	r3, r0
 8006a9a:	2b00      	cmp	r3, #0
 8006a9c:	d001      	beq.n	8006aa2 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006a9e:	2303      	movs	r3, #3
 8006aa0:	e025      	b.n	8006aee <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	681b      	ldr	r3, [r3, #0]
 8006aa6:	681b      	ldr	r3, [r3, #0]
 8006aa8:	f003 0304 	and.w	r3, r3, #4
 8006aac:	2b04      	cmp	r3, #4
 8006aae:	d10e      	bne.n	8006ace <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006ab0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006ab4:	9300      	str	r3, [sp, #0]
 8006ab6:	68fb      	ldr	r3, [r7, #12]
 8006ab8:	2200      	movs	r2, #0
 8006aba:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8006abe:	6878      	ldr	r0, [r7, #4]
 8006ac0:	f000 f819 	bl	8006af6 <UART_WaitOnFlagUntilTimeout>
 8006ac4:	4603      	mov	r3, r0
 8006ac6:	2b00      	cmp	r3, #0
 8006ac8:	d001      	beq.n	8006ace <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006aca:	2303      	movs	r3, #3
 8006acc:	e00f      	b.n	8006aee <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	2220      	movs	r2, #32
 8006ad2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	2220      	movs	r2, #32
 8006ada:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	2200      	movs	r2, #0
 8006ae2:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	2200      	movs	r2, #0
 8006ae8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8006aec:	2300      	movs	r3, #0
}
 8006aee:	4618      	mov	r0, r3
 8006af0:	3710      	adds	r7, #16
 8006af2:	46bd      	mov	sp, r7
 8006af4:	bd80      	pop	{r7, pc}

08006af6 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006af6:	b580      	push	{r7, lr}
 8006af8:	b09c      	sub	sp, #112	; 0x70
 8006afa:	af00      	add	r7, sp, #0
 8006afc:	60f8      	str	r0, [r7, #12]
 8006afe:	60b9      	str	r1, [r7, #8]
 8006b00:	603b      	str	r3, [r7, #0]
 8006b02:	4613      	mov	r3, r2
 8006b04:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006b06:	e0a9      	b.n	8006c5c <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006b08:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006b0a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006b0e:	f000 80a5 	beq.w	8006c5c <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006b12:	f7fa fc6f 	bl	80013f4 <HAL_GetTick>
 8006b16:	4602      	mov	r2, r0
 8006b18:	683b      	ldr	r3, [r7, #0]
 8006b1a:	1ad3      	subs	r3, r2, r3
 8006b1c:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8006b1e:	429a      	cmp	r2, r3
 8006b20:	d302      	bcc.n	8006b28 <UART_WaitOnFlagUntilTimeout+0x32>
 8006b22:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006b24:	2b00      	cmp	r3, #0
 8006b26:	d140      	bne.n	8006baa <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8006b28:	68fb      	ldr	r3, [r7, #12]
 8006b2a:	681b      	ldr	r3, [r3, #0]
 8006b2c:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b2e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006b30:	e853 3f00 	ldrex	r3, [r3]
 8006b34:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8006b36:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006b38:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006b3c:	667b      	str	r3, [r7, #100]	; 0x64
 8006b3e:	68fb      	ldr	r3, [r7, #12]
 8006b40:	681b      	ldr	r3, [r3, #0]
 8006b42:	461a      	mov	r2, r3
 8006b44:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006b46:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006b48:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b4a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8006b4c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8006b4e:	e841 2300 	strex	r3, r2, [r1]
 8006b52:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8006b54:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006b56:	2b00      	cmp	r3, #0
 8006b58:	d1e6      	bne.n	8006b28 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006b5a:	68fb      	ldr	r3, [r7, #12]
 8006b5c:	681b      	ldr	r3, [r3, #0]
 8006b5e:	3308      	adds	r3, #8
 8006b60:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b62:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006b64:	e853 3f00 	ldrex	r3, [r3]
 8006b68:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006b6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b6c:	f023 0301 	bic.w	r3, r3, #1
 8006b70:	663b      	str	r3, [r7, #96]	; 0x60
 8006b72:	68fb      	ldr	r3, [r7, #12]
 8006b74:	681b      	ldr	r3, [r3, #0]
 8006b76:	3308      	adds	r3, #8
 8006b78:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8006b7a:	64ba      	str	r2, [r7, #72]	; 0x48
 8006b7c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b7e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8006b80:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006b82:	e841 2300 	strex	r3, r2, [r1]
 8006b86:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8006b88:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006b8a:	2b00      	cmp	r3, #0
 8006b8c:	d1e5      	bne.n	8006b5a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8006b8e:	68fb      	ldr	r3, [r7, #12]
 8006b90:	2220      	movs	r2, #32
 8006b92:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8006b96:	68fb      	ldr	r3, [r7, #12]
 8006b98:	2220      	movs	r2, #32
 8006b9a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8006b9e:	68fb      	ldr	r3, [r7, #12]
 8006ba0:	2200      	movs	r2, #0
 8006ba2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8006ba6:	2303      	movs	r3, #3
 8006ba8:	e069      	b.n	8006c7e <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006baa:	68fb      	ldr	r3, [r7, #12]
 8006bac:	681b      	ldr	r3, [r3, #0]
 8006bae:	681b      	ldr	r3, [r3, #0]
 8006bb0:	f003 0304 	and.w	r3, r3, #4
 8006bb4:	2b00      	cmp	r3, #0
 8006bb6:	d051      	beq.n	8006c5c <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006bb8:	68fb      	ldr	r3, [r7, #12]
 8006bba:	681b      	ldr	r3, [r3, #0]
 8006bbc:	69db      	ldr	r3, [r3, #28]
 8006bbe:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006bc2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006bc6:	d149      	bne.n	8006c5c <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006bc8:	68fb      	ldr	r3, [r7, #12]
 8006bca:	681b      	ldr	r3, [r3, #0]
 8006bcc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006bd0:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8006bd2:	68fb      	ldr	r3, [r7, #12]
 8006bd4:	681b      	ldr	r3, [r3, #0]
 8006bd6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006bd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006bda:	e853 3f00 	ldrex	r3, [r3]
 8006bde:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006be0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006be2:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006be6:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006be8:	68fb      	ldr	r3, [r7, #12]
 8006bea:	681b      	ldr	r3, [r3, #0]
 8006bec:	461a      	mov	r2, r3
 8006bee:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006bf0:	637b      	str	r3, [r7, #52]	; 0x34
 8006bf2:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006bf4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006bf6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006bf8:	e841 2300 	strex	r3, r2, [r1]
 8006bfc:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8006bfe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c00:	2b00      	cmp	r3, #0
 8006c02:	d1e6      	bne.n	8006bd2 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006c04:	68fb      	ldr	r3, [r7, #12]
 8006c06:	681b      	ldr	r3, [r3, #0]
 8006c08:	3308      	adds	r3, #8
 8006c0a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c0c:	697b      	ldr	r3, [r7, #20]
 8006c0e:	e853 3f00 	ldrex	r3, [r3]
 8006c12:	613b      	str	r3, [r7, #16]
   return(result);
 8006c14:	693b      	ldr	r3, [r7, #16]
 8006c16:	f023 0301 	bic.w	r3, r3, #1
 8006c1a:	66bb      	str	r3, [r7, #104]	; 0x68
 8006c1c:	68fb      	ldr	r3, [r7, #12]
 8006c1e:	681b      	ldr	r3, [r3, #0]
 8006c20:	3308      	adds	r3, #8
 8006c22:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8006c24:	623a      	str	r2, [r7, #32]
 8006c26:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c28:	69f9      	ldr	r1, [r7, #28]
 8006c2a:	6a3a      	ldr	r2, [r7, #32]
 8006c2c:	e841 2300 	strex	r3, r2, [r1]
 8006c30:	61bb      	str	r3, [r7, #24]
   return(result);
 8006c32:	69bb      	ldr	r3, [r7, #24]
 8006c34:	2b00      	cmp	r3, #0
 8006c36:	d1e5      	bne.n	8006c04 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8006c38:	68fb      	ldr	r3, [r7, #12]
 8006c3a:	2220      	movs	r2, #32
 8006c3c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8006c40:	68fb      	ldr	r3, [r7, #12]
 8006c42:	2220      	movs	r2, #32
 8006c44:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006c48:	68fb      	ldr	r3, [r7, #12]
 8006c4a:	2220      	movs	r2, #32
 8006c4c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006c50:	68fb      	ldr	r3, [r7, #12]
 8006c52:	2200      	movs	r2, #0
 8006c54:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8006c58:	2303      	movs	r3, #3
 8006c5a:	e010      	b.n	8006c7e <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006c5c:	68fb      	ldr	r3, [r7, #12]
 8006c5e:	681b      	ldr	r3, [r3, #0]
 8006c60:	69da      	ldr	r2, [r3, #28]
 8006c62:	68bb      	ldr	r3, [r7, #8]
 8006c64:	4013      	ands	r3, r2
 8006c66:	68ba      	ldr	r2, [r7, #8]
 8006c68:	429a      	cmp	r2, r3
 8006c6a:	bf0c      	ite	eq
 8006c6c:	2301      	moveq	r3, #1
 8006c6e:	2300      	movne	r3, #0
 8006c70:	b2db      	uxtb	r3, r3
 8006c72:	461a      	mov	r2, r3
 8006c74:	79fb      	ldrb	r3, [r7, #7]
 8006c76:	429a      	cmp	r2, r3
 8006c78:	f43f af46 	beq.w	8006b08 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006c7c:	2300      	movs	r3, #0
}
 8006c7e:	4618      	mov	r0, r3
 8006c80:	3770      	adds	r7, #112	; 0x70
 8006c82:	46bd      	mov	sp, r7
 8006c84:	bd80      	pop	{r7, pc}

08006c86 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8006c86:	b480      	push	{r7}
 8006c88:	b085      	sub	sp, #20
 8006c8a:	af00      	add	r7, sp, #0
 8006c8c:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8006c94:	2b01      	cmp	r3, #1
 8006c96:	d101      	bne.n	8006c9c <HAL_UARTEx_DisableFifoMode+0x16>
 8006c98:	2302      	movs	r3, #2
 8006c9a:	e027      	b.n	8006cec <HAL_UARTEx_DisableFifoMode+0x66>
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	2201      	movs	r2, #1
 8006ca0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	2224      	movs	r2, #36	; 0x24
 8006ca8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	681b      	ldr	r3, [r3, #0]
 8006cb0:	681b      	ldr	r3, [r3, #0]
 8006cb2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	681b      	ldr	r3, [r3, #0]
 8006cb8:	681a      	ldr	r2, [r3, #0]
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	681b      	ldr	r3, [r3, #0]
 8006cbe:	f022 0201 	bic.w	r2, r2, #1
 8006cc2:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8006cc4:	68fb      	ldr	r3, [r7, #12]
 8006cc6:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8006cca:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	2200      	movs	r2, #0
 8006cd0:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	681b      	ldr	r3, [r3, #0]
 8006cd6:	68fa      	ldr	r2, [r7, #12]
 8006cd8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	2220      	movs	r2, #32
 8006cde:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	2200      	movs	r2, #0
 8006ce6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8006cea:	2300      	movs	r3, #0
}
 8006cec:	4618      	mov	r0, r3
 8006cee:	3714      	adds	r7, #20
 8006cf0:	46bd      	mov	sp, r7
 8006cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cf6:	4770      	bx	lr

08006cf8 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006cf8:	b580      	push	{r7, lr}
 8006cfa:	b084      	sub	sp, #16
 8006cfc:	af00      	add	r7, sp, #0
 8006cfe:	6078      	str	r0, [r7, #4]
 8006d00:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8006d08:	2b01      	cmp	r3, #1
 8006d0a:	d101      	bne.n	8006d10 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8006d0c:	2302      	movs	r3, #2
 8006d0e:	e02d      	b.n	8006d6c <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	2201      	movs	r2, #1
 8006d14:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	2224      	movs	r2, #36	; 0x24
 8006d1c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	681b      	ldr	r3, [r3, #0]
 8006d24:	681b      	ldr	r3, [r3, #0]
 8006d26:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	681b      	ldr	r3, [r3, #0]
 8006d2c:	681a      	ldr	r2, [r3, #0]
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	681b      	ldr	r3, [r3, #0]
 8006d32:	f022 0201 	bic.w	r2, r2, #1
 8006d36:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	681b      	ldr	r3, [r3, #0]
 8006d3c:	689b      	ldr	r3, [r3, #8]
 8006d3e:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	681b      	ldr	r3, [r3, #0]
 8006d46:	683a      	ldr	r2, [r7, #0]
 8006d48:	430a      	orrs	r2, r1
 8006d4a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006d4c:	6878      	ldr	r0, [r7, #4]
 8006d4e:	f000 f84f 	bl	8006df0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	681b      	ldr	r3, [r3, #0]
 8006d56:	68fa      	ldr	r2, [r7, #12]
 8006d58:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	2220      	movs	r2, #32
 8006d5e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	2200      	movs	r2, #0
 8006d66:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8006d6a:	2300      	movs	r3, #0
}
 8006d6c:	4618      	mov	r0, r3
 8006d6e:	3710      	adds	r7, #16
 8006d70:	46bd      	mov	sp, r7
 8006d72:	bd80      	pop	{r7, pc}

08006d74 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006d74:	b580      	push	{r7, lr}
 8006d76:	b084      	sub	sp, #16
 8006d78:	af00      	add	r7, sp, #0
 8006d7a:	6078      	str	r0, [r7, #4]
 8006d7c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8006d84:	2b01      	cmp	r3, #1
 8006d86:	d101      	bne.n	8006d8c <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8006d88:	2302      	movs	r3, #2
 8006d8a:	e02d      	b.n	8006de8 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	2201      	movs	r2, #1
 8006d90:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	2224      	movs	r2, #36	; 0x24
 8006d98:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	681b      	ldr	r3, [r3, #0]
 8006da0:	681b      	ldr	r3, [r3, #0]
 8006da2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	681b      	ldr	r3, [r3, #0]
 8006da8:	681a      	ldr	r2, [r3, #0]
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	681b      	ldr	r3, [r3, #0]
 8006dae:	f022 0201 	bic.w	r2, r2, #1
 8006db2:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	681b      	ldr	r3, [r3, #0]
 8006db8:	689b      	ldr	r3, [r3, #8]
 8006dba:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	681b      	ldr	r3, [r3, #0]
 8006dc2:	683a      	ldr	r2, [r7, #0]
 8006dc4:	430a      	orrs	r2, r1
 8006dc6:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006dc8:	6878      	ldr	r0, [r7, #4]
 8006dca:	f000 f811 	bl	8006df0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	681b      	ldr	r3, [r3, #0]
 8006dd2:	68fa      	ldr	r2, [r7, #12]
 8006dd4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	2220      	movs	r2, #32
 8006dda:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	2200      	movs	r2, #0
 8006de2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8006de6:	2300      	movs	r3, #0
}
 8006de8:	4618      	mov	r0, r3
 8006dea:	3710      	adds	r7, #16
 8006dec:	46bd      	mov	sp, r7
 8006dee:	bd80      	pop	{r7, pc}

08006df0 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8006df0:	b480      	push	{r7}
 8006df2:	b085      	sub	sp, #20
 8006df4:	af00      	add	r7, sp, #0
 8006df6:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006dfc:	2b00      	cmp	r3, #0
 8006dfe:	d108      	bne.n	8006e12 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	2201      	movs	r2, #1
 8006e04:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	2201      	movs	r2, #1
 8006e0c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8006e10:	e031      	b.n	8006e76 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8006e12:	2308      	movs	r3, #8
 8006e14:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8006e16:	2308      	movs	r3, #8
 8006e18:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	681b      	ldr	r3, [r3, #0]
 8006e1e:	689b      	ldr	r3, [r3, #8]
 8006e20:	0e5b      	lsrs	r3, r3, #25
 8006e22:	b2db      	uxtb	r3, r3
 8006e24:	f003 0307 	and.w	r3, r3, #7
 8006e28:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	681b      	ldr	r3, [r3, #0]
 8006e2e:	689b      	ldr	r3, [r3, #8]
 8006e30:	0f5b      	lsrs	r3, r3, #29
 8006e32:	b2db      	uxtb	r3, r3
 8006e34:	f003 0307 	and.w	r3, r3, #7
 8006e38:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006e3a:	7bbb      	ldrb	r3, [r7, #14]
 8006e3c:	7b3a      	ldrb	r2, [r7, #12]
 8006e3e:	4911      	ldr	r1, [pc, #68]	; (8006e84 <UARTEx_SetNbDataToProcess+0x94>)
 8006e40:	5c8a      	ldrb	r2, [r1, r2]
 8006e42:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8006e46:	7b3a      	ldrb	r2, [r7, #12]
 8006e48:	490f      	ldr	r1, [pc, #60]	; (8006e88 <UARTEx_SetNbDataToProcess+0x98>)
 8006e4a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006e4c:	fb93 f3f2 	sdiv	r3, r3, r2
 8006e50:	b29a      	uxth	r2, r3
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006e58:	7bfb      	ldrb	r3, [r7, #15]
 8006e5a:	7b7a      	ldrb	r2, [r7, #13]
 8006e5c:	4909      	ldr	r1, [pc, #36]	; (8006e84 <UARTEx_SetNbDataToProcess+0x94>)
 8006e5e:	5c8a      	ldrb	r2, [r1, r2]
 8006e60:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8006e64:	7b7a      	ldrb	r2, [r7, #13]
 8006e66:	4908      	ldr	r1, [pc, #32]	; (8006e88 <UARTEx_SetNbDataToProcess+0x98>)
 8006e68:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006e6a:	fb93 f3f2 	sdiv	r3, r3, r2
 8006e6e:	b29a      	uxth	r2, r3
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8006e76:	bf00      	nop
 8006e78:	3714      	adds	r7, #20
 8006e7a:	46bd      	mov	sp, r7
 8006e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e80:	4770      	bx	lr
 8006e82:	bf00      	nop
 8006e84:	08006f2c 	.word	0x08006f2c
 8006e88:	08006f34 	.word	0x08006f34

08006e8c <memset>:
 8006e8c:	4402      	add	r2, r0
 8006e8e:	4603      	mov	r3, r0
 8006e90:	4293      	cmp	r3, r2
 8006e92:	d100      	bne.n	8006e96 <memset+0xa>
 8006e94:	4770      	bx	lr
 8006e96:	f803 1b01 	strb.w	r1, [r3], #1
 8006e9a:	e7f9      	b.n	8006e90 <memset+0x4>

08006e9c <__libc_init_array>:
 8006e9c:	b570      	push	{r4, r5, r6, lr}
 8006e9e:	4d0d      	ldr	r5, [pc, #52]	; (8006ed4 <__libc_init_array+0x38>)
 8006ea0:	4c0d      	ldr	r4, [pc, #52]	; (8006ed8 <__libc_init_array+0x3c>)
 8006ea2:	1b64      	subs	r4, r4, r5
 8006ea4:	10a4      	asrs	r4, r4, #2
 8006ea6:	2600      	movs	r6, #0
 8006ea8:	42a6      	cmp	r6, r4
 8006eaa:	d109      	bne.n	8006ec0 <__libc_init_array+0x24>
 8006eac:	4d0b      	ldr	r5, [pc, #44]	; (8006edc <__libc_init_array+0x40>)
 8006eae:	4c0c      	ldr	r4, [pc, #48]	; (8006ee0 <__libc_init_array+0x44>)
 8006eb0:	f000 f818 	bl	8006ee4 <_init>
 8006eb4:	1b64      	subs	r4, r4, r5
 8006eb6:	10a4      	asrs	r4, r4, #2
 8006eb8:	2600      	movs	r6, #0
 8006eba:	42a6      	cmp	r6, r4
 8006ebc:	d105      	bne.n	8006eca <__libc_init_array+0x2e>
 8006ebe:	bd70      	pop	{r4, r5, r6, pc}
 8006ec0:	f855 3b04 	ldr.w	r3, [r5], #4
 8006ec4:	4798      	blx	r3
 8006ec6:	3601      	adds	r6, #1
 8006ec8:	e7ee      	b.n	8006ea8 <__libc_init_array+0xc>
 8006eca:	f855 3b04 	ldr.w	r3, [r5], #4
 8006ece:	4798      	blx	r3
 8006ed0:	3601      	adds	r6, #1
 8006ed2:	e7f2      	b.n	8006eba <__libc_init_array+0x1e>
 8006ed4:	08006f44 	.word	0x08006f44
 8006ed8:	08006f44 	.word	0x08006f44
 8006edc:	08006f44 	.word	0x08006f44
 8006ee0:	08006f48 	.word	0x08006f48

08006ee4 <_init>:
 8006ee4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006ee6:	bf00      	nop
 8006ee8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006eea:	bc08      	pop	{r3}
 8006eec:	469e      	mov	lr, r3
 8006eee:	4770      	bx	lr

08006ef0 <_fini>:
 8006ef0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006ef2:	bf00      	nop
 8006ef4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006ef6:	bc08      	pop	{r3}
 8006ef8:	469e      	mov	lr, r3
 8006efa:	4770      	bx	lr
